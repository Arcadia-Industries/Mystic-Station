using Content.Shared.Chemistry.Reagent;
using Content.Shared.Database;
using Content.Shared.FixedPoint;
using Content.Shared.Atmos;
using Robust.Shared.Audio;
using Robust.Shared.Prototypes;
namespace Content.Shared.Chemistry.Reaction;

/// <summary>
/// Prototype for chemical reaction definitions
/// </summary>
[Prototype("reaction")]
public sealed partial class ReactionPrototype : IPrototype, IComparable<ReactionPrototype>
{
    [ViewVariables]
    [IdDataField]
    public string ID { get; private set; } = default!;

    [DataField]
    public string Name { get; private set; } = default!;

    [DataField]
    public ReactionTypes ReactionType = ReactionTypes.Synthesis;

    /// <summary>
    ///     Chemical substances and physical elements required for the reaction to occur;
    ///     Some reactions will require heat, electricity or pressure to happen.
    /// </summary>
    [DataField]
    public Dictionary<string, ReactionSubjectPrototype> Reactants = new(0); 

    /// <summary>
    ///     Chemical substances or physical elements generated by the reaction.
    ///     Exothermic reactions will heat up quickly, Endothermic ones get very cold.
    /// </summary>
    [DataField]
    public Dictionary<string, ReactionSubjectPrototype> Products = new(0);

    /// <summary>
    ///     Minimum temperature for the reaction to happen.
    /// </summary>
    [DataField]
    public float MinimumTemperature = 0f;

    /// <summary>
    ///     Maximum temperature a reaction can happen.
    /// </summary>
    [DataField]
    public float MaximumTemperature = float.PositiveInfinity;

    /// <summary>
    ///     Temperature at which the reaction happens the fastest.
    /// </summary>
    [DataField]
    public float OptimalTemperature = 0f;

    /// <summary>
    ///     How many times faster the reaction happens at the optimal temperature.
    /// </summary>
    [DataField]
    public float OptimalIncreaseFactor = 1f;

    [DataField]
    public float MinimumVoltage = 0f;

    [DataField]
    public float MinimumPressure = 0f;

    [DataField]
    public bool RequiresGas = false;

    /// <summary>
    ///     Positive numbers make the reaction get colder as it reacts
    ///     Negative numbers make the reaction heat up as it reacts.
    ///     On PhaseTransition reactions enthalpy means the energy required to go to change state.
    /// </summary>
    [DataField]
    public float Enthalpy = 0f;
    /// <summary>
    ///     Maximum quantity of reagents that can be reacted per second.
    ///     By default reactions are instant.
    /// </summary>
    [DataField]
    public float ReactionRate = float.PositiveInfinity;

    /// <summary>
    ///     If true, this reaction will attempt to conserve thermal energy.
    /// </summary>
    [DataField]
    public bool ConserveEnergy = true;

    /// <summary>
    ///     The required mixing categories for an entity to mix the solution with for the reaction to occur
    /// </summary>
    [DataField("requiredMixerCategories")]
    public List<string>? MixingCategories = null;

    /// <summary>
    /// If true, this reaction will only consume only integer multiples of the reactant amounts. If there are not
    /// enough reactants, the reaction does not occur. Useful for spawn-entity reactions (e.g. creating cheese).
    /// </summary>
    [DataField] public bool Quantized = false;

    /// <summary>
    /// Determines the order in which reactions occur. This should used to ensure that (in general) descriptive /
    /// pop-up generating and explosive reactions occur before things like foam/area effects.
    /// </summary>
    [DataField]
    public int Priority;

    /// <summary>
    /// Effects to be triggered when the reaction occurs.
    /// </summary>
    [DataField("effects", serverOnly: true)] public List<ReagentEffect> Effects = new();

    /// <summary>
    /// How dangerous is this effect? Stuff like bicaridine should be low, while things like methamphetamine
    /// or potas/water should be high.
    /// </summary>
    [DataField("impact", serverOnly: true)] public LogImpact Impact = LogImpact.Low;

    // TODO SERV3: Empty on the client, (de)serialize on the server with module manager is server module
    [DataField("sound", serverOnly: true)] public SoundSpecifier Sound { get; private set; } = new SoundPathSpecifier("/Audio/Effects/Chemistry/bubbles.ogg");

    public int CompareTo(ReactionPrototype? other)
    {
        if (other == null)
            return -1;

        if (Priority != other.Priority)
            return other.Priority - Priority;

        // Prioritize reagents that don't generate products. This should reduce instances where a solution
        // temporarily overflows and discards products simply due to the order in which the reactions occurred.
        // Basically: Make space in the beaker before adding new products.
        if (Products.Count != other.Products.Count)
            return Products.Count - other.Products.Count;

        return string.Compare(ID, other.ID, StringComparison.Ordinal);
    }

}

/// <summary>
///     Everything a chemical reaction needs is described by this prototype.
/// </summary>
[DataDefinition]
public sealed partial class ReactionSubjectPrototype
{

    [DataField]
    public ReactionSubjectTypes Type;

    /// <summary>
    ///     Type of gas the reaction uses/produces.
    /// </summary>
    [DataField]
    public Gas? Gas { get; private set; }

    /// <summary>
    ///     Amount of a element required for the reaction to occur.
    ///     Reagents are in units, gasses in moles, the remainder uses the game's default units.
    /// </summary>
    [DataField("amount", required: true)]
    public FixedPoint2 Amount { get; private set; }

    /// <summary>
    ///     Catalyst reagents and gasses aren't consumed as the reaction occurs.
    ///     Heat can't be a catalyst(that would be temperature).
    ///     Voltage and Pressure can only work as catalysts.
    /// </summary>
    [DataField]
    public bool Catalyst = false;
}

public enum ReactionTypes
{
    /// <summary>
    ///     Synthesis reactions consume different reagents to make a new one.
    ///     PhaseTransition reactions are used for freezing, melting or boiling reagents.
    /// </summary>
    Synthesis,
    PhaseTransition
}

public enum ReactionSubjectTypes
{
    Reagent,
    Gas
}

public enum ReactionTriggerTypes
{
    Combination,    //Combine reagents like pouring a beaker
    Mix,            //TO ADD - mix reagents by hand after they are in the same solution
    Shake           //TO ADD - shake reagents after they are in the same solution
}
