using System;
using Content.Client.Computer;
using Content.Client.IoC;
using Content.Shared.Power;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Maths;
using Robust.Shared.Timing;
using Robust.Shared.Prototypes;

namespace Content.Client.Power;

[GenerateTypedNameReferences]
public sealed partial class PowerMonitoringWindow : DefaultWindow, IComputerWindow<PowerMonitoringConsoleBoundInterfaceState>
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    public PowerMonitoringWindow()
    {
        RobustXamlLoader.Load(this);
        SetSize = MinSize = (300, 450);
        IoCManager.InjectDependencies(this);
        MasterTabContainer.SetTabTitle(0, Loc.GetString("power-monitoring-window-tab-sources"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("power-monitoring-window-tab-loads"));
    }

    public void UpdateState(PowerMonitoringConsoleBoundInterfaceState scc)
    {
        UpdateList(TotalSourcesNum, scc.TotalSources, SourcesList, scc.Sources);
        UpdateList(TotalLoadsNum, scc.TotalLoads, LoadsList, scc.Loads);
    }

    public void UpdateList(Label number, double numberVal, ItemList list, PowerMonitoringConsoleEntry[] listVal)
    {
        number.Text = Loc.GetString("power-monitoring-window-value", ("value", numberVal));
        list.Clear();
        foreach (var ent in listVal)
        {
            _prototypeManager.TryIndex(ent.IconEntityPrototypeId, out EntityPrototype? entityPrototype);
            IRsiStateLike? iconState = null;
            if (entityPrototype != null)
                iconState = SpriteComponent.GetPrototypeIcon(entityPrototype, StaticIoC.ResC);
            var icon = iconState?.GetFrame(RSI.State.Direction.South, 0);
            list.AddItem($"{ent.NameLocalized} {Loc.GetString("power-monitoring-window-value", ("value", ent.Size))}", icon, false);
        }
    }
}

[UsedImplicitly]
public sealed class PowerMonitoringConsoleBoundUserInterface : ComputerBoundUserInterface<PowerMonitoringWindow, PowerMonitoringConsoleBoundInterfaceState>
{
    public PowerMonitoringConsoleBoundUserInterface(ClientUserInterfaceComponent owner, object uiKey) : base(owner, uiKey) {}
}

