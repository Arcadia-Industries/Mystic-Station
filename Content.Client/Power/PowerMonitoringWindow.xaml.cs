using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Pinpointer;
using Content.Shared.Power;
using FastAccessors;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Graphics.RSI;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Content.Shared.Pinpointer.SharedNavMapSystem;

namespace Content.Client.Power
{
    [GenerateTypedNameReferences]
    public sealed partial class PowerMonitoringWindow : FancyWindow
    {
        private List<Control> _rowsContent = new();
        private readonly IEntityManager _entManager;
        private EntityUid? _stationUid;
        private PowerMonitoringButton? _trackedButton;
        private readonly SpriteSystem _spriteSystem = default!;
        private readonly MetaDataSystem _metaDataSystem = default!;

        private float _updateTimer = 1.0f;
        private const float UpdateTime = 1.0f;

        public static int IconSize = 16; // XAML has a `VSeparationOverride` of 20 for each row.
        public event Action? RequestPowerMonitoringDataAction;

        public PowerMonitoringWindow(PowerMonitoringConsoleBoundUserInterface userInterface, EntityUid? mapUid)
        {
            RobustXamlLoader.Load(this);
            _entManager = IoCManager.Resolve<IEntityManager>();
            _stationUid = mapUid;
            _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();
            _metaDataSystem = IoCManager.Resolve<IEntityManager>().System<MetaDataSystem>();

            if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
            {
                NavMap.MapUid = xform.GridUid;
            }

            else
            {
                NavMap.Visible = false;
                SetSize = new Vector2(775, 400);
                MinSize = SetSize;
            }

            NavMap.ShowCables = new Dictionary<CableType, bool>
            {
                [CableType.HighVoltage] = true,
                [CableType.MediumVoltage] = true,
                [CableType.Apc] = true,
            };

            MasterTabContainer.SetTabTitle(0, Loc.GetString("power-monitoring-window-label-sources"));
            MasterTabContainer.SetTabTitle(1, Loc.GetString("power-monitoring-window-label-smes"));
            MasterTabContainer.SetTabTitle(2, Loc.GetString("power-monitoring-window-label-substation"));
            MasterTabContainer.SetTabTitle(3, Loc.GetString("power-monitoring-window-label-apc"));
            MasterTabContainer.SetTabTitle(4, Loc.GetString("power-monitoring-window-label-misc"));

            ShowHVCable.OnToggled += _ => OnShowCableToggled(ShowHVCable, CableType.HighVoltage);
            ShowMVCable.OnToggled += _ => OnShowCableToggled(ShowMVCable, CableType.MediumVoltage);
            ShowLVCable.OnToggled += _ => OnShowCableToggled(ShowLVCable, CableType.Apc);

            RequestPowerMonitoringDataAction += userInterface.RequestPowerMonitoringData;

            //var t = new TextureRect();
            //t.Modulate(Color.Yellow);
        }

        private void OnShowCableToggled(CheckBox checkBox, CableType cableType)
        {
            NavMap.ShowCables[cableType] = !NavMap.ShowCables[cableType];
        }

        public void ShowEntites
            (float totalSources,
            float totalLoads,
            PowerMonitoringConsoleEntry[] sources,
            PowerMonitoringConsoleEntry[] loads,
            Dictionary<Vector2i, NavMapChunkPowerCables> powerCableChunks,
            EntityCoordinates? monitorCoords,
            bool snap,
            float precision)
        {
            ClearAllSensors();

            var monitorCoordsInStationSpace = _stationUid != null ? monitorCoords?.WithEntityId(_stationUid.Value, _entManager).Position : null;

            NavMap.PowerCableChunks = powerCableChunks;

            TotalSources.Text = Loc.GetString("power-monitoring-window-value", ("value", totalSources));
            TotalLoads.Text = Loc.GetString("power-monitoring-window-value", ("value", totalLoads));

            SourcesList.RemoveAllChildren();
            ApcList.RemoveAllChildren();
            SubstationList.RemoveAllChildren();
            SMESList.RemoveAllChildren();

            foreach (var source in sources)
            {
                AddTrackedEntity(_entManager.GetEntity(source.NetEntity), _entManager.GetCoordinates(source.Coordinates), source);

                var child = SpawnEntry(source);
                SourcesList.AddChild(child);
            }
 
            foreach (var load in loads)
            {
                AddTrackedEntity(_entManager.GetEntity(load.NetEntity), _entManager.GetCoordinates(load.Coordinates), load);

                if (load.IconEntityPrototypeId == null)
                    continue;

                if (load.IconEntityPrototypeId.Contains("APC"))
                {
                    var child = SpawnEntry(load);
                    ApcList.AddChild(child);
                }

                else if (load.IconEntityPrototypeId.Contains("Substation"))
                {
                    var child = SpawnEntry(load);
                    SubstationList.AddChild(child);
                }

                else if (load.IconEntityPrototypeId.Contains("SMES"))
                {
                    var child = SpawnEntry(load);
                    SMESList.AddChild(child);
                }
            }

            // add a row for each sensor
            /*foreach (var load in loads)
            {
                var entity = _entManager.GetEntity(load.NetEntity);
                var coordinates = _entManager.GetCoordinates(load.Coordinates);

                // add button with username
                var nameButton = new PowerMonitoringButton()
                {
                    entityUid = entity,
                    Coordinates = coordinates,
                    Text = load.NameLocalized,
                    Margin = new Thickness(5f, 5f),
                };

                if (entity == _trackedButton?.entityUid)
                    nameButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

                //SensorsTable.AddChild(nameButton);
                //_rowsContent.Add(nameButton);

                var powerLabel = new Label();
                powerLabel.Text = load.Size.ToString();

                //SensorsTable.AddChild(powerLabel);
                //_rowsContent.Add(powerLabel);

                IRsiStateLike? iconState = null;
                if (load.IconEntityPrototypeId != null)
                    iconState = _spriteSystem.GetPrototypeIcon(load.IconEntityPrototypeId);
                if (load.IconEntityPrototypeId == null)
                    continue;

                if (coordinates != null && NavMap.Visible)
                {
                    //NavMap.TrackedEntities.TryAdd(coordinates,
                    //    (true, entity == _trackedButton?.entityUid ? StyleNano.PointGreen : Color.White, iconState?.TextureFor(Direction.South)));

                    //NavMap.TrackedCoordinates.TryAdd(coordinates,
                    //    (true, entity == _trackedButton?.entityUid ? Color.White : color));

                    //NavMap.TrackedEntities.TryAdd(coordinates,
                    //    (true, entity == _trackedButton?.entityUid ? Color.White : color, icon));

                    nameButton.OnButtonUp += args =>
                    {
                        if (_trackedButton != null && _trackedButton?.Coordinates != null)
                            NavMap.TrackedCoordinates[_trackedButton.Coordinates.Value] = (true, color);
                        //NavMap.TrackedEntities[_trackedButton.Coordinates.Value] = (true, Color.White, iconState?.TextureFor(Direction.South));

                        NavMap.TrackedCoordinates[coordinates] = (true, Color.White);
                        //NavMap.TrackedEntities[coordinates] = (true, StyleNano.PointGreen, iconState?.TextureFor(Direction.South));
                        NavMap.CenterToCoordinates(coordinates);

                        nameButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
                        if (_trackedButton != null)
                        {   //Make previous button default
                            var previousButton = SensorsTable.GetChild(_trackedButton.IndexInTable);
                            previousButton.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);
                        }

                        _trackedButton = nameButton;
                        _trackedButton.IndexInTable = nameButton.GetPositionInParent();
                    };
                }
            }*/

            // Show monitor point
            var icon1 = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_circle.png")).Frame0();

            if (monitorCoords != null)
                NavMap.TrackedEntities.Add(monitorCoords.Value, (true, StyleNano.PointMagenta, icon1));
        }

        private void AddTrackedEntity(EntityUid uid, EntityCoordinates coords, PowerMonitoringConsoleEntry entry)
        {
            if (coords == null || !NavMap.Visible)
                return;

            var color = Color.White;
            var icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_circle.png")).Frame0();

            if (entry.IconEntityPrototypeId.Contains("APC"))
            {
                color = Color.LimeGreen;
                icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_triangle.png")).Frame0();
            }

            else if (entry.IconEntityPrototypeId.Contains("Substation"))
            {
                color = Color.Yellow;
                icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_square.png")).Frame0();
            }

            else if (entry.IconEntityPrototypeId.Contains("SMES"))
            {
                color = Color.Orange;
                icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_hexagon.png")).Frame0();
            }

            NavMap.TrackedEntities.TryAdd(coords, (true, color, icon));
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            _updateTimer += args.DeltaSeconds;

            if (_updateTimer >= UpdateTime)
            {
                _updateTimer -= UpdateTime;
                RequestPowerMonitoringDataAction?.Invoke();
            }
        }

        private void ClearAllSensors()
        {
            foreach (var child in _rowsContent)
            {
                //SensorsTable.RemoveChild(child);
            }

            _rowsContent.Clear();
            NavMap.TrackedCoordinates.Clear();
            NavMap.TrackedEntities.Clear();
        }

        public Button SpawnEntry(PowerMonitoringConsoleEntry entry)
        {
            var uid = _entManager.GetEntity(entry.NetEntity);

            var child = new Button();
            child.StyleClasses.Add("OpenLeft");
            child.ToolTip = Loc.GetString(entry.NameLocalized);

            IRsiStateLike? iconState = null;
            if (entry.IconEntityPrototypeId != null)
                iconState = _spriteSystem.GetPrototypeIcon(entry.IconEntityPrototypeId);

            var grid = new GridContainer
            {
                Columns = 3,
            };

            var icon = new TextureRect();
            icon.SetSize = new Vector2(32f, 32f);

            if (iconState != null)
                icon.Texture = iconState.GetFrame(RsiDirection.South, 0);

            /*var sprite = new SpriteView();
            sprite.SetEntity(uid);
            sprite.OverrideDirection = Direction.South;
            sprite.MinSize = new Vector2(32f, 32f);*/

            var label = new Label();
            label.MinWidth = 120f;
            label.MaxWidth = 120f;
            label.ClipText = true;
            label.Text = Loc.GetString(entry.NameLocalized);
            label.HorizontalAlignment = HAlignment.Left;
            label.HorizontalExpand = true;

            var value = new Label();
            value.Text = Loc.GetString("power-monitoring-window-value", ("value", entry.Size));
            value.MinWidth = 120f;
            value.HorizontalAlignment = HAlignment.Right;
            value.HorizontalExpand = true;

            grid.AddChild(icon);
            grid.AddChild(label);
            grid.AddChild(value);
            child.AddChild(grid);

            return child;
        }
    }

    public sealed class PowerMonitoringButton : Button
    {
        public int IndexInTable;
        public EntityUid? entityUid;
        public EntityCoordinates? Coordinates;
    }


}
