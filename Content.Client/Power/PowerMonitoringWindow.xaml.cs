using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Power;
using FastAccessors;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Map;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Content.Shared.Pinpointer.SharedNavMapSystem;

namespace Content.Client.Power
{
    [GenerateTypedNameReferences]
    public sealed partial class PowerMonitoringWindow : FancyWindow
    {
        private List<Control> _rowsContent = new();
        private List<(DirectionIcon Icon, Vector2 Position)> _directionIcons = new();
        private readonly IEntityManager _entManager;
        private readonly IEyeManager _eye;
        private EntityUid? _stationUid;
        private PowerMonitoringButton? _trackedButton;
        private readonly SpriteSystem _spriteSystem = default!;

        public static int IconSize = 16; // XAML has a `VSeparationOverride` of 20 for each row.

        public PowerMonitoringWindow(EntityUid? mapUid)
        {
            RobustXamlLoader.Load(this);
            _eye = IoCManager.Resolve<IEyeManager>();
            _entManager = IoCManager.Resolve<IEntityManager>();
            _stationUid = mapUid;
            _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();

            if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
            {
                NavMap.MapUid = xform.GridUid;
            }

            else
            {
                NavMap.Visible = false;
                SetSize = new Vector2(775, 400);
                MinSize = SetSize;
            }

            NavMap.ShowCables = new Dictionary<CableType, bool>
            {
                [CableType.HV] = true,
                [CableType.MV] = true,
                [CableType.LV] = true,
            };

            ShowHVCable.OnToggled += _ => OnShowCableToggled(ShowHVCable, CableType.HV);
            ShowMVCable.OnToggled += _ => OnShowCableToggled(ShowMVCable, CableType.MV);
            ShowLVCable.OnToggled += _ => OnShowCableToggled(ShowLVCable, CableType.LV);
        }

        private void OnShowCableToggled(CheckBox checkBox, CableType cableType)
        {
            NavMap.ShowCables[cableType] = !NavMap.ShowCables[cableType];
        }

        public void ShowEntites(PowerMonitoringConsoleEntry[] loads, EntityCoordinates? monitorCoords, bool snap, float precision)
        {
            ClearAllSensors();

            var monitorCoordsInStationSpace = _stationUid != null ? monitorCoords?.WithEntityId(_stationUid.Value, _entManager).Position : null;

            if (loads.Length == 0)
            {
                NoServerLabel.Visible = true;
                return;
            }

            NoServerLabel.Visible = false;

            // add a row for each sensor
            foreach (var load in loads)
            {
                var entity = _entManager.GetEntity(load.NetEntity);
                var coordinates = _entManager.GetCoordinates(load.Coordinates);

                // add button with username
                var nameButton = new PowerMonitoringButton()
                {
                    entityUid = entity,
                    Coordinates = coordinates,
                    Text = load.NameLocalized,
                    Margin = new Thickness(5f, 5f),
                };

                if (entity == _trackedButton?.entityUid)
                    nameButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

                SensorsTable.AddChild(nameButton);
                _rowsContent.Add(nameButton);

                var powerLabel = new Label();
                powerLabel.Text = load.Size.ToString();

                SensorsTable.AddChild(powerLabel);
                _rowsContent.Add(powerLabel);

                IRsiStateLike? iconState = null;
                if (load.IconEntityPrototypeId != null)
                    iconState = _spriteSystem.GetPrototypeIcon(load.IconEntityPrototypeId);
                if (load.IconEntityPrototypeId == null)
                    continue;

                if (coordinates != null && NavMap.Visible)
                {
                    //NavMap.TrackedEntities.TryAdd(coordinates,
                    //    (true, entity == _trackedButton?.entityUid ? StyleNano.PointGreen : Color.White, iconState?.TextureFor(Direction.South)));

                    var color = Color.White;
                    var icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_circle.png")).Frame0(); ;

                    if (load.IconEntityPrototypeId.Contains("APC"))
                    {
                        color = Color.LimeGreen;
                        icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_triangle.png")).Frame0();
                    }

                    if (load.IconEntityPrototypeId.Contains("Substation"))
                    {
                        color = Color.Yellow;
                        icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_square.png")).Frame0();
                    }

                    if (load.IconEntityPrototypeId.Contains("SMES"))
                    {
                        color = Color.Orange;
                        icon = new SpriteSpecifier.Texture(new("/Textures/Interface/PowerMonitoring/beveled_hexagon.png")).Frame0();
                    }

                    //NavMap.TrackedCoordinates.TryAdd(coordinates,
                    //    (true, entity == _trackedButton?.entityUid ? Color.White : color));

                    NavMap.TrackedEntities.TryAdd(coordinates,
                        (true, entity == _trackedButton?.entityUid ? Color.White : color, icon));

                    /*nameButton.OnButtonUp += args =>
                    {
                        if (_trackedButton != null && _trackedButton?.Coordinates != null)
                            NavMap.TrackedCoordinates[_trackedButton.Coordinates.Value] = (true, color);
                        //NavMap.TrackedEntities[_trackedButton.Coordinates.Value] = (true, Color.White, iconState?.TextureFor(Direction.South));

                        NavMap.TrackedCoordinates[coordinates] = (true, Color.White);
                        //NavMap.TrackedEntities[coordinates] = (true, StyleNano.PointGreen, iconState?.TextureFor(Direction.South));
                        NavMap.CenterToCoordinates(coordinates);

                        nameButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
                        if (_trackedButton != null)
                        {   //Make previous button default
                            var previousButton = SensorsTable.GetChild(_trackedButton.IndexInTable);
                            previousButton.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);
                        }

                        _trackedButton = nameButton;
                        _trackedButton.IndexInTable = nameButton.GetPositionInParent();
                    };*/
                }
            }

            // Show monitor point
            if (monitorCoords != null)
                NavMap.TrackedCoordinates.Add(monitorCoords.Value, (true, StyleNano.PointMagenta));
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {

        }

        private void ClearAllSensors()
        {
            foreach (var child in _rowsContent)
            {
                SensorsTable.RemoveChild(child);
            }

            _rowsContent.Clear();
            NavMap.TrackedCoordinates.Clear();
            NavMap.TrackedEntities.Clear();
        }
    }

    public sealed class PowerMonitoringButton : Button
    {
        public int IndexInTable;
        public EntityUid? entityUid;
        public EntityCoordinates? Coordinates;
    }
}
