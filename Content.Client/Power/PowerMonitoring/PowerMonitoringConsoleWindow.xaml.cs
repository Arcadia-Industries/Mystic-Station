using System.Numerics;
using Content.Client.Computer;
using Content.Shared.Power;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Power.PowerMonitoring;

[GenerateTypedNameReferences]
public sealed partial class PowerMonitoringConsoleWindow : FancyWindow, IComputerWindow<PowerMonitoringBoundInterfaceState>
{
    [Dependency] private readonly EntityManager _entityManager = default!;
    private readonly PowerMonitoringSystem? _powerMonitoring = default!;

    public PowerMonitoringConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _entityManager.TrySystem(out _powerMonitoring);

        SetSize = MinSize = new Vector2(300, 450);

        MasterTabContainer.SetTabTitle(0, Loc.GetString("power-monitoring-window-tab-sources"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("power-monitoring-window-tab-loads"));
    }

    public void UpdateState(PowerMonitoringBoundInterfaceState state)
    {
        if (TotalSources != null)
            TotalSources.Text = Loc.GetString("power-monitoring-window-value", ("value", state.TotalSources));

        if (TotalLoads != null)
            TotalLoads.Text = Loc.GetString("power-monitoring-window-value", ("value", state.TotalLoads));

        if (_powerMonitoring == null)
            return;

        _powerMonitoring.UpdateSourcesList(SourcesList, state.Sources);
        _powerMonitoring.UpdateLoadsList(LoadsList, state.Loads, ShowInactiveConsumersCheckBox.Pressed);
    }
}


