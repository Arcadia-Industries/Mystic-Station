using Content.Client.DoAfter;
using Content.Client.UserInterface.Controls;
using Content.Shared.Power.Generator;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Power.Generator;

[GenerateTypedNameReferences]
public sealed partial class GeneratorWindow : FancyWindow
{
    private readonly EntityUid _entity;

    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    private readonly FuelGeneratorComponent? _component;
    private PortableGeneratorComponentBuiState? _lastState;

    public GeneratorWindow(PortableGeneratorBoundUserInterface bui, EntityUid entity)
    {
        _entity = entity;
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _entityManager.TryGetComponent(entity, out _component);

        EntityView.SetEntity(entity);
        TargetPower.IsValid += IsValid;
        TargetPower.ValueChanged += (args) =>
        {
            bui.SetTargetPower(args.Value);
        };

        StartButton.OnPressed += _ => bui.Start();
        StopButton.OnPressed += _ => bui.Stop();
        OutputSwitchButton.OnPressed += _ => bui.SwitchOutput();
        FuelEject.OnPressed += _ => bui.EjectFuel();
    }

    private bool IsValid(int arg)
    {
        if (arg < 0)
            return false;

        if (arg > (_lastState?.MaximumPower / 1000.0f ?? 0))
            return false;

        return true;
    }

    public void Update(PortableGeneratorComponentBuiState state)
    {
        if (_component == null)
            return;

        var oldState = _lastState;
        _lastState = state;
        // ReSharper disable once CompareOfFloatsByEqualityOperator
        if (oldState?.TargetPower != state.TargetPower)
            TargetPower.OverrideValue((int)(state.TargetPower / 1000.0f));
        Efficiency.Text = SharedGeneratorSystem.CalcFuelEfficiency(state.TargetPower, state.OptimalPower, _component).ToString("P1");
        FuelFraction.Value = state.RemainingFuel - (int) state.RemainingFuel;
        FuelLeft.Text = ((int) MathF.Floor(state.RemainingFuel)).ToString();

        if (TryGetStartProgress(out var progress))
        {
            StatusLabel.Text = _loc.GetString("portable-generator-ui-status-starting");
            StatusLabel.SetOnlyStyleClass("Caution");
            StartProgress.Visible = true;
            StartProgress.Value = progress;
            StartButton.Visible = false;
            StopButton.Visible = false;
        }
        else if (state.On)
        {
            StatusLabel.Text = _loc.GetString("portable-generator-ui-status-running");
            StatusLabel.SetOnlyStyleClass("Good");
            StartProgress.Visible = false;
            StartButton.Visible = false;
            StopButton.Visible = true;
        }
        else
        {
            StatusLabel.Text = _loc.GetString("portable-generator-ui-status-stopped");
            StatusLabel.SetOnlyStyleClass("Danger");
            StartProgress.Visible = false;
            StartButton.Visible = true;
            StopButton.Visible = false;
        }

        var canSwitch = _entityManager.TryGetComponent(_entity, out PowerSwitchableGeneratorComponent? switchable);
        OutputSwitchLabel.Visible = canSwitch;
        OutputSwitchButton.Visible = canSwitch;

        if (canSwitch)
        {
            var isHV = switchable!.ActiveOutput == PowerSwitchableGeneratorOutput.HV;
            OutputSwitchLabel.Text =
                Loc.GetString(isHV ? "portable-generator-ui-switch-hv" : "portable-generator-ui-switch-mv");
            OutputSwitchButton.Text =
                Loc.GetString(isHV ? "portable-generator-ui-switch-to-mv" : "portable-generator-ui-switch-to-hv");
        }

        CloggedLabel.Visible = state.Clogged;
    }

    private bool TryGetStartProgress(out float progress)
    {
        var doAfterSystem = _entityManager.EntitySysManager.GetEntitySystem<DoAfterSystem>();
        return doAfterSystem.TryFindActiveDoAfter<GeneratorStartedEvent>(_entity, out _, out _, out progress);
    }
}
