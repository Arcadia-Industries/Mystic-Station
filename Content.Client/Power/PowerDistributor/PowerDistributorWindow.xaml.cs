using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Client.Stylesheets;
using Robust.Client.Graphics;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Shared.Power;
using Robust.Client.GameObjects;
using Robust.Shared.Prototypes;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Graphics.RSI;
using System.Linq;
using System.Buffers;
using Robust.Client.UserInterface;

namespace Content.Client.Power.PowerDistributor;

[GenerateTypedNameReferences]
public sealed partial class PowerDistributorWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly EntityManager _entityManager = default!;

    private readonly SpriteSystem _spriteSystem = default!;

    public PowerDistributorWindow(PowerDistributorBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        SetSize = MinSize = new System.Numerics.Vector2(300, 450);
        _spriteSystem = IoCManager.Resolve<IEntityManager>().System<SpriteSystem>();

        MasterTabContainer.SetTabTitle(0, Loc.GetString("power-distributor-window-tab-sources"));
        MasterTabContainer.SetTabTitle(1, Loc.GetString("power-distributor-window-tab-loads"));

        EntityView.SetEntity(owner.Owner);

        if (_entityManager.TryGetComponent<MetaDataComponent>(owner.Owner, out var meta))
            Title = meta.EntityName;
    }

    public void UpdateState(BoundUserInterfaceState state)
    {
        var castState = (PowerDistributorBoundInterfaceState) state;

        if (PowerSupplyLabel != null)
            PowerSupplyLabel.Text = Loc.GetString("power-distributor-window-value", ("value", castState.TotalSources));

        if (PowerDemandLabel != null)
            PowerDemandLabel.Text = Loc.GetString("power-distributor-window-value", ("value", castState.TotalLoads));

        if (ExternalPowerStateLabel != null)
        {
            switch (castState.ExternalPower)
            {
                case PowerDistributorExternalPowerState.None:
                    ExternalPowerStateLabel.Text = Loc.GetString("power-distributor-window-power-state-none");
                    ExternalPowerStateLabel.SetOnlyStyleClass(StyleNano.StyleClassPowerStateNone);
                    break;
                case PowerDistributorExternalPowerState.Low:
                    ExternalPowerStateLabel.Text = Loc.GetString("power-distributor-window-power-state-low");
                    ExternalPowerStateLabel.SetOnlyStyleClass(StyleNano.StyleClassPowerStateLow);
                    break;
                case PowerDistributorExternalPowerState.Good:
                    ExternalPowerStateLabel.Text = Loc.GetString("power-distributor-window-power-state-good");
                    ExternalPowerStateLabel.SetOnlyStyleClass(StyleNano.StyleClassPowerStateGood);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        if (ChargeBar != null)
        {
            ChargeBar.Value = castState.Charge;
            UpdateChargeBarColor(castState.Charge);
            var chargePercentage = (castState.Charge / ChargeBar.MaxValue);
            ChargePercentage.Text = Loc.GetString("power-distributor-window-charge-label", ("percent", chargePercentage.ToString("P0")));
        }

        UpdateList(SourcesList, castState.Sources);

        var loads = castState.Loads;
        if (!ShowInactiveConsumersCheckBox.Pressed)
        {
            // Not showing inactive consumers, so hiding them.
            // This means filtering out loads that are not either:
            // + Batteries (always important)
            // + Meaningful (size above 0)
            loads = loads.Where(a => a.IsBattery || a.Size > 0.0f).ToArray();
        }

        UpdateList(LoadsList, loads);
    }

    private void UpdateChargeBarColor(float charge)
    {
        if (ChargeBar == null)
            return;

        var normalizedCharge = charge / ChargeBar.MaxValue;

        const float leftHue = 0.0f; // Red
        const float middleHue = 0.066f; // Orange
        const float rightHue = 0.33f; // Green
        const float saturation = 1.0f; // Uniform saturation
        const float value = 0.8f; // Uniform value / brightness
        const float alpha = 1.0f; // Uniform alpha

        // These should add up to 1.0 or your transition won't be smooth
        const float leftSideSize = 0.5f; // Fraction of ChargeBar lerped from leftHue to middleHue
        const float rightSideSize = 0.5f; // Fraction of ChargeBar lerped from middleHue to rightHue

        float finalHue;
        if (normalizedCharge <= leftSideSize)
        {
            normalizedCharge /= leftSideSize; // Adjust range to 0.0 to 1.0
            finalHue = MathHelper.Lerp(leftHue, middleHue, normalizedCharge);
        }
        else
        {
            normalizedCharge = (normalizedCharge - leftSideSize) / rightSideSize; // Adjust range to 0.0 to 1.0.
            finalHue = MathHelper.Lerp(middleHue, rightHue, normalizedCharge);
        }

        // Check if null first to avoid repeatedly creating this.
        ChargeBar.ForegroundStyleBoxOverride ??= new StyleBoxFlat();

        var foregroundStyleBoxOverride = (StyleBoxFlat) ChargeBar.ForegroundStyleBoxOverride;
        foregroundStyleBoxOverride.BackgroundColor =
            Color.FromHsv(new Vector4(finalHue, saturation, value, alpha));
    }

    public void UpdateList(GridContainer list, PowerDistributorEntry[] listVal)
    {
        if (list.ChildCount > 0)
            list.RemoveAllChildren();

        for (var i = 0; i < listVal.Length; i++)
        {
            var ent = listVal[i];
            _prototypeManager.TryIndex(ent.IconEntityPrototypeId, out EntityPrototype? entityPrototype);

            // Get icon
            IRsiStateLike? iconState = null;
            if (entityPrototype != null)
                iconState = _spriteSystem.GetPrototypeIcon(entityPrototype);

            // Add icon
            //var icon = new TextureRect();
            //icon.Texture = iconState?.GetFrame(RsiDirection.South, 0);
            //icon.Margin = new Thickness(10, 0, 0, 0);
            //list.AddChild(icon);

            var icon = new SpriteView();
            icon.SetEntity(_entityManager.GetEntity(ent.NetEntity));
            icon.Margin = new Thickness(10, 0, 0, 0);
            list.AddChild(icon);

            // Add entity name
            var label = new Label();
            label.Text = ent.NameLocalized;
            label.HorizontalExpand = true;
            label.HorizontalAlignment = HAlignment.Left;
            label.Margin = new Thickness(10, 0, 0, 0);
            list.AddChild(label);

            // Add power value
            var power = new Label();
            power.Text = $"{Loc.GetString("power-distributor-window-value", ("value", ent.Size))}";
            power.HorizontalExpand = true;
            power.HorizontalAlignment = HAlignment.Right;
            power.Margin = new Thickness(0, 0, 10, 0);
            list.AddChild(power);
        }
    }
}
