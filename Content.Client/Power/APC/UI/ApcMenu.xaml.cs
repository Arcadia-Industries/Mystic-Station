using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Content.Shared.APC;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Client.Power.PowerMonitoring;
using Content.Shared.Access.Systems;
using Robust.Client.Player;

namespace Content.Client.Power.APC.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class ApcMenu : FancyWindow
    {
        [Dependency] private readonly EntityManager _entityManager = default!;
        [Dependency] private readonly IPlayerManager _playerManager = default!;
        private readonly AccessReaderSystem? _accessReader = default!;
        private readonly PowerMonitoringSystem? _powerMonitoring = default!;

        private NetEntity _owner;

        public ApcMenu(ApcBoundUserInterface owner)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            _entityManager.TrySystem(out _accessReader);
            _entityManager.TrySystem(out _powerMonitoring);

            EntityView.SetEntity(owner.Owner);

            BreakerOnButton.OnPressed += _ => TryToggleBreaker(owner, !BreakerOnButton.Pressed);
            BreakerOffButton.OnPressed += _ => TryToggleBreaker(owner, !BreakerOffButton.Pressed);

            _owner = _entityManager.GetNetEntity(owner.Owner);

            if (_entityManager.TryGetComponent<MetaDataComponent>(owner.Owner, out var meta))
                Title = meta.EntityName;
        }

        public void TryToggleBreaker(ApcBoundUserInterface owner, bool toggle)
        {
            if (!toggle)
                return;

            owner.BreakerPressed();
        }

        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (ApcBoundInterfaceState) state;

            bool hasAccess = _playerManager.LocalPlayer?.ControlledEntity != null &&
                _accessReader != null &&
                _accessReader.IsAllowed(_playerManager.LocalPlayer.ControlledEntity.Value, _entityManager.GetEntity(_owner));

            if (BreakerOnButton != null)
            {
                BreakerOnButton.ToolTip = !hasAccess ? Loc.GetString("apc-component-insufficient-access") : null;
                BreakerOnButton.Pressed = castState.MainBreaker;
            }

            if (BreakerOffButton != null)
            {
                BreakerOffButton.ToolTip = !hasAccess ? Loc.GetString("apc-component-insufficient-access") : null;
                BreakerOffButton.Pressed = !castState.MainBreaker;
            }

            if (PowerLabel != null)
                PowerLabel.Text = Loc.GetString("power-monitoring-window-value", ("value", castState.Power));

            if (_powerMonitoring == null)
                return;

            if (ExternalPowerStateLabel != null)
                _powerMonitoring.UpdateExternalPowerStateLabel(ExternalPowerStateLabel, castState.ExternalPower);

            if (ChargeBar != null)
            {
                ChargeBar.Value = castState.Charge;
                _powerMonitoring.UpdateChargeBarColor(ChargeBar, castState.Charge);
                var chargePercentage = castState.Charge / ChargeBar.MaxValue;
                ChargePercentage.Text = Loc.GetString("power-monitoring-window-charge-label", ("percent", chargePercentage.ToString("P0")));
            }
        }
    }
}
