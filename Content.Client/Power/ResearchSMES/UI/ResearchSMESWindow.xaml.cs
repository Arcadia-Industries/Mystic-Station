using Content.Client.UserInterface;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Content.Shared.Power;

namespace Content.Client.Power.ResearchSMES.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class ResearchSMESWindow : DefaultWindow
    {
        public ResearchSMESWindow(ResearchSMESBoundUserInterface ui)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            ToggleResearchMode.OnPressed += _ => ui.ButtonPressed(UiButton.ToggleResearchMode);
            ToggleShield.OnPressed += _ => ui.ButtonPressed(UiButton.ToggleShield);
            IncreaseSiphon.OnPressed += _ => ui.ButtonPressed(UiButton.IncreaseSiphon);
            DecreaseSiphon.OnPressed += _ => ui.ButtonPressed(UiButton.DecreaseSiphon);
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (ResearchSMESBoundUserInterfaceState) state;

            // Disable all buttons if not powered
            if (Contents.Children != null)
            {
                ButtonHelpers.SetButtonDisabledRecursive(Contents, !castState.HasPower);
                ToggleResearchMode.Disabled = false;
                ToggleShield.Disabled = false;
            }

            if (castState.ResearchMode)
            {
                ResearchMode.Text = Loc.GetString("research-smes-on");
            } else
            {
                ResearchMode.Text = Loc.GetString("research-smes-off");
            }
            if (castState.ShieldingActive)
            {
                ShieldingActive.Text = Loc.GetString("research-smes-on");
            } else
            {
                ShieldingActive.Text = Loc.GetString("research-smes-off");
            }

            AnalysisChargeSiphon.Text = $"{Math.Round(castState.AnalysisChargeSiphon * 100)}%";
            ChargeStored.Text = $"{Math.Round(castState.ChargeStored/1000)} KW";
            ShieldingCost.Text = $"{Math.Round((castState.ShieldingCost*castState.AnalysisCap) / 1000)} KW";
            OverloadThreshold.Text = $"{Math.Round((castState.OverloadThreshold * castState.AnalysisCap) / 1000)} KW";

            SmesCap.Text = $"{Math.Round(castState.SmesCap / 1000)} KW";

            if (castState.ResearchComplete)
            {
                ResearchComplete.Text = Loc.GetString("research-smes-goal-complete");
            }

            if (castState.MaxCapReached)
            {
                MaxCapReached.Text = Loc.GetString("research-smes-max-cap");
            }

        }
    }
}
