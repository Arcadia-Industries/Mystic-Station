using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;
using Content.Shared.Power;
using Content.Client.Power.PowerMonitoring;

namespace Content.Client.Power.SMES;

[GenerateTypedNameReferences]
public sealed partial class PowerMonitoringSMESWindow : FancyWindow
{
    [Dependency] private readonly EntityManager _entityManager = default!;
    private readonly PowerMonitoringSystem? _powerMonitoring = default!;

    public PowerMonitoringSMESWindow(PowerMonitoringSMESBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _entityManager.TrySystem(out _powerMonitoring);

        EntityView.SetEntity(owner.Owner);

        if (_entityManager.TryGetComponent<MetaDataComponent>(owner.Owner, out var meta))
            Title = meta.EntityName;
    }

    public void UpdateState(PowerMonitoringBoundInterfaceState state)
    {
        if (PowerDemandLabel != null)
            PowerDemandLabel.Text = Loc.GetString("power-monitoring-window-value", ("value", state.TotalLoads));

        if (_powerMonitoring == null)
            return;

        if (ExternalPowerStateLabel != null)
        {
            _powerMonitoring.UpdateExternalPowerStateLabel(ExternalPowerStateLabel, state.ExternalPower);
        }

        if (ChargeBar != null)
        {
            ChargeBar.Value = state.Charge;
            _powerMonitoring.UpdateChargeBarColor(ChargeBar, state.Charge);
            var chargePercentage = state.Charge / ChargeBar.MaxValue;
            ChargePercentage.Text = Loc.GetString("power-monitoring-window-charge-label", ("percent", chargePercentage.ToString("P0")));
        }
    }
}
