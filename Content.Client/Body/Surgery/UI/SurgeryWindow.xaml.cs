using Content.Shared.Body.Surgery.Operation;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.Log;
using System;
using System.Collections.Generic;

namespace Content.Client.Body.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SurgeryWindow : DefaultWindow
{
    private readonly IEntityManager _entMan;

    public SurgeryWindow(IEntityManager entMan)
    {
        _entMan = entMan;

        MinSize = SetSize = (500, 250);
        RobustXamlLoader.Load(this);
    }

    public Action<EntityUid, string>? OperationSelected;

    public void SetTargets(Dictionary<EntityUid, List<SurgeryOperationPrototype>> targets)
    {
        Operations.DisposeAllChildren();

        foreach (var (uid, operations) in targets)
        {
            // TODO SURGERY: skip if there are no non-hidden operations
            //if (operation.Hidden)
            //    continue;

            var tab = new OperationTab
            {
                Name = _entMan.GetComponent<MetaDataComponent>(uid).EntityName
            };

            foreach (var operation in operations)
            {
                var item = tab.Targets.AddItem(operation.Name);
                // TODO SURGERY: operation icons?
                item.OnSelected += _ => ItemPressed(uid, operation.ID);
            }

            Operations.AddChild(tab);
        }
    }

    private void ItemPressed(EntityUid target, string operationId)
    {
        OperationSelected?.Invoke(target, operationId);
    }
}
