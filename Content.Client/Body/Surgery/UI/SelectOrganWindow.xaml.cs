using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using System;

namespace Content.Client.Body.Surgery.UI;

[GenerateTypedNameReferences]
public sealed partial class SelectOrganWindow : DefaultWindow
{
    private readonly IEntityManager _entMan;

    public SelectOrganWindow(IEntityManager entMan)
    {
        _entMan = entMan;

        MinSize = SetSize = (500, 250);
        RobustXamlLoader.Load(this);
    }

    public Action<EntityUid>? OrganSelected;

    public void SetOrgans(List<EntityUid> organs)
    {
        Organs.DisposeAllChildren();

        foreach (var uid in organs)
        {
            var name = _entMan.GetComponent<MetaDataComponent>(uid).EntityName;

            var item = Organs.AddItem(name);
            // TODO SURGERY: get organ icon
            item.OnSelected += _ => ItemPressed(uid);
        }
    }

    private void ItemPressed(EntityUid organ)
    {
        OrganSelected?.Invoke(organ);
    }
}
