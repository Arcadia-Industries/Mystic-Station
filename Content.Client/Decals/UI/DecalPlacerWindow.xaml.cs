using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Crayon;
using Content.Shared.Decals;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using static Robust.Client.UserInterface.Controls.BaseButton;

namespace Content.Client.Decals.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class DecalPlacerWindow : DefaultWindow
    {
        private IPrototypeManager _prototypeManager;
        private DecalPlacementSystem _decalPlacementSystem;

        private Dictionary<string, Texture>? _decals;
        private string? _selected;
        private Color _color = Color.White;
        private bool _useColor = false;
        private bool _snap = false;
        private float _rotation = 0.0f;

        public DecalPlacerWindow(IPrototypeManager prototypeManager)
        {
            RobustXamlLoader.Load(this);

            _prototypeManager = prototypeManager;
            _decalPlacementSystem = EntitySystem.Get<DecalPlacementSystem>();
            Search.OnTextChanged += _ => RefreshList();
            ColorPicker.OnColorPicked += (color =>
            {
                _color = color;
                UpdateDecalPlacementInfo();
                RefreshList();
            });
            RotationSpinBox.OnValueChanged += (args =>
            {
                _rotation = args.Value;
                UpdateDecalPlacementInfo();
            });
            EnableColor.OnToggled += (args =>
            {
                _useColor = args.Pressed;
                UpdateDecalPlacementInfo();
                RefreshList();
            });
            EnableSnap.OnToggled += (args =>
            {
                _snap = args.Pressed;
                UpdateDecalPlacementInfo();
            });

            Populate();
        }

        private void UpdateDecalPlacementInfo()
        {
            if (_selected is null)
                return;

            _decalPlacementSystem.UpdateDecalInfo(_selected, _color, _rotation, _snap);
        }

        private void RefreshList()
        {
            // Clear
            Grid.RemoveAllChildren();
            if (_decals == null) return;

            var filter = Search.Text;
            foreach (var (decal, tex) in _decals)
            {
                if (!decal.Contains(filter))
                    continue;

                var button = new TextureButton()
                {
                    TextureNormal = tex,
                    Name = decal,
                    ToolTip = decal,
                    Modulate = _useColor ? _color : Color.White,
                };
                button.OnPressed += ButtonOnPressed;
                if (_selected == decal)
                {
                    var panelContainer = new PanelContainer()
                    {
                        PanelOverride = new StyleBoxFlat()
                        {
                            BackgroundColor = StyleNano.ButtonColorDefault,
                        },
                        Children =
                        {
                            button,
                        },
                    };
                    Grid.AddChild(panelContainer);
                }
                else
                {
                    Grid.AddChild(button);
                }
            }
        }

        private void ButtonOnPressed(ButtonEventArgs obj)
        {
            if (obj.Button.Name == null) return;

            _selected = obj.Button.Name;
            UpdateDecalPlacementInfo();
            RefreshList();
        }

        public void Populate()
        {
            var prototypes = _prototypeManager.EnumeratePrototypes<DecalPrototype>();
            _decals = new Dictionary<string, Texture>();
            foreach (var decalPrototype in prototypes)
            {
                _decals.Add(decalPrototype.ID, decalPrototype.Sprite.Frame0());
            }

            RefreshList();
        }

        protected override void Opened()
        {
            base.Opened();
            _decalPlacementSystem.SetActive(true);
        }

        public override void Close()
        {
            base.Close();
            _decalPlacementSystem.SetActive(false);
        }
    }
}
