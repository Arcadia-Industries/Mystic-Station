using System;
using Content.Shared.Atmos.Monitor;
using Content.Shared.Atmos.Monitor.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Atmos.Monitor.UI.Widgets
{
    [GenerateTypedNameReferences]
    public partial class ScrubberControl : BoxContainer
    {
        private GasVentScrubberData _data;
        private string _address;

        public event Action<string, IAtmosDeviceData>? ScrubberDataChanged;

        private CheckBox _enabled => CEnableDevice;
        private OptionButton _pumpDirection => CPumpDirection;
        private FloatSpinBox _volumeRate => CVolumeRate;
        private CheckBox _wideNet => CWideNet;

        private BoxContainer _gases => CGasContainer;

        public ScrubberControl(GasVentScrubberData data, string address)
        {
            RobustXamlLoader.Load(this);

            _data = data;
            _address = address;

            _enabled.Pressed = data.Enabled;
            _enabled.OnToggled += _ =>
            {
                _data.Enabled = _enabled.Pressed;
                ScrubberDataChanged?.Invoke(_address, _data);
            };

            _wideNet.Pressed = data.WideNet;
            _wideNet.OnToggled += _ =>
            {
                _data.WideNet = _wideNet.Pressed;
                ScrubberDataChanged?.Invoke(_address, _data);
            };

            _volumeRate.Value = _data.VolumeRate;
            _volumeRate.OnValueChanged += _ =>
            {
                _data.VolumeRate = _volumeRate.Value;
                ScrubberDataChanged?.Invoke(_address, _data);
            };
            _volumeRate.IsValid += value =>
            {
                if (value < 0
                    || value == float.NaN) return false;

                return true;
            };

            foreach (var value in Enum.GetValues<ScrubberPumpDirection>())
                _pumpDirection.AddItem(Loc.GetString($"{value}"), (int) value);

            _pumpDirection.SelectId((int) _data.PumpDirection);
            _pumpDirection.OnItemSelected += args =>
            {
                _pumpDirection.SelectId(args.Id);
                _data.PumpDirection = (ScrubberPumpDirection) args.Id;
                ScrubberDataChanged?.Invoke(_address, _data);
            };
        }
    }
}
