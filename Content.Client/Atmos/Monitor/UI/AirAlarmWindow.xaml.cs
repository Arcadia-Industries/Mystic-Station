using System;
using System.Collections.Generic;
using Content.Client.Atmos.Monitor.UI.Widgets;
using Content.Client.Message;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Monitor;
using Content.Shared.Atmos.Monitor.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Log;
using Robust.Shared.Prototypes;

namespace Content.Client.Atmos.Monitor.UI
{
    [GenerateTypedNameReferences]
    public partial class AirAlarmWindow : SS14Window
    {
        public event Action<string, IAtmosDeviceData>? AtmosDeviceDataChanged;
        public event Action<AtmosMonitorThresholdType, AtmosAlarmThreshold, Gas?>? AtmosAlarmThresholdChanged;
        public event Action<AirAlarmMode>? AirAlarmModeChanged;
        public event Action<string>? ResyncDeviceRequested;
        public event Action? ResyncAllRequested;

        private Label _address => CDeviceAddress;
        private Label _deviceTotal => CDeviceTotal;
        private RichTextLabel _pressure => CPressureLabel;
        private RichTextLabel _temperature => CTemperatureLabel;
        private RichTextLabel _alarmState => CStatusLabel;

        private TabContainer _tabContainer => CTabContainer;
        private BoxContainer _gasReadout => CGasContainer;
        private BoxContainer _ventDevices => CVentContainer;
        private BoxContainer _scrubberDevices => CScrubberContainer;
        private BoxContainer _pressureThreshold => CPressureThreshold;
        private BoxContainer _temperatureThreshold => CTemperatureThreshold;
        private BoxContainer _gasThreshold => CGasThresholdContainer;

        private Dictionary<string, PumpControl> _pumps = new();
        private Dictionary<string, ScrubberControl> _scrubbers = new();

        private ThresholdControl? _pressureThresholdControl;
        private ThresholdControl? _temperatureThresholdControl;
        private Dictionary<Gas, ThresholdControl> _gasThresholdControls = new();

        private Dictionary<Gas, Label> _gasLabels = new();

        private OptionButton _modes => CModeButton;

        public AirAlarmWindow()
        {
            RobustXamlLoader.Load(this);

            foreach (var mode in Enum.GetValues<AirAlarmMode>())
                _modes.AddItem($"{mode}", (int) mode);

            _modes.OnItemSelected += args =>
            {
                _modes.SelectId(args.Id);
                AirAlarmModeChanged!.Invoke((AirAlarmMode) args.Id);
            };

            foreach (var gas in Enum.GetValues<Gas>())
            {
                var gasLabel = new Label();
                _gasReadout.AddChild(gasLabel);
                _gasLabels.Add(gas, gasLabel);
            }

            _tabContainer.SetTabTitle(0, Loc.GetString("Gases"));
            _tabContainer.SetTabTitle(1, Loc.GetString("Vents"));
            _tabContainer.SetTabTitle(2, Loc.GetString("Scrubbers"));
            _tabContainer.SetTabTitle(3, Loc.GetString("Thresholds"));
        }

        public void UpdateGasData(ref AirAlarmAirData state)
        {
            _pressure.SetMarkup($"{state.Pressure}");
            _temperature.SetMarkup($"{state.Temperature}");
            _alarmState.SetMarkup($"{state.AlarmState}");

            if (state.Gases != null)
                foreach (var (gas, amount) in state.Gases)
                    _gasLabels[gas].Text = $"{gas}: {amount}";
        }

        public void UpdateModeSelector(AirAlarmMode mode)
        {
            _modes.SelectId((int) mode);
        }

        public void UpdateDeviceData(string addr, IAtmosDeviceData device)
        {
            switch (device)
            {
                case GasVentPumpData pump:
                    if (!_pumps.TryGetValue(addr, out var pumpControl))
                    {
                        var control= new PumpControl(pump, addr);
                        control.PumpDataChanged += AtmosDeviceDataChanged!.Invoke;
                        _pumps.Add(addr, control);
                        CVentContainer.AddChild(control);
                    }
                    else
                    {
                        pumpControl.ChangeData(pump);
                    }

                    break;
                case GasVentScrubberData scrubber:
                    if (!_scrubbers.TryGetValue(addr, out var scrubberControl))
                    {
                        var control = new ScrubberControl(scrubber, addr);
                        control.ScrubberDataChanged += AtmosDeviceDataChanged!.Invoke;
                        _scrubbers.Add(addr, control);
                        CScrubberContainer.AddChild(control);
                    }
                    else
                    {
                        scrubberControl.ChangeData(scrubber);
                    }

                    break;
            }
        }

        public void UpdateThreshold(ref AirAlarmUpdateAlarmThresholdMessage message)
        {
            switch (message.Type)
            {
                case AtmosMonitorThresholdType.Pressure:
                    if (_pressureThresholdControl == null)
                    {
                        _pressureThresholdControl = new ThresholdControl(message.Threshold, message.Type);
                        _pressureThresholdControl.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                        _pressureThreshold.AddChild(_pressureThresholdControl);
                    }
                    else
                    {
                        _pressureThresholdControl.UpdateThresholdData(message.Threshold);
                    }

                    break;
                case AtmosMonitorThresholdType.Temperature:
                    if (_temperatureThresholdControl == null)
                    {
                        _temperatureThresholdControl = new ThresholdControl(message.Threshold, message.Type);
                        _temperatureThresholdControl.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                        _temperatureThreshold.AddChild(_temperatureThresholdControl);
                    }
                    else
                    {
                        _temperatureThresholdControl.UpdateThresholdData(message.Threshold);
                    }

                    break;
                case AtmosMonitorThresholdType.Gas:
                    if (_gasThresholdControls.TryGetValue((Gas) message.Gas!, out var control))
                    {
                        control.UpdateThresholdData(message.Threshold);
                        break;
                    }

                    var gasThreshold = new ThresholdControl(message.Threshold, AtmosMonitorThresholdType.Gas, (Gas) message.Gas!, 100);
                    gasThreshold.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                    _gasThreshold.AddChild(new Label { Text = Loc.GetString($"{(Gas) message.Gas!}-threshold") });
                    _gasThresholdControls.Add((Gas) message.Gas!, gasThreshold);
                    _gasThreshold.AddChild(gasThreshold);

                    break;
            }
        }
    }
}
