using System;
using System.Collections.Generic;
using Content.Client.Atmos.Monitor.UI.Widgets;
using Content.Client.Message;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Monitor;
using Content.Shared.Atmos.Monitor.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Prototypes;

namespace Content.Client.Atmos.Monitor.UI
{
    [GenerateTypedNameReferences]
    public partial class AirAlarmWindow : SS14Window
    {
        public event Action<string, IAtmosDeviceData>? AtmosDeviceDataChanged;
        public event Action<AtmosMonitorThresholdType, AtmosAlarmThreshold, Gas?>? AtmosAlarmThresholdChanged;
        public event Action<AirAlarmMode>? AirAlarmModeChanged;
        public event Action<string>? ResyncDeviceRequested;
        public event Action? ResyncAllRequested;

        private Label _address => CDeviceAddress;
        private Label _deviceTotal => CDeviceTotal;
        private RichTextLabel _pressure => CPressureLabel;
        private RichTextLabel _temperature => CTemperatureLabel;
        private RichTextLabel _alarmState => CStatusLabel;

        private TabContainer _tabContainer => CTabContainer;
        private BoxContainer _gasReadout => CGasContainer;
        private BoxContainer _ventDevices => CVentContainer;
        private BoxContainer _scrubberDevices => CScrubberContainer;
        private BoxContainer _pressureThreshold => CPressureThreshold;
        private BoxContainer _temperatureThreshold => CTemperatureThreshold;
        private BoxContainer _gasThreshold => CGasThresholdContainer;

        private ThresholdControl? _pressureThresholdControl;
        private ThresholdControl? _temperatureThresholdControl;
        private Dictionary<Gas, ThresholdControl> _gasThresholdControls = new();

        private Dictionary<Gas, Label> _gasLabels = new();

        private OptionButton _modes => CModeButton;

        public AirAlarmWindow()
        {
            RobustXamlLoader.Load(this);

            foreach (var mode in Enum.GetValues<AirAlarmMode>())
                _modes.AddItem($"{mode}", (int) mode);

            _modes.OnItemSelected += args =>
            {
                _modes.SelectId(args.Id);
                AirAlarmModeChanged!.Invoke((AirAlarmMode) args.Id);
            };

            foreach (var gas in Enum.GetValues<Gas>())
            {
                var gasLabel = new Label();
                _gasReadout.AddChild(gasLabel);
                _gasLabels.Add(gas, gasLabel);
            }

            _tabContainer.SetTabTitle(0, Loc.GetString("Gases"));
            _tabContainer.SetTabTitle(1, Loc.GetString("Vents"));
            _tabContainer.SetTabTitle(2, Loc.GetString("Scrubbers"));
            _tabContainer.SetTabTitle(3, Loc.GetString("Thresholds"));

        }

        public void UpdateGasData(ref AirAlarmAirData state)
        {
            _pressure.SetMarkup($"{state.Pressure}");
            _temperature.SetMarkup($"{state.Temperature}");
            _alarmState.SetMarkup($"{state.AlarmState}");

            if (state.Gases != null)
                foreach (var (gas, amount) in state.Gases)
                    _gasLabels[gas].Text = $"{gas}: {amount}";
        }

        public void UpdateModeSelector(AirAlarmMode mode)
        {
            _modes.SelectId((int) mode);
        }

        // Devices are the only 'dynamic' thing here.
        // TODO: Find a nicer way to make this... work.
        public void UpdateDeviceData(Dictionary<string, IAtmosDeviceData> deviceData)
        {
            foreach (var (addr, device) in deviceData)
            {
                switch (device)
                {
                    case GasVentPumpData pump:
                        var pumpControl = new PumpControl(pump, addr);
                        pumpControl.PumpDataChanged += AtmosDeviceDataChanged!.Invoke;
                        CVentContainer.AddChild(pumpControl);

                        break;
                    case GasVentScrubberData scrubber:
                        var scrubberControl = new ScrubberControl(scrubber, addr);
                        scrubberControl.ScrubberDataChanged += AtmosDeviceDataChanged!.Invoke;
                        CScrubberContainer.AddChild(scrubberControl);

                        break;
                }
            }
        }

        public void UpdateThresholds(AirAlarmDataComponent state)
        {
            if (_pressureThresholdControl == null)
            {
                _pressureThresholdControl = new ThresholdControl(state.PressureThreshold, AtmosMonitorThresholdType.Pressure);
                _pressureThresholdControl.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                _pressureThreshold.AddChild(_pressureThresholdControl);
            }
            else
            {
                _pressureThresholdControl.UpdateThresholdData(state.PressureThreshold);
            }

            if (_temperatureThresholdControl == null)
            {
                _temperatureThresholdControl = new ThresholdControl(state.TemperatureThreshold, AtmosMonitorThresholdType.Temperature);
                _temperatureThresholdControl.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                _temperatureThreshold.AddChild(_temperatureThresholdControl);
            }
            else
            {
                _temperatureThresholdControl.UpdateThresholdData(state.TemperatureThreshold);
            }

            foreach (var (gas, threshold) in state.GasThresholds)
            {
                if (_gasThresholdControls.TryGetValue(gas, out var control))
                {
                    control.UpdateThresholdData(threshold);
                    continue;
                }

                var gasThreshold = new ThresholdControl(threshold, AtmosMonitorThresholdType.Gas, gas);
                gasThreshold.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                _gasThreshold.AddChild(new Label { Text = Loc.GetString($"{gas}-threshold") });
                _gasThresholdControls.Add(gas, gasThreshold);
                _gasThreshold.AddChild(gasThreshold);
            }
        }
    }
}
