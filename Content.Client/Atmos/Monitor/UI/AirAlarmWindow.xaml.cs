using System;
using Content.Client.Atmos.Monitor.UI.Widgets;
using Content.Client.Message;
using Content.Shared.Atmos;
using Content.Shared.Atmos.Monitor;
using Content.Shared.Atmos.Monitor.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Atmos.Monitor.UI
{
    [GenerateTypedNameReferences]
    public partial class AirAlarmWindow : SS14Window
    {
        public event Action<string, IAtmosDeviceData>? AtmosDeviceDataChanged;
        public event Action<AtmosMonitorThresholdType, AtmosAlarmThreshold, Gas?>? AtmosAlarmThresholdChanged;
        public event Action<AirAlarmMode>? AirAlarmModeChanged;
        public event Action<string>? ResyncDeviceRequested;
        public event Action? ResyncAllRequested;

        private Label _address => CDeviceAddress;
        private Label _deviceTotal => CDeviceTotal;
        private RichTextLabel _pressure => CPressureLabel;
        private RichTextLabel _temperature => CTemperatureLabel;
        private RichTextLabel _alarmState => CStatusLabel;

        private BoxContainer _gasReadout => CGasContainer;
        private BoxContainer _ventDevices => CVentContainer;
        private BoxContainer _scrubberDevices => CScrubberContainer;
        private BoxContainer _pressureThreshold => CPressureThreshold;
        private BoxContainer _temperatureThreshold => CTemperatureThreshold;
        private BoxContainer _gasThreshold => CGasThresholdContainer;

        private OptionButton _modes => CModeButton;

        public AirAlarmWindow()
        {
            RobustXamlLoader.Load(this);

            foreach (var mode in Enum.GetValues<AirAlarmMode>())
                _modes.AddItem($"{mode}", (int) mode);

            _modes.OnItemSelected += args =>
            {
                _modes.SelectId(args.Id);
                AirAlarmModeChanged!.Invoke((AirAlarmMode) args.Id);
            };
        }

        public void UpdateState(AirAlarmDataComponent state)
        {
            _pressure.SetMarkup($"{state.Pressure}");
            _temperature.SetMarkup($"{state.Temperature}");
            _alarmState.SetMarkup($"{state.AlarmState}");

            foreach (var (addr, device) in state.DeviceData)
            {
                switch (device)
                {
                    case GasVentPumpData pump:
                        var pumpControl = new PumpControl(pump, addr);
                        pumpControl.PumpDataChanged += AtmosDeviceDataChanged!.Invoke;
                        CVentContainer.AddChild(pumpControl);

                        break;
                    case GasVentScrubberData scrubber:
                        var scrubberControl = new ScrubberControl(scrubber, addr);
                        scrubberControl.ScrubberDataChanged += AtmosDeviceDataChanged!.Invoke;
                        CScrubberContainer.AddChild(scrubberControl);

                        break;
                }
            }

            var pressureThreshold = new ThresholdControl(state.PressureThreshold, AtmosMonitorThresholdType.Pressure);
            pressureThreshold.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
            _pressureThreshold.AddChild(pressureThreshold);

            var temperatureThreshold = new ThresholdControl(state.TemperatureThreshold, AtmosMonitorThresholdType.Temperature);
            temperatureThreshold.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
            _temperatureThreshold.AddChild(temperatureThreshold);

            foreach (var (gas, threshold) in state.GasThresholds)
            {
                var gasThreshold = new ThresholdControl(threshold, AtmosMonitorThresholdType.Gas, gas);
                gasThreshold.ThresholdDataChanged += AtmosAlarmThresholdChanged!.Invoke;
                _gasThreshold.AddChild(new Label { Text = Loc.GetString($"{gas}-threshold") });
                _gasThreshold.AddChild(gasThreshold);
            }
        }
    }
}
