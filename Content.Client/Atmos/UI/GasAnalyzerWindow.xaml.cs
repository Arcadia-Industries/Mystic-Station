using Content.Shared.Atmos;
using Content.Shared.Temperature;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using static Content.Shared.Atmos.Components.SharedGasAnalyzerComponent;

namespace Content.Client.Atmos.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class GasAnalyzerWindow : DefaultWindow
    {
        public GasAnalyzerBoundUserInterface Owner { get; }
        private TabContainer _tabContainer => CTabContainer;
        private Button _refreshButton => RefreshButton;
        private BoxContainer _topBox => CTopBox;
        public event Action? RefreshData;

        public GasAnalyzerWindow(GasAnalyzerBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);

            Owner = owner;
            _refreshButton.OnPressed += _ => RefreshData?.Invoke();
        }

        public void Populate(GasAnalyzerUserMessage msg)
        {
            _tabContainer.RemoveAllChildren();
            if (msg.Error != null)
            {
                _topBox.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-error-text", ("errorText", msg.Error)),
                    FontColorOverride = Color.Red
                });
                return;
            }

            if (msg.NodeGasMixes.Length == 0)
            {
                _topBox.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-no-data")
                });
                return;
            }

            // Iterate through all mixes and create tabs for them
            for (var i = 0; i < msg.NodeGasMixes.Length; i++)
            {
                var gasMix = msg.NodeGasMixes[i];
                var tabScrollContainer = new ScrollContainer() {VerticalExpand = true};
                _tabContainer.AddChild(tabScrollContainer);
                _tabContainer.SetTabTitle(i, Loc.GetString("gas-analyzer-window-tab-title-capitalized", ("title", gasMix.Name)));

                var dataContainer = new BoxContainer() { Orientation = BoxContainer.LayoutOrientation.Vertical, VerticalExpand = true };
                tabScrollContainer.AddChild(dataContainer);

                // Pressure label
                dataContainer.AddChild(new Label
                {
                    Text = Loc.GetString("gas-analyzer-window-pressure-text", ("pressure", $"{gasMix.Pressure:0.##}"))
                });

                // If there is no gas, it doesn't really have a temperature, so skip displaying it
                if (gasMix.Pressure > Atmospherics.GasMinMoles)
                {
                    // Temperature label
                    dataContainer.AddChild(new Label
                    {
                        Text = Loc.GetString("gas-analyzer-window-temperature-text",
                            ("tempK", $"{gasMix.Temperature:0.#}"),
                            ("tempC", $"{TemperatureHelpers.KelvinToCelsius(gasMix.Temperature):0.#}"))
                    });
                }

                if (gasMix.Gases == null || gasMix.Gases?.Length == 0)
                {
                    // Separator
                    dataContainer.AddChild(new Control
                    {
                        MinSize = new Vector2(0, 10)
                    });

                    // Add a label that there are no gases so it's less confusing
                    dataContainer.AddChild(new Label
                    {
                        Text = Loc.GetString("gas-analyzer-window-no-gas-text"),
                        FontColorOverride = Color.Gray
                    });
                    // go to the next tab to process, everything below is for the fancy gas display stuff
                    continue;
                }

                // Separator
                dataContainer.AddChild(new Control
                {
                    MinSize = new Vector2(0, 10)
                });

                // Add a table with all the gases
                var tableKey = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical
                };
                var tableVal = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Vertical
                };
                dataContainer.AddChild(new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    Children =
                    {
                        tableKey,
                        new Control
                        {
                            MinSize = new Vector2(20, 0)
                        },
                        tableVal
                    }
                });
                // This is the gas bar thingy
                var height = 30;
                var minSize = 24; // This basically allows gases which are too small, to be shown properly
                var gasBar = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    HorizontalExpand = true,
                    MinSize = new Vector2(0, height)
                };
                // Separator
                dataContainer.AddChild(new Control
                {
                    MinSize = new Vector2(0, 10)
                });

                var totalGasAmount = 0f;
                foreach (var gas in gasMix.Gases!)
                {
                    totalGasAmount += gas.Amount;
                }

                for (var j = 0; j < gasMix.Gases.Length; j++)
                {
                    var gas = gasMix.Gases[j];
                    var color = Color.FromHex($"#{gas.Color}", Color.White);
                    // Add to the table
                    tableKey.AddChild(new Label
                    {
                        Text = Loc.GetString(gas.Name)
                    });
                    tableVal.AddChild(new Label
                    {
                        Text = Loc.GetString("gas-analyzer-window-molarity-text", ("mol", $"{gas.Amount:0.##}"))
                    });

                    // Add to the gas bar //TODO: highlight the currently hover one
                    var left = (j == 0) ? 0f : 2f;
                    var right = (j == gasMix.Gases.Length - 1) ? 0f : 2f;
                    gasBar.AddChild(new PanelContainer
                    {
                        ToolTip = Loc.GetString("gas-analyzer-window-molarity-percentage-text",
                            ("gasName", gas.Name),
                            ("amount", $"{gas.Amount:0.##}"),
                            ("percentage", $"{(gas.Amount / totalGasAmount * 100):0.#}")),
                        HorizontalExpand = true,
                        SizeFlagsStretchRatio = gas.Amount,
                        MouseFilter = MouseFilterMode.Pass,
                        PanelOverride = new StyleBoxFlat
                        {
                            BackgroundColor = color,
                            PaddingLeft = left,
                            PaddingRight = right
                        },
                        MinSize = new Vector2(minSize, 0)
                    });
                }

                dataContainer.AddChild(gasBar);
            }
        }
    }
}
