using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.Atmos.Piping.Portable.Components;

namespace Content.Client.Atmos.UI
{
    /// <summary>
    /// Client-side UI used to control a space heater.
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class SpaceHeaterWindow : DefaultWindow
    {
        public bool Active = false;

        public FloatSpinBox TemperatureSpinbox;

        public OptionButton ModeSelector => Mode;

        public SpaceHeaterWindow()
        {
            RobustXamlLoader.Load(this);

            SpinboxHBox.AddChild(
            TemperatureSpinbox = new FloatSpinBox(1f, 2) { MinWidth = 150, HorizontalExpand = true }
            );

            foreach (var value in Enum.GetValues<SpaceHeaterMode>())
            {
                ModeSelector.AddItem(Loc.GetString($"comp-space-heater-mode-{value}"), (int) value);
            }
        }
        public void SetActive(bool active)
        {
            Active = active;
            if (active)
            {
                ToggleStatusButton.Text = Loc.GetString("comp-space-heater-ui-status-enabled");
                ToggleStatusButton.Pressed = true;
            }
            else
            {
                ToggleStatusButton.Text = Loc.GetString("comp-space-heater-ui-status-disabled");
                ToggleStatusButton.Pressed = false;
            }
        }
        public void SetTemperature(float temperature)
        {
            TemperatureSpinbox.Value = temperature;
        }
    }
}

