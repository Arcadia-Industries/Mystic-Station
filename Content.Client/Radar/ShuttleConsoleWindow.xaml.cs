using Content.Client.Computer;
using Content.Client.UserInterface;
using Content.Shared.Radar;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Physics;
using Robust.Shared.Physics.Collision.Shapes;

namespace Content.Client.Radar;

[GenerateTypedNameReferences]
public sealed partial class ShuttleConsoleWindow : FancyWindow, IComputerWindow<RadarConsoleBoundInterfaceState>
{
    public ShuttleConsoleWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public void SetupComputerWindow(ComputerBoundUserInterfaceBase cb)
    {

    }

    public void UpdateState(RadarConsoleBoundInterfaceState scc)
    {
        ShuttleConsole.UpdateState(scc);
    }

    public void SetLinearVelocity(Vector2 value)
    {
        LinearVelocity.Text = value.ToString();
    }
}


public sealed class RadarControl : Control
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IMapManager _mapManager = default!;

    private const int MinimapRadius = 256;
    private const int MinimapMargin = 4;
    private const float GridLinesDistance = 32f;

    /// <summary>
    /// Entity used to transform all of the radar objects.
    /// </summary>
    private EntityUid? _entity;

    private float _radarRange = 256f;

    private int SizeFull => (int) ((MinimapRadius + MinimapMargin) * 2 * UIScale);
    private int ScaledMinimapRadius => (int) (MinimapRadius * UIScale);
    private float MinimapScale => _radarRange != 0 ? ScaledMinimapRadius / _radarRange : 0f;

    public RadarControl()
    {
        IoCManager.InjectDependencies(this);
        MinSize = (SizeFull, SizeFull);
    }

    public void UpdateState(RadarConsoleBoundInterfaceState ls)
    {
        _radarRange = ls.Range;
        _entity = ls.Entity;
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        // TODO: Just draw shuttles in range on fixture normals.
        var point = SizeFull / 2;
        var fakeAA = new Color(0.08f, 0.08f, 0.08f);

        handle.DrawCircle((point, point), ScaledMinimapRadius + 1, fakeAA);
        handle.DrawCircle((point, point), ScaledMinimapRadius, Color.Black);

        // No data
        if (_entity == null)
        {
            return;
        }


        var gridLines = new Color(0.08f, 0.08f, 0.08f);
        var gridLinesRadial = 8;
        var gridLinesEquatorial = (int) Math.Floor(_radarRange / GridLinesDistance);

        for (var i = 1; i < gridLinesEquatorial + 1; i++)
        {
            handle.DrawCircle((point, point), GridLinesDistance * MinimapScale * i, gridLines, false);
        }

        for (var i = 0; i < gridLinesRadial; i++)
        {
            Angle angle = (Math.PI / gridLinesRadial) * i;
            var aExtent = angle.ToVec() * ScaledMinimapRadius;
            handle.DrawLine((point, point) - aExtent, (point, point) + aExtent, gridLines);
        }

        var xform = _entManager.GetComponent<TransformComponent>(_entity.Value);
        var mapPosition = xform.MapPosition;
        var matrix = xform.InvWorldMatrix;

        // Draw our grid in detail
        var ourGridId = xform.GridID;
        var ourGridFixtures = _entManager.GetComponent<FixturesComponent>(ourGridId);
        var ourGridBody = _entManager.GetComponent<PhysicsComponent>(ourGridId);

        // Can also use ourGridBody.LocalCenter
        var offset = xform.Coordinates.Position;

        var invertedPosition = xform.Coordinates.Position - offset;
        invertedPosition.Y = -invertedPosition.Y;

        // Draw our grid; use non-filled boxes so it doesn't look awful.
        foreach (var (_, fixture) in ourGridFixtures.Fixtures)
        {
            var bounds = fixture.Shape.LocalBounds.Translated(-offset);
            var (bottom, top) = (bounds.Bottom, bounds.Top);
            bounds.Bottom = -bottom;
            bounds.Top = -top;

            handle.DrawRect(new UIBox2(bounds.TopLeft * MinimapScale + point, bounds.BottomRight * MinimapScale + point), Color.Yellow, false);
        }

        // Draw radar position on the station
        handle.DrawCircle(invertedPosition * MinimapScale + point, 5f, Color.Lime);

        // Draw other grids... differently
        foreach (var grid in _mapManager.FindGridsIntersecting(mapPosition.MapId,
                     new Box2(mapPosition.Position - _radarRange, mapPosition.Position + _radarRange)))
        {
            if (grid.Index == ourGridId) continue;

            var gridBody = _entManager.GetComponent<PhysicsComponent>(grid.GridEntityId);
            if (gridBody.Mass < 10f) continue;

            var gridXform = _entManager.GetComponent<TransformComponent>(grid.GridEntityId);
            var gridFixtures = _entManager.GetComponent<FixturesComponent>(grid.GridEntityId);
            // TODO: Do a matrix multiple here
            var gridMatrix = gridXform.WorldMatrix;

            foreach (var (_, fixture) in gridFixtures.Fixtures)
            {
                var poly = (PolygonShape) fixture.Shape;

                for (var i = 0; i < poly.VertexCount; i++)
                {
                    var j = (i + 1) % poly.VertexCount;
                    var start = matrix.Transform(gridMatrix.Transform(poly.Vertices[i]));
                    var end = matrix.Transform(gridMatrix.Transform(poly.Vertices[j]));
                    start.Y = -start.Y;
                    end.Y = -end.Y;

                    handle.DrawLine(start * MinimapScale + point, end * MinimapScale + point, Color.Aqua);
                }
            }
        }
    }
}

[UsedImplicitly]
public sealed class RadarConsoleBoundUserInterface : ComputerBoundUserInterface<ShuttleConsoleWindow, RadarConsoleBoundInterfaceState>
{
    public RadarConsoleBoundUserInterface(ClientUserInterfaceComponent owner, object uiKey) : base(owner, uiKey) {}
}
