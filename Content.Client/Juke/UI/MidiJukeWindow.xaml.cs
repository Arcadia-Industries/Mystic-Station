using System;
using Content.Shared.Juke;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Juke.UI
{
    [GenerateTypedNameReferences]
    public partial class MidiJukeWindow : SS14Window
    {
        private readonly ButtonGroup _playControlsGroup = new();

        public event Action? PlayButtonPressed;
        public event Action? PauseButtonPressed;
        public event Action? StopButtonPressed;
        public event Action<bool>? LoopButtonToggled;
        public MidiJukeWindow()
        {
            RobustXamlLoader.Load(this);
            Title = "Midi Juke"; //TODO: localize

            // PlayButton.Group = _playControlsGroup;
            // PauseButton.Group = _playControlsGroup;

            PlayButton.OnPressed += OnPlayButtonPressed;
            PauseButton.OnPressed += OnPauseButtonPressed;
            StopButton.OnPressed += OnStopButtonPressed;
            LoopButton.OnPressed += _ => LoopButtonToggled?.Invoke(LoopButton.Pressed);
        }

        private void OnPlayButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PauseButton.Pressed = false;
            PlayButtonPressed?.Invoke();
        }

        private void OnPauseButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PlayButton.Pressed = false;
            PauseButtonPressed?.Invoke();
        }

        private void OnStopButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PlayButton.Pressed = false;
            PauseButton.Pressed = false;
            StopButtonPressed?.Invoke();
        }

        public void SetPlaybackStatus(MidiJukePlaybackStatus status)
        {
            switch (status)
            {
                case MidiJukePlaybackStatus.Play:
                    PlayButton.Pressed = true;
                    PauseButton.Pressed = false;
                    break;
                case MidiJukePlaybackStatus.Pause:
                    PauseButton.Pressed = true;
                    PlayButton.Pressed = false;
                    break;
                case MidiJukePlaybackStatus.Stop:
                    PlayButton.Pressed = false;
                    PauseButton.Pressed = false;
                    break;
            }
        }

        public void SetLoop(bool loop)
        {
            LoopButton.Pressed = loop;
        }
    }
}
