using System;
using System.Collections.Generic;
using Content.Shared.Juke;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Juke.UI
{
    [GenerateTypedNameReferences]
    public partial class MidiJukeWindow : SS14Window
    {
        private string? _selectedMidi;
        private IEnumerable<string>? _midis;

        public event Action? PlayButtonPressed;
        public event Action? PauseButtonPressed;
        public event Action? StopButtonPressed;
        public event Action? SkipButtonPressed;
        public event Action<bool>? LoopButtonToggled;
        public event Action<string>? ItemSelected;
        public MidiJukeWindow()
        {
            RobustXamlLoader.Load(this);
            Title = Loc.GetString("comp-juke-midi-ui-title");

            PlayButton.OnPressed += OnPlayButtonPressed;
            PauseButton.OnPressed += OnPauseButtonPressed;
            StopButton.OnPressed += OnStopButtonPressed;
            SkipButton.OnPressed += _ => SkipButtonPressed?.Invoke();
            LoopButton.OnPressed += _ => LoopButtonToggled?.Invoke(LoopButton.Pressed);

            MidiList.OnItemSelected += MidiListOnItemSelected;

            SearchBox.OnTextChanged += SearchBoxOnTextChanged;
        }

        private void OnPlayButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PauseButton.Pressed = false;
            PlayButtonPressed?.Invoke();
        }

        private void OnPauseButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PlayButton.Pressed = false;
            PauseButtonPressed?.Invoke();
        }

        private void OnStopButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PlayButton.Pressed = false;
            PauseButton.Pressed = false;
            StopButtonPressed?.Invoke();
        }

        public void SetPlaybackStatus(MidiJukePlaybackStatus status)
        {
            switch (status)
            {
                case MidiJukePlaybackStatus.Play:
                    PlayButton.Pressed = true;
                    PauseButton.Pressed = false;
                    break;
                case MidiJukePlaybackStatus.Pause:
                    PauseButton.Pressed = true;
                    PlayButton.Pressed = false;
                    break;
                case MidiJukePlaybackStatus.Stop:
                    PlayButton.Pressed = false;
                    PauseButton.Pressed = false;
                    break;
            }
        }

        public void SetLoop(bool loop)
        {
            LoopButton.Pressed = loop;
        }

        private void MidiListOnItemSelected(ItemList.ItemListSelectedEventArgs obj)
        {
            //_selectedMidi = (string) obj.ItemList[obj.ItemIndex].Metadata!;
            ItemSelected?.Invoke((string) obj.ItemList[obj.ItemIndex].Metadata!);
        }

        public void PopulateList(IEnumerable<string> items)
        {
            _midis = items;
            MidiList.Clear();
            foreach (var fileName in _midis)
            {
                MidiList.Add(GetItem(fileName, MidiList));
            }
        }

        private void PopulateByFilter(string filter)
        {
            if (_midis == null) return;
            MidiList.Clear();
            foreach (var filename in _midis)
            {
                if (string.IsNullOrEmpty(filter) || filename.Contains(filter.Trim().ToLowerInvariant()))
                {
                    MidiList.Add(GetItem(filename, MidiList));
                }
            }
        }

        private void SearchBoxOnTextChanged(LineEdit.LineEditEventArgs obj)
        {
            PopulateByFilter(SearchBox.Text);
        }

        private ItemList.Item GetItem(string filename, ItemList owner)
        {
            return new ItemList.Item(owner)
            {
                Metadata = filename,
                Text = filename
            };
        }

        public void SetTime(int elapsed, int duration)
        {
            var elapsedMins = elapsed / 60;
            var elapsedSecs = elapsed % 60;
            var durationMins = duration / 60;
            var durationSecs = duration % 60;
            TimeStamp.Text = $"{elapsedMins}:{elapsedSecs:D2}/{durationMins}:{durationSecs:D2}";
        }

        public void EmptyTime()
        {
            TimeStamp.Text = "--/--";
        }

        public void SetCurrentFilename(string song)
        {
            SongFilename.Text = song == string.Empty ? Loc.GetString("comp-juke-ui-no-song-playing") : song;
        }

        public void SetCurrentSongTitle(string title)
        {
            SongTitle.Text = title;
        }
    }
}
