using System;
using System.Collections.Generic;
using Content.Shared.Juke;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Log;

namespace Content.Client.Juke.UI
{
    [GenerateTypedNameReferences]
    public partial class MidiJukeWindow : SS14Window
    {
        private string? _selectedMidi;
        private IEnumerable<string>? _midis;

        public event Action? PlayButtonPressed;
        public event Action? PauseButtonPressed;
        public event Action? StopButtonPressed;
        public event Action? SkipButtonPressed;
        public event Action<bool>? LoopButtonToggled;
        public event Action<string>? ItemSelected;
        public MidiJukeWindow()
        {
            RobustXamlLoader.Load(this);
            Title = "Midi Juke"; //TODO: localize

            // PlayButton.Group = _playControlsGroup;
            // PauseButton.Group = _playControlsGroup;

            PlayButton.OnPressed += OnPlayButtonPressed;
            PauseButton.OnPressed += OnPauseButtonPressed;
            StopButton.OnPressed += OnStopButtonPressed;
            SkipButton.OnPressed += _ => SkipButtonPressed?.Invoke();
            LoopButton.OnPressed += _ => LoopButtonToggled?.Invoke(LoopButton.Pressed);

            MidiList.OnItemSelected += MidiListOnItemSelected;
        }

        private void OnPlayButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PauseButton.Pressed = false;
            PlayButtonPressed?.Invoke();
        }

        private void OnPauseButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PlayButton.Pressed = false;
            PauseButtonPressed?.Invoke();
        }

        private void OnStopButtonPressed(BaseButton.ButtonEventArgs args)
        {
            PlayButton.Pressed = false;
            PauseButton.Pressed = false;
            StopButtonPressed?.Invoke();
        }

        public void SetPlaybackStatus(MidiJukePlaybackStatus status)
        {
            switch (status)
            {
                case MidiJukePlaybackStatus.Play:
                    PlayButton.Pressed = true;
                    PauseButton.Pressed = false;
                    break;
                case MidiJukePlaybackStatus.Pause:
                    PauseButton.Pressed = true;
                    PlayButton.Pressed = false;
                    break;
                case MidiJukePlaybackStatus.Stop:
                    PlayButton.Pressed = false;
                    PauseButton.Pressed = false;
                    break;
            }
        }

        public void SetLoop(bool loop)
        {
            LoopButton.Pressed = loop;
        }

        private void MidiListOnItemSelected(ItemList.ItemListSelectedEventArgs obj)
        {
            //_selectedMidi = (string) obj.ItemList[obj.ItemIndex].Metadata!;
            ItemSelected?.Invoke((string) obj.ItemList[obj.ItemIndex].Metadata!);
        }

        public void PopulateList(IEnumerable<string> items)
        {
            _midis = items;
            MidiList.Clear();
            foreach (var item in _midis)
            {
                MidiList.Add(GetItem(item, MidiList));
            }
        }

        public void SetSelectedSong(string song)
        {
            Logger.Debug($"Setting {song} as now playing...");
            foreach (var item in MidiList)
            {
                Logger.Debug($"Comparing {song} to {(string) item.Metadata!}...");
                if ((string) item.Metadata! == song)
                {
                    item.Selected = true;
                    break;
                }
            }
        }

        private ItemList.Item GetItem(string filename, ItemList owner)
        {
            return new ItemList.Item(owner)
            {
                Metadata = filename,
                Text = filename //todo: different text from actual filename?
            };
        }
    }
}
