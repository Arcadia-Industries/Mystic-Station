using Content.Client.Viewport;
using Content.Shared.SurveillanceCamera;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.SurveillanceCamera.UI;

[GenerateTypedNameReferences]
public sealed partial class SurveillanceCameraMonitorWindow : DefaultWindow
{
    public event Action<string>? CameraSelected;
    public event Action<string>? SubnetOpened;

    private readonly Dictionary<string, Tree.Item> _subnets = new();

    public SurveillanceCameraMonitorWindow()
    {
        RobustXamlLoader.Load(this);

        SubnetTree.OnItemSelected += () =>
        {
            if (SubnetTree.Selected?.Metadata == null
                || SubnetTree.Selected.Metadata is not string address)
            {
                return;
            }

            CameraSelected!(address);
        };
    }

    // The UI class should get the eye from the entity, and then
    // pass it here so that the UI can change its view.
    public void UpdateState(IEye? eye, List<string> subnets)
    {
        CameraView.Eye = eye;

        // if the subnet count is unequal, that means
        // we have to rebuild the subnets
        if (_subnets.Keys.Count != subnets.Count)
        {
            _subnets.Clear();
            SubnetTree.Clear();
        }

        foreach (var subnet in subnets)
        {
            AddSubnet(subnet);
        }
    }

    private Tree.Item AddSubnet(string subnet)
    {
        var item = SubnetTree.CreateItem();
        item.Text = subnet;
        if (!_subnets.ContainsKey(subnet))
        {
            _subnets.Add(subnet, item);
        }

        return item;
    }

    // When a subnet is queried from the client UI, it should
    // populate that subnet's tree with the nodes that indicate
    // the cameras in that subnet.
    public void PopulateSubnet(List<SurveillanceCameraInfo> subnetInfo)
    {
        if (subnetInfo.Count == 0)
        {
            return;
        }

        var subnet = subnetInfo[0].Subnet;

        if (!_subnets.TryGetValue(subnet, out var subnetNode))
        {
            subnetNode = AddSubnet(subnet);
        }

        foreach (var camera in subnetInfo)
        {
            if (camera.Subnet != subnet)
            {
                continue;
            }

            var item = SubnetTree.CreateItem(subnetNode);
            item.Text = $"{camera.Name} - {camera.Address}";
            item.Metadata = camera.Address;
        }
    }
}
