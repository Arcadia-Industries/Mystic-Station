using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Chemistry.EntitySystems;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared.Chemistry.Reaction;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.Kitchen;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Guidebook.Controls;

/// <summary>
///     Control for embedding a reagent into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideMicrowaveRecipeEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public GuideMicrowaveRecipeEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideMicrowaveRecipeEmbed(string recipe) : this()
    {
        GenerateControl(_prototype.Index<FoodRecipePrototype>(recipe));
    }

    public GuideMicrowaveRecipeEmbed(FoodRecipePrototype recipe) : this()
    {
        GenerateControl(recipe);
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        this.Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Recipe", out var id))
        {
            Logger.Error("Recipe embed tag is missing recipe prototype argument");
            return false;
        }

        if (!_prototype.TryIndex<FoodRecipePrototype>(id, out var recipe))
        {
            Logger.Error($"Specified recipe prototype \"{id}\" is not a valid recipe prototype");
            return false;
        }

        GenerateControl(recipe);

        control = this;
        return true;
    }

    private void GenerateControl(FoodRecipePrototype recipePrototype)
    {
        var ingredientMsg = new FormattedMessage();
        var reactantsCount = recipePrototype.IngredientsReagents.Count + recipePrototype.IngredientsSolids.Count;
        var i = 0;
        foreach (var (ingredient, amount) in recipePrototype.IngredientsReagents)
        {
            ingredientMsg.AddMarkup(Loc.GetString("guidebook-food-microwave-reagent-display",
                ("name", _prototype.Index<ReagentPrototype>(ingredient).LocalizedName), ("amount", amount)));
            i++;
            if (i < reactantsCount)
                ingredientMsg.PushNewline();
        }
        foreach (var (ingredient, amount) in recipePrototype.IngredientsSolids)
        {
            ingredientMsg.AddMarkup(Loc.GetString("guidebook-food-microwave-entity-display",
                ("name", _prototype.Index<EntityPrototype>(ingredient).Name), ("amount", amount)));
            i++;
            if (i < reactantsCount)
                ingredientMsg.PushNewline();
        }
        ingredientMsg.Pop();
        IngredientsLabel.SetMessage(ingredientMsg);

        TimeLabel.Text = Loc.GetString("guidebook-food-microwave-time",
            ("time", recipePrototype.CookTime));

        var productMsg = new FormattedMessage();
        productMsg.AddMarkup(Loc.GetString("guidebook-food-microwave-entity-display",
            ("name", _prototype.Index<EntityPrototype>(recipePrototype.Result).Name), ("amount", 1)));
        productMsg.Pop();
        ProductLabel.SetMessage(productMsg);
    }
}
