using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Chemistry.EntitySystems;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.UserInterface.ControlExtensions;
using Content.Shared.Chemistry.Reaction;
using Content.Shared.Chemistry.Reagent;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Guidebook.Controls;

/// <summary>
///     Control for embedding a chemical reaction into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideReactionEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private readonly ChemistryGuideDataSystem _chemistryGuideData;

    public GuideReactionEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _chemistryGuideData = _systemManager.GetEntitySystem<ChemistryGuideDataSystem>();
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideReactionEmbed(string reaction) : this()
    {
        GenerateControl(_prototype.Index<ReactionPrototype>(reaction));
    }

    public GuideReactionEmbed(ReactionPrototype reaction) : this()
    {
        GenerateControl(reaction);
    }

    public GuideReactionEmbed(ReagentPrototype reagent) : this()
    {
        if (!_prototype.TryIndex<ReactionPrototype>(reagent.ID, out var reactionPrototype))
        {
            reactionPrototype = _prototype.EnumeratePrototypes<ReactionPrototype>()
                .FirstOrDefault(p => p.Products.ContainsKey(reagent.ID));
        }

        if (reactionPrototype != null)
        {
            GenerateControl(reactionPrototype);
        }
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        this.Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Reaction", out var id))
        {
            Logger.Error("Reaction embed tag is missing reaction prototype argument");
            return false;
        }

        if (!_prototype.TryIndex<ReactionPrototype>(id, out var reaction))
        {
            Logger.Error($"Specified reaction prototype \"{id}\" is not a valid reaction prototype");
            return false;
        }

        GenerateControl(reaction);

        control = this;
        return true;
    }

    private void GenerateControl(ReactionPrototype reactionPrototype)
    {
        var reactantMsg = new FormattedMessage();
        var reactantsCount = reactionPrototype.Reactants.Count;
        var i = 0;
        foreach (var (product, reactant) in reactionPrototype.Reactants)
        {
            reactantMsg.AddMarkup(Loc.GetString("guidebook-reaction-prototype-display",
                ("name", _prototype.Index<ReagentPrototype>(product).LocalizedName), ("ratio", reactant.Amount.ToString() + (reactionPrototype.Quantized ? "u" : ""))));
            i++;
            if (i < reactantsCount)
                reactantMsg.PushNewline();
        }
        reactantMsg.Pop();
        ReactantsLabel.SetMessage(reactantMsg);

        if (reactionPrototype.MinimumTemperature > 0.0f)
        {
            MixLabel.Text = Loc.GetString("guidebook-reaction-mix-and-heat",
                ("temperature", reactionPrototype.MinimumTemperature));
        }

        var productMsg = new FormattedMessage();
        var productCount = reactionPrototype.Products.Count;
        var u = 0;
        foreach (var (product, ratio) in reactionPrototype.Products)
        {
            productMsg.AddMarkup(Loc.GetString("guidebook-reaction-prototype-display",
                ("name", _prototype.Index<ReagentPrototype>(product).LocalizedName), ("ratio", ratio.ToString() + (reactionPrototype.Quantized ? "u" : ""))));
            u++;
            if (u < productCount)
                productMsg.PushNewline();
        }
        if (_chemistryGuideData.ReactionGuideRegistry.TryGetValue(reactionPrototype.ID, out var guideEntryRegistry))
        {
            u = guideEntryRegistry.Count;
            productMsg.PushNewline();
            foreach (var (product, amount) in guideEntryRegistry)
            {
                productMsg.AddMarkup(Loc.GetString("guidebook-reaction-prototype-display",
                    ("name", _prototype.Index<EntityPrototype>(product).Name), ("ratio", amount)));
                u++;
                if (u < productCount)
                    productMsg.PushNewline();
            }
        }
        productMsg.Pop();
        ProductsLabel.SetMessage(productMsg);
    }
}
