using Content.Client.Guidebook.Richtext;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.ContentPack;
using System.Linq;

namespace Content.Client.Guidebook;

[GenerateTypedNameReferences]
public sealed partial class GuidebookWindow : FancyWindow
{
    [Dependency] private readonly IResourceManager _resourceManager = default!;
    [Dependency] private readonly GuidebookParsingManager _parsingMan = default!;

    private Dictionary<string, GuideEntry> _entries = new();

    public GuidebookWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Tree.OnItemSelected += GuideSelectOnOnItemSelected;
    }

    private void GuideSelectOnOnItemSelected()
    {
        var entry = (GuideEntry) Tree.Selected!.Metadata!;
        EntryContainer.RemoveAllChildren();
        using var file = _resourceManager.ContentFileReadText(entry.Text);

        EntryContainer.AddChild(new Label()
        {
            StyleClasses = { "LabelHeadingBigger" },
            Text = entry.Name
        });

        var doc = new Document();
        EntryContainer.AddChild(doc);

        if (!_parsingMan.TryAddMarkup(doc, file.ReadToEnd()))
            Logger.Error($"Failed to add contents of guide document {entry.Id}.");

        EntryContainer.MaxWidth = Size.X * (2.0f / 3.0f) - 20.0f * UIScale;
    }

    public void UpdateGuides(Dictionary<string, GuideEntry> entries)
    {
        _entries = entries;
        RepopulateTree();
    }

    private void RepopulateTree()
    {
        Tree.Clear();

        HashSet<string> rootEntries = new(_entries.Keys);
        foreach (var entry in _entries.Values)
        {
            rootEntries.ExceptWith(entry.Children);
        }

        var sorted = rootEntries
            .Select(x=>_entries[x])
            .OrderBy(x => x.Priority)
            .ThenBy(x => x.Name).ToList();

        foreach (var entry in sorted)
        {
            AddEntry(entry.Id, false);
        }
    }

    private void AddEntry(string id, bool indent, Tree.Item? parent = null)
    {
        if (!_entries.TryGetValue(id, out var entry))
        {
            Logger.Error($"Missing guide entry: {id}");
            return;
        }

        var item = Tree.CreateItem(null);
        item.Metadata = entry;
        item.Text = indent ? $"â€º {entry.Name}" : entry.Name;

        foreach (var child in entry.Children)
        {
            AddEntry(child, true, item);
        }
    }
}
