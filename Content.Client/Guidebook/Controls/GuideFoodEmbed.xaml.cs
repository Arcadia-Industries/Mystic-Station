using System.Diagnostics.CodeAnalysis;
using System.Linq;
using Content.Client.Chemistry.EntitySystems;
using Content.Shared.Chemistry.Reaction;
using Content.Shared.Kitchen;
using Content.Client.Guidebook.Richtext;
using Content.Client.Message;
using Content.Client.UserInterface.ControlExtensions;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Client.ResourceManagement;
using Robust.Shared.Utility;
using System.Numerics;

namespace Content.Client.Guidebook.Controls;

/// <summary>
///     Control for embedding food into a guidebook.
/// </summary>
[UsedImplicitly, GenerateTypedNameReferences]
public sealed partial class GuideFoodEmbed : BoxContainer, IDocumentTag, ISearchableControl
{
    [Dependency] private readonly IEntitySystemManager _systemManager = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IResourceCache _resources = default!;

    private readonly ChemistryGuideDataSystem _chemistryGuideData;

    public GuideFoodEmbed()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _chemistryGuideData = _systemManager.GetEntitySystem<ChemistryGuideDataSystem>();
        MouseFilter = MouseFilterMode.Stop;
    }

    public GuideFoodEmbed(string food) : this()
    {
        GenerateControl(_prototype.Index<EntityPrototype>(food));
    }

    public GuideFoodEmbed(EntityPrototype food) : this()
    {
        GenerateControl(food);
    }

    public bool CheckMatchesSearch(string query)
    {
        return this.ChildrenContainText(query);
    }

    public void SetHiddenState(bool state, string query)
    {
        this.Visible = CheckMatchesSearch(query) ? state : !state;
    }

    public bool TryParseTag(Dictionary<string, string> args, [NotNullWhen(true)] out Control? control)
    {
        control = null;
        if (!args.TryGetValue("Entity", out var id))
        {
            Logger.Error("Entity embed tag is missing entity prototype argument");
            return false;
        }

        if (!_prototype.TryIndex<EntityPrototype>(id, out var food))
        {
            Logger.Error($"Specified entity prototype \"{id}\" is not a valid entity prototype");
            return false;
        }

        GenerateControl(food);

        control = this;
        return true;
    }

    private void GenerateControl(EntityPrototype food)
    {
        NameBackground.PanelOverride = new StyleBoxFlat
        {
            BackgroundColor = Color.White
        };

        var textColor = Color.Black;

        FoodName.SetMarkup(Loc.GetString("guidebook-food-name", ("name", food.Name), ("color", textColor)));
        FoodView.Textures = SpriteComponent.GetPrototypeTextures(food, _resources).Select(o => o.Default).ToList();
        FoodView.TextureScale = new Vector2(2);
        FoodDescription.SetMessage(food.Description);
        #region Recipe
        var firstRecipe = true;

        foreach ((var reaction, var product) in _chemistryGuideData.ReactionGuideRegistry.Where(x => x.Value.ContainsKey(food.ID)))
        {
            if (firstRecipe) { firstRecipe = false; }
            else
            {
                var recipeSeperator = new RichTextLabel();
                recipeSeperator.SetMessage(Loc.GetString("guidebook-food-recipes-separator"));
                recipeSeperator.HorizontalAlignment = Control.HAlignment.Center;
                recipeSeperator.Margin = new Thickness(10);
                RecipesContainer.AddChild(recipeSeperator);
            }
            RecipesContainer.AddChild(new GuideReactionEmbed(reaction));
        }

        foreach (var recipe in _prototype.EnumeratePrototypes<FoodRecipePrototype>().Where(x => x.Result == food.ID))
        {
            if (firstRecipe) { firstRecipe = false; }
            else
            {
                var recipeSeperator = new RichTextLabel();
                recipeSeperator.SetMessage(Loc.GetString("guidebook-food-recipes-separator"));
                recipeSeperator.HorizontalAlignment = Control.HAlignment.Center;
                recipeSeperator.Margin = new Thickness(10);
                RecipesContainer.AddChild(recipeSeperator);
            }
            RecipesContainer.AddChild(new GuideMicrowaveRecipeEmbed(recipe));
        }

        if (firstRecipe)
        {
            RecipesCollapsible.Visible = false;
        }
        #endregion

        #region Uses
        firstRecipe = true;
        foreach (var recipe in _prototype.EnumeratePrototypes<FoodRecipePrototype>().Where(x => x.IngredientsSolids.ContainsKey(food.ID)))
        {
            if (firstRecipe) { firstRecipe = false; }
            else
            {
                var recipeSeperator = new RichTextLabel();
                recipeSeperator.SetMessage(Loc.GetString("guidebook-food-recipes-separator"));
                recipeSeperator.HorizontalAlignment = Control.HAlignment.Center;
                recipeSeperator.Margin = new Thickness(10);
                UsesContainer.AddChild(recipeSeperator); 
            }
            UsesContainer.AddChild(new GuideMicrowaveRecipeEmbed(recipe));
        }

        if (firstRecipe) { UsesCollapsible.Visible = false; }
        #endregion
    }
}
