using Content.Client.Computer;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Salvage;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;

namespace Content.Client.Salvage.UI;

[GenerateTypedNameReferences]
public sealed partial class SalvageExpeditionWindow : FancyWindow,
    IComputerWindow<EmergencyConsoleBoundUserInterfaceState>
{
    private IGameTiming _timing;
    private IPrototypeManager _prototype;

    public event Action<ushort>? ClaimMission;
    private bool _claimed;
    private TimeSpan _nextOffer;

    public SalvageExpeditionWindow()
    {
        RobustXamlLoader.Load(this);
        _timing = IoCManager.Resolve<IGameTiming>();
        _prototype = IoCManager.Resolve<IPrototypeManager>();
    }

    public void UpdateState(SalvageExpeditionConsoleState state)
    {
        _claimed = state.Claimed;
        _nextOffer = state.NextOffer;
        Container.DisposeAllChildren();

        for (var i = 0; i < state.Missions.Count; i++)
        {
            // TODO: Make this XAML
            var mission = state.Missions[i];
            var config = _prototype.Index<SalvageExpeditionPrototype>(mission.Config);

            // Mission
            var missionStripe = new StripeBack()
            {
                Margin = new Thickness(0f, -5f, 0f, 0f)
            };
            missionStripe.AddChild(new Label()
            {
                Text = config.ID,
                HorizontalAlignment = HAlignment.Center,
                Margin = new Thickness(0f, 5f, 0f, 5f),
            });

            var lBox = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Vertical
            };

            lBox.AddChild(new Label()
            {
                Text = $"Duration:"
            });

            lBox.AddChild(new Label()
            {
                Text = mission.Duration.ToString(),
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Environment
            lBox.AddChild(new Label()
            {
                Text = $"Environment:"
            });

            lBox.AddChild(new Label()
            {
                Text = config.Biome,
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Modifiers
            lBox.AddChild(new Label()
            {
                Text = "Modifiers:"
            });

            lBox.AddChild(new Label()
            {
                Text = "A",
                FontColorOverride = StyleNano.NanoGold,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // Claim
            var claimButton = new Button()
            {
                HorizontalExpand = true,
                Pressed = state.ActiveMission == mission.Index,
                ToggleMode = true,
                Disabled = state.Claimed,
            };

            claimButton.Label.Margin = new Thickness(0f, 5f);

            claimButton.OnPressed += args =>
            {
                ClaimMission?.Invoke(mission.Index);
            };

            if (state.ActiveMission == mission.Index)
            {
                claimButton.Text = "Claimed";
                claimButton.AddStyleClass(StyleBase.ButtonCaution);
            }
            else
            {
                claimButton.Text = "Claim";
            }

            // Rewards
            lBox.AddChild(new Label()
            {
                Text = $"Rewards:"
            });

            lBox.AddChild(new Label()
            {
                Text = config.Biome,
                FontColorOverride = StyleNano.GoodGreenFore,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            lBox.AddChild(new Label()
            {
                Text = $"Secondary Rewards:"
            });

            lBox.AddChild(new Label()
            {
                Text = config.Biome,
                FontColorOverride = StyleNano.ConcerningOrangeFore,
                HorizontalAlignment = HAlignment.Left,
                Margin = new Thickness(0f, 0f, 0f, 5f),
            });

            // TODO: Fix this copypaste bullshit

            var box = new PanelContainer()
            {
                PanelOverride = new StyleBoxFlat(new Color(30, 30, 34)),
                HorizontalExpand = true,
                Margin = new Thickness(5f, 0f),
                Children =
                {
                    new BoxContainer()
                    {
                        Orientation = BoxContainer.LayoutOrientation.Vertical,
                        Children =
                        {
                            missionStripe,
                            lBox,
                            claimButton,
                        },
                        Margin = new Thickness(5f, 5f)
                    }
                }
            };

            LayoutContainer.SetAnchorPreset(box, LayoutContainer.LayoutPreset.Wide);

            Container.AddChild(box);
        }
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_claimed)
        {
            NextOfferBar.Value = 0f;
            NextOfferText.Text = "N/A";
            return;
        }

        var remaining = _nextOffer - _timing.CurTime;

        if (remaining < TimeSpan.Zero)
        {
            NextOfferBar.Value = 1f;
            NextOfferText.Text = "00:00";
        }
        else
        {
            NextOfferBar.Value = 1f - (float) (remaining / SharedSalvageSystem.MissionCooldown);
            NextOfferText.Text = $"{remaining.Minutes:00}:{remaining.Seconds:00}";
        }
    }
}
