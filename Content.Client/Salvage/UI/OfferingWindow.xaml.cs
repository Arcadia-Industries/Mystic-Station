using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Salvage.UI;

/// <summary>
/// Generic window for offering multiple selections with a timer.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class OfferingWindow : FancyWindow,
    IComputerWindow<EmergencyConsoleBoundUserInterfaceState>
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action<ushort>? ClaimOption;

    public bool Claimed;
    public TimeSpan NextOffer;
    public TimeSpan Cooldown;

    public OfferingWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void AddOption(OfferingWindowOption option)
    {
        Container.AddChild(option);
        option.
    }

    public void ClearOptions()
    {
        Container.DisposeAllChildren();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (Claimed)
        {
            NextOfferBar.Value = 0f;
            NextOfferText.Text = "00:00";
            return;
        }

        var remaining = NextOffer - _timing.CurTime;

        if (remaining < TimeSpan.Zero)
        {
            NextOfferBar.Value = 1f;
            NextOfferText.Text = "00:00";
        }
        else
        {
            NextOfferBar.Value = 1f - (float) (remaining / Cooldown);
            NextOfferText.Text = $"{remaining.Minutes:00}:{remaining.Seconds:00}";
        }
    }
}
