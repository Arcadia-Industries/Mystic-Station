using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Clothing.UI;

[GenerateTypedNameReferences]
public sealed partial class ChameleonMenu : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    private readonly List<string> _possibleIds;

    public event Action<string>? OnIdSelected;

    public ChameleonMenu(List<string> possibleIds)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Search.OnTextChanged += OnSearchEntered;

        _possibleIds = possibleIds;
        FillGrid();
    }

    private void OnSearchEntered(LineEdit.LineEditEventArgs obj)
    {
        FillGrid(obj.Text);
    }

    private void FillGrid(string searchFilter = "")
    {
        ClearGrid();

        var group = new ButtonGroup();
        var spriteSys = EntitySystem.Get<SpriteSystem>();
        var searchFilterLow = searchFilter.ToLowerInvariant();

        foreach (var id in _possibleIds)
        {
            if (!_prototypeManager.TryIndex(id, out EntityPrototype? proto))
                continue;

            var lowId = id.ToLowerInvariant();
            var lowName = proto.Name.ToLowerInvariant();
            if (!lowId.Contains(searchFilterLow) && !lowName.Contains(searchFilter))
                continue;

            var button = new Button()
            {
                MinSize = new Vector2(48, 48),
                HorizontalExpand = true,
                Group = group,
                StyleClasses = {StyleBase.ButtonSquare},
                ToggleMode = true
            };
            button.OnPressed += _ => OnIdSelected?.Invoke(id);
            Grid.AddChild(button);

            var texture = spriteSys.GetPrototypeIcon(proto);
            button.AddChild(new TextureRect()
            {
                Stretch = TextureRect.StretchMode.KeepAspectCentered,
                Texture = texture.Default
            });
        }
    }

    private void ClearGrid()
    {
        Grid.RemoveAllChildren();
    }
}
