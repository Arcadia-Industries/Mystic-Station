using Content.Client.Computer;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Gateway.UI;

[GenerateTypedNameReferences]
public sealed partial class GatewayWindow : FancyWindow,
    IComputerWindow<EmergencyConsoleBoundUserInterfaceState>
{
    private readonly IGameTiming _timing;

    public event Action<EntityUid>? OpenPortal;
    private EntityUid? _current;
    private TimeSpan _nextClose;

    public GatewayWindow()
    {
        RobustXamlLoader.Load(this);
        _timing = IoCManager.Resolve<IGameTiming>();
    }

    public void UpdateState(GatewayBoundUserInterfaceState state)
    {
        _current = state.Current;
        _nextClose = state.NextClose;

        Container.DisposeAllChildren();

        foreach (var dest in state.Destinations)
        {
            var uid = dest.Item0;
            var name = dest.Item1;
            var nextReady = dest.Item2;
            var busy = dest.Item3;

            var box = new BoxContainer()
            {
                Orientation = BoxContainer.LayoutOrientation.Horizontal
            };

            box.AddChild(new Label()
            {
                Text = name,
                Margin = new Thickness(0f, 5f, 0f, 0f),
            });

            var now = _timing.CurTime;
            if (now < nextReady)
            {
                box.AddChild(new Label()
                {
                    Text = Loc.GetString("gateway-window-ready-in", ("time", nextReady - now))
                });
            }

            var openButton = new Button()
            {
                Text = Loc.GetString("gateway-window-open-portal"),
                HorizontalAlignment = HAlignment.Right,
                Pressed = uid == state.Current,
                ToggleMode = true,
                Disabled = state.Current != null || busy,
            };

            openButton.Label.Margin = new Thickness(0f, 5f);

            openButton.OnPressed += args =>
            {
                OpenPortal?.Invoke(uid);
            };

            if (uid == state.Current)
            {
                openButton.AddStyleClass(StyleBase.ButtonCaution);
            }

            box.AddChild(openButton);
            Container.AddChild(box);
        }
    }
}
