using Content.Client.Storage.UI;
using Content.Shared.Storage;
using Robust.Client.GameObjects;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.ViewVariables;
using static Content.Shared.Storage.SharedStorageComponent;
using System;
using System.Collections.Generic;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Shared.Input;
using Content.Client.Items.Managers;
using Content.Client.UserInterface.Controls;


namespace Content.Client.Storage
{
    public sealed class StorageBoundUserInterface : BoundUserInterface
    {
        [ViewVariables] private StorageWindow? _window;

        public SharedStorageComponent? StorageComp { get; private set; }

        public StorageBoundUserInterface(ClientUserInterfaceComponent owner, object uiKey) : base(owner, uiKey)
        {
            // on startup

            // SendMessage(new InventorySyncRequestMessage());
        }

        protected override void Open()
        {
            base.Open();
            Logger.Debug("ran open interface");
            var entMan = IoCManager.Resolve<IEntityManager>();

            // if (!entMan.TryGetComponent(Owner.Owner, out SharedStorageComponent? storageComp))
            // {
            //     return;
            // }

            // if (storageComp == null)
            // {
            //     Logger.Debug("This is null");
            // }

            // StorageComp = storageComp;

            _window = new StorageWindow(this) {Title = entMan.GetComponent<MetaDataComponent>(Owner.Owner).EntityName};
            // _window.Populate(VendingMachine.Inventory);

            _window.EntityList.GenerateItem += _window.GenerateButton;
            _window.EntityList.ItemPressed += InteractWithItem;

            _window.OnClose += Close;
            _window.OpenCentered();
        }

        public void InteractWithItem(BaseButton.ButtonEventArgs args, EntityUid entity)
        {
            if (args.Event.Function == EngineKeyFunctions.UIClick)
            {
                SendMessage(new StorageInteractItemMessage(entity));
            }
            else if (IoCManager.Resolve<IEntityManager>().EntityExists(entity))
            {
                IoCManager.Resolve<IItemSlotManager>().OnButtonPressed(args.Event, entity);
            }
        }

        protected override void UpdateState(BoundUserInterfaceState state)
        {
            base.UpdateState(state);

            if (_window == null || state is not StorageBoundUserInterfaceState cast)
                return;

            _window?.BuildEntityList(cast);
        }


        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!disposing)
                return;

            // _window.EntityList.GenerateItem -= GenerateButton;
            // _window.EntityList.ItemPressed -= Interact;

            _window?.Dispose();
        }
    }
}
