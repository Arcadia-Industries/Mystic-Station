using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Medical.SuitSensor;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Medical.CrewMonitoring
{
    [GenerateTypedNameReferences]
    public sealed partial class CrewMonitoringWindow : FancyWindow
    {
        private List<Control> _rowsContent = new();
        private readonly IEntityManager _entManager;
        private readonly IPrototypeManager _prototypeManager;
        private readonly SpriteSystem _spriteSystem;

        private EntityUid? _stationUid;
        private NetEntity? _trackedEntity;
        private Texture? _blipTexture;

        public CrewMonitoringWindow(string stationName, EntityUid? mapUid)
        {
            RobustXamlLoader.Load(this);
            _entManager = IoCManager.Resolve<IEntityManager>();
            _prototypeManager = IoCManager.Resolve<IPrototypeManager>();
            _spriteSystem = _entManager.System<SpriteSystem>();
            _stationUid = mapUid;
            _blipTexture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));

            if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
            {
                NavMap.MapUid = xform.GridUid;
            }
            else
            {
                NavMap.Visible = false;
                SetSize = new Vector2(775, 400);
                MinSize = SetSize;
            }

            StationName.AddStyleClass("LabelBig");
            StationName.Text = stationName;

            NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;
            NavMap.WallColor = new Color(250, 146, 255);
            NavMap.TileColor = new(71, 42, 72);
        }

        public void ShowSensors(List<SuitSensorStatus> stSensors, EntityUid monitor, EntityCoordinates? monitorCoords, bool snap, float precision)
        {
            ClearAllSensors();

            var monitorCoordsInStationSpace = _stationUid != null ? monitorCoords?.WithEntityId(_stationUid.Value, _entManager).Position : null;

            if (stSensors.Count == 0)
            {
                NoServerLabel.Visible = true;
                return;
            }

            NoServerLabel.Visible = false;

            var orderedSensors = stSensors.OrderBy(n => n.Name).OrderBy(j => j.Job).OrderBy(d => d.JobDepartment);
            var currentDepartment = string.Empty;

            NavMap.LocalizedNames.Clear();

            // add a row for each sensor
            for (int i = 0; i < orderedSensors.Count(); i++)
            {
                var sensor = orderedSensors.ElementAt(i);
                var coordinates = _entManager.GetCoordinates(sensor.Coordinates);

                NavMap.LocalizedNames.Add(sensor.SuitSensorUid, sensor.Name);

                if (currentDepartment != sensor.JobDepartment)
                {
                    if (i > 0)
                    {
                        var spacer = new Control()
                        {
                            SetHeight = 20,
                        };

                        SensorsTable.AddChild(spacer);
                        _rowsContent.Add(spacer);
                    }

                    currentDepartment = sensor.JobDepartment;

                    var deparmentLabel = new RichTextLabel()
                    {
                        //Text = sensor.JobDepartment,
                        //HorizontalAlignment = HAlignment.Center,
                        Margin = new Thickness(10, 0),
                        HorizontalExpand = true,
                    };
                    deparmentLabel.SetMessage(sensor.JobDepartment);
                    deparmentLabel.StyleClasses.Add(StyleNano.StyleClassTooltipActionDescription);

                    SensorsTable.AddChild(deparmentLabel);
                    _rowsContent.Add(deparmentLabel);
                }

                // add button with username
                var sensorButton = new CrewMonitoringButton()
                {
                    Coordinates = coordinates,
                    Margin = new Thickness(5f, 5f),
                    Disabled = (coordinates == null),
                    HorizontalExpand = true,
                };

                if (sensor.SuitSensorUid == _trackedEntity)
                    sensorButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

                SensorsTable.AddChild(sensorButton);
                _rowsContent.Add(sensorButton);

                var mainContainer = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Horizontal,
                    HorizontalExpand = true,
                };

                sensorButton.AddChild(mainContainer);

                var specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "alive");

                if (!sensor.IsAlive)
                    specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "dead");

                else if (sensor.TotalDamage != null)
                {
                    var index = MathF.Round(4f * (sensor.TotalDamage.Value / 100f));

                    switch (index)
                    {
                        case 0: specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "health0"); break;
                        case 1: specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "health1"); break;
                        case 2: specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "health2"); break;
                        case 3: specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "health3"); break;
                        case 4: specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "health4"); break;
                        default: specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "critical"); break;
                    }
                }

                var statusIcon = new AnimatedTextureRect();
                statusIcon.SetFromSpriteSpecifier(specifier);
                statusIcon.HorizontalAlignment = HAlignment.Center;
                statusIcon.VerticalAlignment = VAlignment.Center;
                statusIcon.Margin = new Thickness(0, 1, 5, 0);
                statusIcon.DisplayRect.TextureScale = new Vector2(2f, 2f);

                mainContainer.AddChild(statusIcon);

                var nameLabel = new Label()
                {
                    Text = sensor.Name,
                    MinWidth = 180,
                };

                mainContainer.AddChild(nameLabel);

                var jobContainer = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Horizontal,
                    MinWidth = 180,
                };

                if (_prototypeManager.TryIndex<StatusIconPrototype>(sensor.JobIcon, out var proto))
                {
                    var jobIcon = new TextureRect()
                    {
                        TextureScale = new Vector2(2f, 2f),
                        Stretch = TextureRect.StretchMode.KeepCentered,
                        Texture = _spriteSystem.Frame0(proto.Icon),
                        Margin = new Thickness(0, 0, 5, 0),
                    };

                    jobContainer.AddChild(jobIcon);
                }

                var jobLabel = new Label()
                {
                    Text = sensor.Job,
                };

                jobContainer.AddChild(jobLabel);

                mainContainer.AddChild(jobContainer);

                // add users positions
                // format: (x, y)
                var box = GetPositionBox(sensor, monitorCoordsInStationSpace ?? Vector2.Zero, snap, precision);

                if (coordinates != null && NavMap.Visible && _blipTexture != null)
                {
                    NavMap.TrackedEntities.TryAdd(coordinates.Value,
                        (sensor.SuitSensorUid,
                        (_trackedEntity == null || sensor.SuitSensorUid == _trackedEntity) ? Color.LimeGreen : Color.LimeGreen * Color.DimGray,
                        _blipTexture,
                        sensor.SuitSensorUid == _trackedEntity));

                    NavMap.Focus = _trackedEntity;

                    sensorButton.OnButtonUp += args =>
                    {
                        if (_trackedEntity == sensor.SuitSensorUid)
                        {
                            _trackedEntity = null;
                            NavMap.Focus = null;

                            sensorButton.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

                            return;
                        }

                        NavMap.CenterToCoordinates(coordinates.Value);

                        sensorButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

                        _trackedEntity = sensor.SuitSensorUid;
                        NavMap.Focus = _trackedEntity;
                    };
                }
            }

            // Show monitor point
            if (monitorCoords != null && _blipTexture != null)
            {
                NavMap.TrackedEntities[monitorCoords.Value] = (_entManager.GetNetEntity(monitor), Color.Cyan, _blipTexture, true);
            }
        }

        private BoxContainer GetPositionBox(SuitSensorStatus sensor, Vector2 monitorCoordsInStationSpace, bool snap, float precision)
        {
            EntityCoordinates? coordinates = _entManager.GetCoordinates(sensor.Coordinates);
            var box = new BoxContainer() { Orientation = LayoutOrientation.Horizontal };

            if (coordinates == null || _stationUid == null)
            {
                box.AddChild(new Label() { Text = Loc.GetString("crew-monitoring-user-interface-no-info") });
            }
            else
            {
                var local = coordinates.Value.WithEntityId(_stationUid.Value, _entManager).Position;

                var displayPos = local.Floored();
                Label label = new Label() { Text = displayPos.ToString() };

                box.AddChild(label);
            }

            return box;
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {

        }

        private void ClearAllSensors()
        {
            foreach (var child in _rowsContent)
            {
                SensorsTable.RemoveChild(child);
            }

            _rowsContent.Clear();
            NavMap.TrackedCoordinates.Clear();
        }

        private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
        {
            _trackedEntity = netEntity;
        }
    }

    public sealed class CrewMonitoringButton : Button
    {
        public int IndexInTable;
        public EntityUid? SuitSensorUid;
        public EntityCoordinates? Coordinates;
    }
}
