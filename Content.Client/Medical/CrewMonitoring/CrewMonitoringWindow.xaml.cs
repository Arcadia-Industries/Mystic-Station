using System.Linq;
using System.Numerics;
using Content.Client.Pinpointer.UI;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Medical.SuitSensor;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Medical.CrewMonitoring
{
    [GenerateTypedNameReferences]
    public sealed partial class CrewMonitoringWindow : FancyWindow
    {
        private List<Control> _rowsContent = new();
        private readonly IEntityManager _entManager;
        private readonly IPrototypeManager _prototypeManager;
        private readonly SpriteSystem _spriteSystem;

        private NetEntity? _trackedEntity;
        private Texture? _blipTexture;

        public CrewMonitoringWindow(string stationName, EntityUid? mapUid)
        {
            RobustXamlLoader.Load(this);

            _entManager = IoCManager.Resolve<IEntityManager>();
            _prototypeManager = IoCManager.Resolve<IPrototypeManager>();
            _spriteSystem = _entManager.System<SpriteSystem>();

            _blipTexture = _spriteSystem.Frame0(new SpriteSpecifier.Texture(new ResPath("/Textures/Interface/NavMap/beveled_circle.png")));

            if (_entManager.TryGetComponent<TransformComponent>(mapUid, out var xform))
                NavMap.MapUid = xform.GridUid;

            else
                NavMap.Visible = false;

            StationName.AddStyleClass("LabelBig");
            StationName.Text = stationName;

            NavMap.TrackedEntitySelectedAction += SetTrackedEntityFromNavMap;
        }

        public void ShowSensors(List<SuitSensorStatus> sensors, EntityUid monitor, EntityCoordinates? monitorCoords)
        {
            ClearOutDatedData();

            // No server label
            if (sensors.Count == 0)
            {
                NoServerLabel.Visible = true;
                return;
            }

            NoServerLabel.Visible = false;

            // Order sensor data
            var orderedSensors = sensors.OrderBy(n => n.Name).OrderBy(j => j.Job);
            var departments = sensors.SelectMany(d => d.JobDepartments).Distinct().OrderBy(n => n);

            // Create department labels
            foreach (var department in departments)
            {
                var departmentSensors = orderedSensors.Where(d => d.JobDepartments.Contains(department));

                if (departmentSensors == null || !departmentSensors.Any())
                    continue;

                if (SensorsTable.ChildCount > 0)
                {
                    var spacer = new Control()
                    {
                        SetHeight = 20,
                    };

                    SensorsTable.AddChild(spacer);
                    _rowsContent.Add(spacer);
                }

                var deparmentLabel = new RichTextLabel()
                {
                    Margin = new Thickness(10, 0),
                    HorizontalExpand = true,
                };

                deparmentLabel.SetMessage(department);
                deparmentLabel.StyleClasses.Add(StyleNano.StyleClassTooltipActionDescription);

                SensorsTable.AddChild(deparmentLabel);
                _rowsContent.Add(deparmentLabel);

                // Populate departments
                foreach (var sensor in departmentSensors)
                {
                    var coordinates = _entManager.GetCoordinates(sensor.Coordinates);

                    // Add a button that will hold a username and other details
                    NavMap.LocalizedNames.TryAdd(sensor.SuitSensorUid, sensor.Name + ", " + sensor.Job);

                    var sensorButton = new CrewMonitoringButton()
                    {
                        SuitSensorUid = sensor.SuitSensorUid,
                        Coordinates = coordinates,
                        Disabled = (coordinates == null),
                        HorizontalExpand = true,
                    };

                    if (sensor.SuitSensorUid == _trackedEntity)
                        sensorButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);

                    SensorsTable.AddChild(sensorButton);
                    _rowsContent.Add(sensorButton);

                    // Primary container to hold the button UI elements
                    var mainContainer = new BoxContainer()
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        HorizontalExpand = true,
                    };

                    sensorButton.AddChild(mainContainer);

                    // Specify texture for the user status icon
                    var specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "alive");

                    if (!sensor.IsAlive)
                    {
                        specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "dead");
                    }

                    else if (sensor.TotalDamage != null)
                    {
                        var index = MathF.Round(4f * (sensor.TotalDamage.Value / 100f));

                        if (index >= 5)
                            specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "critical");

                        else
                            specifier = new SpriteSpecifier.Rsi(new ResPath("Interface/Alerts/human_crew_monitoring.rsi"), "health" + index);
                    }

                    // Status icon
                    var statusIcon = new AnimatedTextureRect
                    {
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        Margin = new Thickness(0, 1, 3, 0),
                    };

                    statusIcon.SetFromSpriteSpecifier(specifier);
                    statusIcon.DisplayRect.TextureScale = new Vector2(2f, 2f);

                    mainContainer.AddChild(statusIcon);

                    // User name
                    var nameLabel = new Label()
                    {
                        Text = sensor.Name,
                        HorizontalExpand = true,
                        ClipText = true,
                    };

                    mainContainer.AddChild(nameLabel);

                    // User job
                    var jobContainer = new BoxContainer()
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        HorizontalExpand = true,
                    };

                    // Job icon
                    if (_prototypeManager.TryIndex<StatusIconPrototype>(sensor.JobIcon, out var proto))
                    {
                        var jobIcon = new TextureRect()
                        {
                            TextureScale = new Vector2(2f, 2f),
                            Stretch = TextureRect.StretchMode.KeepCentered,
                            Texture = _spriteSystem.Frame0(proto.Icon),
                            Margin = new Thickness(5, 0, 5, 0),
                        };

                        jobContainer.AddChild(jobIcon);
                    }

                    // Job name
                    var jobLabel = new Label()
                    {
                        Text = sensor.Job,
                        HorizontalExpand = true,
                        ClipText = true,
                    };

                    jobContainer.AddChild(jobLabel);
                    mainContainer.AddChild(jobContainer);

                    // Add user coordinates to the navmap
                    if (coordinates != null && NavMap.Visible && _blipTexture != null)
                    {
                        NavMap.TrackedEntities.TryAdd(sensor.SuitSensorUid,
                            new NavMapBlip
                            (coordinates.Value,
                            _blipTexture,
                            (_trackedEntity == null || sensor.SuitSensorUid == _trackedEntity) ? Color.LimeGreen : Color.LimeGreen * Color.DimGray,
                            sensor.SuitSensorUid == _trackedEntity));

                        NavMap.Focus = _trackedEntity;

                        // On button up
                        sensorButton.OnButtonUp += args =>
                        {
                            if (_trackedEntity == sensor.SuitSensorUid)
                            {
                                _trackedEntity = null;
                                NavMap.Focus = null;

                                sensorButton.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

                                foreach ((var netEntity, var blip) in NavMap.TrackedEntities)
                                    NavMap.TrackedEntities[netEntity] = new NavMapBlip(blip.Coordinates, blip.Texture, Color.LimeGreen, false);

                                return;
                            }

                            NavMap.CenterToCoordinates(coordinates.Value);

                            var oldTrackedEntity = _trackedEntity;

                            _trackedEntity = sensor.SuitSensorUid;
                            NavMap.Focus = _trackedEntity;

                            foreach (var sensor in SensorsTable.Children)
                            {
                                if (sensor is not CrewMonitoringButton)
                                    continue;

                                var castSensor = (CrewMonitoringButton) sensor;

                                if (castSensor?.Coordinates == null)
                                    continue;

                                if (castSensor.SuitSensorUid == oldTrackedEntity)
                                    castSensor.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

                                if (NavMap.TrackedEntities.TryGetValue(castSensor.SuitSensorUid, out var data))
                                {
                                    data = new NavMapBlip
                                        (data.Coordinates,
                                        data.Texture,
                                        (_trackedEntity == null || castSensor.SuitSensorUid == _trackedEntity) ? Color.LimeGreen : Color.LimeGreen * Color.DimGray,
                                        castSensor.SuitSensorUid == _trackedEntity);

                                    NavMap.TrackedEntities[castSensor.SuitSensorUid] = data;
                                }
                            }

                            sensorButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
                        };
                    }
                }
            }

            // Show monitor on nav map
            if (monitorCoords != null && _blipTexture != null)
            {
                NavMap.TrackedEntities[_entManager.GetNetEntity(monitor)] = new NavMapBlip(monitorCoords.Value, _blipTexture, Color.Cyan, true, false);
            }
        }

        private void ClearOutDatedData()
        {
            SensorsTable.RemoveAllChildren();
            _rowsContent.Clear();
            NavMap.TrackedCoordinates.Clear();
            NavMap.TrackedEntities.Clear();
            NavMap.LocalizedNames.Clear();
        }

        private void SetTrackedEntityFromNavMap(NetEntity? netEntity)
        {
            var oldTrackedEntity = _trackedEntity;

            _trackedEntity = netEntity;
            NavMap.Focus = _trackedEntity;

            foreach (var sensor in SensorsTable.Children)
            {
                if (sensor is not CrewMonitoringButton)
                    continue;

                var castSensor = (CrewMonitoringButton) sensor;

                if (castSensor?.Coordinates == null)
                    continue;

                if (castSensor.SuitSensorUid == oldTrackedEntity)
                    castSensor.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);

                if (NavMap.TrackedEntities.TryGetValue(castSensor.SuitSensorUid, out var data))
                {
                    data = new NavMapBlip
                        (data.Coordinates,
                        data.Texture,
                        (_trackedEntity == null || castSensor.SuitSensorUid == _trackedEntity) ? Color.LimeGreen : Color.LimeGreen * Color.DimGray,
                        castSensor.SuitSensorUid == _trackedEntity);

                    NavMap.TrackedEntities[castSensor.SuitSensorUid] = data;
                }
            }
        }
    }

    public sealed class CrewMonitoringButton : Button
    {
        public int IndexInTable;
        public NetEntity SuitSensorUid;
        public EntityCoordinates? Coordinates;
    }
}
