using Content.Client.Info.PlaytimeStats;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.UserInterface.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Info.PlaytimeStats;

[GenerateTypedNameReferences]
public sealed partial class PlaytimeStatsWindow : FancyWindow
{
    [Dependency] private readonly JobRequirementsManager _jobRequirementsManager = default!;

    public PlaytimeStatsWindow(string overallPlaytime, string firstTimePlayed)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        PopulatePlaytimeData();
    }

    public void PopulatePlaytimeData()
    {
        try
        {
            // Fetch overall playtime
            var overallPlaytime = _jobRequirementsManager.FetchOverallPlaytime();
            OverallPlaytimeLabel.Text = $"Overall Playtime: {overallPlaytime}";

            // Fetch playtime by roles
            var rolePlaytimes = _jobRequirementsManager.FetchPlaytimeByRoles();

            // Clear any existing data from your roles list/table
            RolesPlaytimeList.RemoveAllChildren();

            // Populate the roles list/table
            foreach (var rolePlaytime in rolePlaytimes)
            {
                var role = rolePlaytime.Key;
                var playtime = rolePlaytime.Value;
                AddRolePlaytimeEntryToTable(role, playtime.ToString());
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., show an error message in the GUI)
            //ShowErrorMessage(ex.Message);
        }
    }
    public void AddRolePlaytimeEntryToTable(string role, string playtimeString)
    {
        // Parse the playtime string into a TimeSpan
        if (TimeSpan.TryParse(playtimeString, out var playtime))
        {
            // Convert the TimeSpan to hours:minutes format
            var formattedPlaytime = ConvertTimeSpanToHoursMinutes(playtime);

            // Create and add the PlaytimeStatsEntry
            var entry = new PlaytimeStatsEntry(role, formattedPlaytime);
            RolesPlaytimeList.AddChild(entry);
        }
        else
        {
            // Handle any parsing errors (e.g., log an error or show a message)
        }
    }

    public static string ConvertTimeSpanToHoursMinutes(TimeSpan timeSpan)
    {
        // Extract whole hours
        int hours = (int)timeSpan.TotalHours;

        // Extract remaining minutes
        int minutes = timeSpan.Minutes;

        return $"{hours:D2}:{minutes:D2}";
    }


}
