


using System.Runtime.CompilerServices;
using System.Text;
using Content.Client.Message;
using Content.Shared.Botany.PlantAnalyzer;
using Content.Shared.IdentityManagement;
using Content.Shared.Temperature;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Plant_Analyzer.UI;

[GenerateTypedNameReferences]
public sealed partial class PlantAnalyzerWindow : DefaultWindow
{
    public PlantAnalyzerWindow()
    {
        RobustXamlLoader.Load(this);
      //  IoCManager.InjectDependencies(this);
    }


    public void UpdateState(PlantAnalyzerScannedSeedPlantInformation msg)
    {
        string entityName = "Unknown";
        string plantName= "Unknown";
        var text = new StringBuilder();
        var entities = IoCManager.Resolve<IEntityManager>();

        if (msg.TargetEntity != null &&
            entities.TryGetComponent<MetaDataComponent>(msg.TargetEntity.Value, out var metaData))
            plantName = Identity.Name(msg.TargetEntity.Value, entities);

        PlantName.Text = Loc.GetString(("plant-analyzer-window-label-name-scanned-plant"), ("plantname",plantName));

        PlantHP.SetMarkup($"\n{Loc.GetString($"plant-analyzer-plant-endurance-text", ("seedEndurance", msg.seedEndurance))}");
        text.Append($"{Loc.GetString($"plant-analyzer-plant-yield-text", ("seedYield", msg.seedYield))}");
        text.Append($"\n{Loc.GetString($"plant-analyzer-plant-potency-text", ("seedPotency", msg.seedPotency))}");
        text.Append($"\n{Loc.GetString($"plant-analyzer-plant-harvest-text", ("seedHarvest", msg.seedHarvestType))}\n");
        Diagnostics.Text = text.ToString();

        Chemistry.SetMarkup($"{Loc.GetString($"plant-analyzer-plant-chemistry-text", ("seedChemistry", msg.seedChem))}");
        var seedMinC= Math.Round(TemperatureHelpers.KelvinToCelsius(msg.seedMinTemp),1).ToString();
        var seedMaxC= Math.Round(TemperatureHelpers.KelvinToCelsius(msg.seedMaxTemp),1).ToString();
        Temperature.SetMarkup($"{Loc.GetString($"plant-analyzer-plant-temp-comfort-text", ("seedMin", Math.Round(msg.seedMinTemp)),("seedMax", Math.Round(msg.seedMaxTemp)), ("seedMinC", seedMinC), ("seedMaxC", seedMaxC ))}");
        TraitsName.SetMarkup($"{Loc.GetString($"plant-analyzer-plant-mutations-text")+" "+(msg.seedMut)}\n");


      }
}




