using Content.Client.Message;
using Content.Shared.PDA;
using Content.Shared.Traitor.Uplink;
using Content.Shared.Store;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Client.Graphics;
using Content.Shared.Actions.ActionTypes;
using System.Linq;

namespace Content.Client.Store.Ui;

[GenerateTypedNameReferences]
public sealed partial class StoreMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;

    //private UplinkWithdrawWindow? _withdrawWindow;

    public event Action<BaseButton.ButtonEventArgs, ListingData>? OnListingButtonPressed;
    public event Action<BaseButton.ButtonEventArgs, string>? OnCategoryButtonPressed;
    public event Action<int>? OnWithdrawAttempt;

    private UplinkAccountData? _loggedInUplinkAccount;

    public EntityUid? CurrentBuyer = null;
    public Dictionary<string, float> Balance = new();
    public string CurrentCategory = string.Empty;

    public StoreMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        //WithdrawButton.OnButtonDown += OnWithdrawButtonDown;
    }

    public void UpdateBalance(Dictionary<string, float> balance)
    {
        Balance = balance;

        var balanceStr = string.Empty;
        BalanceInfo.SetMarkup(balanceStr);

        // you can't withdraw if you don't have TC
        WithdrawButton.Disabled = true;
    }

    public void UpdateListing(List<ListingData> listings)
    {
        var sorted = listings.OrderBy(l => l.Priority).ThenBy(l => l.Cost.Values.Sum());
         
        // should probably chunk these out instead. to-do if this clogs the internet tubes.
        // maybe read clients prototypes instead?
        ClearListings();
        foreach (var item in sorted)
        {
            AddListingGui(item);
        }
    }

    private void OnWithdrawButtonDown(BaseButton.ButtonEventArgs args)
    {
        if (_loggedInUplinkAccount == null)
            return;
        /*
        // check if window is already open
        if (_withdrawWindow != null && _withdrawWindow.IsOpen)
        {
            _withdrawWindow.MoveToFront();
            return;
        }

        // open a new one
        _withdrawWindow = new UplinkWithdrawWindow(_loggedInUplinkAccount.DataBalance);
        _withdrawWindow.OpenCentered();

        _withdrawWindow.OnWithdrawAttempt += OnWithdrawAttempt;*/
    }

    private void AddListingGui(ListingData listing)
    {
        if (!listing.Categories.Contains(CurrentCategory))
            return;

        var listingName = listing.Name; // == string.Empty ? prototype.Name : listing.ListingName;
        var listingDesc = listing.Description; // == string.Empty ? prototype.Description : listing.Description;
        var listingPrice = listing.Cost;
        var canBuy = CanBuyListing(Balance, listingPrice);

        var spriteSys = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();

        Texture? texture = null;
        if (listing.Icon != null)
        {
            texture = spriteSys.Frame0(listing.Icon);
        }
        else if (listing.ProductEntity != null)
        {
            texture = spriteSys.GetPrototypeIcon(listing.ProductEntity).Default;
        }
        else if (listing.ProductAction != null)
        {
            var action = _prototypeManager.Index<InstantActionPrototype>(listing.ProductAction);
            if (action.Icon != null)
                texture = spriteSys.Frame0(action.Icon);
        }

        var newListing = new StoreListingControl(listingName, listingDesc, GetListingPriceString(listing), canBuy, texture);
        newListing.StoreItemBuyButton.OnButtonDown += args
            => OnListingButtonPressed?.Invoke(args, listing);

        StoreListingsContainer.AddChild(newListing);
    }

    public bool CanBuyListing(Dictionary<string, float> currency, Dictionary<string, float> price)
    {
        foreach (var type in price)
        {
            if (!currency.ContainsKey(type.Key))
                return false;

            if (currency[type.Key] < type.Value)
                return false;
        }
        return true;
    }

    public string GetListingPriceString(ListingData listing)
    {
        var text = string.Empty;

        foreach (var type in listing.Cost)
        {
            var currency = _prototypeManager.Index<CurrencyPrototype>(type.Key);
            text += $"{type.Value} {Loc.GetString(currency.Name, ("amount", type.Value))}\n";
        }

        if (listing.Cost.Count < 1)
            text = Loc.GetString("store-currency-free");

        return text.TrimEnd();
    }

    private void ClearListings()
    {
        StoreListingsContainer.Children.Clear();
    }

    public void PopulateStoreCategoryButtons(HashSet<ListingData> listings)
    {
        CategoryListContainer.Children.Clear();

        var allCategories = new List<string>();
        foreach (var listing in listings)
        {
            foreach (var cat in listing.Categories)
            {
                if (!allCategories.Contains(cat))
                    allCategories.Add(cat);
            }
        }

        if (CurrentCategory == string.Empty && allCategories.Count > 0)
            CurrentCategory = allCategories[0];

        foreach (var cat in allCategories)
        {
            var catproto = _prototypeManager.Index<StoreCategoryPrototype>(cat);

            var catButton = new StoreCategoryButton
            {
                Text = catproto.Name,
                Id = catproto.ID
            };

            catButton.OnPressed += args => OnCategoryButtonPressed?.Invoke(args, catButton.Id);
            CategoryListContainer.AddChild(catButton);
        }
    }

    public override void Close()
    {
        base.Close();
        CurrentBuyer = null;
        //_withdrawWindow?.Close();
    }

    private sealed class StoreCategoryButton : Button
    {
        public string? Id;
    }
}
