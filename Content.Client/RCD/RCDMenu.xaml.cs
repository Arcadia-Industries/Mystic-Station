using Content.Client.UserInterface.Controls;
using Content.Shared.Construction.Prototypes;
using Content.Shared.RCD.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;

namespace Content.Client.RCD;

[GenerateTypedNameReferences]
public sealed partial class RCDMenu : RadialMenu
{
    [Dependency] private readonly EntityManager _entManager = default!;
    [Dependency] private readonly IPrototypeManager _protoManager = default!;

    public event Action<RcdMode, string?>? SendRCDSystemMessageAction;

    public RCDMenu(EntityUid owner, RCDMenuBoundUserInterface bui)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        this.VerticalExpand = true;
        this.HorizontalExpand = true;

        OnChildAdded += AddRCDMenuButtonOnClickActions;

        SendRCDSystemMessageAction += bui.SendRCDSystemMessage;

        // Populate menu
        if (!_entManager.TryGetComponent<RCDComponent>(owner, out var rcd))
            return;

        foreach (var protoId in rcd.AvailablePrototypes)
        {
            var proto = _protoManager.Index(protoId);
            var parent = FindControl<RadialContainer>(proto.Category);

            if (parent == null)
                continue;

            var button = new RCDMenuButton()
            {
                StyleClasses = { "RadialMenuButton" },
                SetSize = new Vector2(64f, 64f),
                ToolTip = Loc.GetString(proto.SetName),
                RcdMode = proto.Mode,
                ConstructionPrototype = proto.Prototype
            };

            var tex = new TextureRect()
            {
                VerticalAlignment = VAlignment.Center,
                HorizontalAlignment = HAlignment.Center,
                TextureScale = new Vector2(2f, 2f),
                TexturePath = proto.TexturePath,
            };

            button.AddChild(tex);
            parent.AddChild(button);
        }

        foreach (var child in Children)
            AddRCDMenuButtonOnClickActions(child);
    }

    private void AddRCDMenuButtonOnClickActions(Control control)
    {
        var radialContainer = control as RadialContainer;

        if (radialContainer == null)
            return;

        foreach (var child in radialContainer.Children)
        {
            var castChild = child as RCDMenuButton;

            if (castChild == null)
                continue;

            castChild.OnButtonUp += _ =>
            {
                SendRCDSystemMessageAction?.Invoke(castChild.RcdMode, castChild.ConstructionPrototype);
                Close();
            };
        }
    }
}

public sealed class RCDMenuButton : RadialMenuTextureButton
{
    public RcdMode RcdMode { get; set; }
    public string? ConstructionPrototype { get; set; }

    public RCDMenuButton()
    {

    }
}
