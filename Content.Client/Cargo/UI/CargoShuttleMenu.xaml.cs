using Content.Client.Cargo.Systems;
using Content.Client.UserInterface.Controls;
using Content.Shared.Cargo.Orders;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Cargo.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class CargoShuttleMenu : FancyWindow
    {
        private readonly IPrototypeManager _protoManager;
        private readonly SpriteSystem _spriteSystem;
        private readonly CargoSystem _cargoSystem;

        public CargoShuttleMenu(IPrototypeManager protoManager, SpriteSystem spriteSystem, CargoSystem cargoSystem)
        {
            RobustXamlLoader.Load(this);
            _protoManager = protoManager;
            _spriteSystem = spriteSystem;
            _cargoSystem = cargoSystem;
            Title = Loc.GetString("cargo-shuttle-console-menu-title");
        }

        public void SetAccountName(string name)
        {
            AccountNameLabel.Text = name;
        }

        public void SetShuttleName(string name)
        {
            ShuttleNameLabel.Text = name;
        }

        public void SetOrders(List<CargoOrderData> orders)
        {
            Orders.DisposeAllChildren();

            foreach (var order in orders)
            {
                CargoOrderRow row;
                var product = _cargoSystem.GetOrderPrototype(order);
                var productName = _cargoSystem.GetOrderDisplayName(order);

                if (product != null)
                {
                    row = new CargoOrderRow
                    {
                        Order = order,
                        Icon = { Texture = _spriteSystem.Frame0(product) },
                        ProductName =
                        {
                            Text = Loc.GetString(
                                "cargo-console-menu-populate-orders-cargo-order-row-product-name-text",
                                ("productName", productName),
                                ("orderAmount", order.OrderQuantity - order.NumDispatched),
                                ("orderRequester", order.Requester))
                        },
                        Description =
                        {
                            Text = Loc.GetString("cargo-console-menu-order-reason-description",
                                ("reason", order.Reason))
                        }
                    };
                }
                else
                {
                    row = new CargoOrderRow
                    {
                        Order = order,
                        ProductName =
                        {
                            Text = Loc.GetString(
                                "cargo-console-menu-populate-orders-cargo-order-row-product-name-text",
                                ("productName", productName),
                                ("orderAmount", order.OrderQuantity - order.NumDispatched),
                                ("orderRequester", order.Requester))
                        },
                        Description =
                        {
                            Text = Loc.GetString("cargo-console-menu-order-reason-description",
                                ("reason", order.Reason))
                        }
                    };
                }

                row.Approve.Visible = false;
                row.Cancel.Visible = false;

                Orders.AddChild(row);
            }
        }
    }
}
