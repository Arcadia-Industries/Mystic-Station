using Content.Shared.Radio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Radio.UI;

[GenerateTypedNameReferences]
public sealed partial class RadioWindow : DefaultWindow
{
    public RadioBoundUserInterface Owner { get; }

    public RadioWindow(RadioBoundUserInterface owner)
    {
        Owner = owner;
        RobustXamlLoader.Load(this);
    }

    private void OnTextFinished(string text, string defaultText)
    {
        try
        {
            Owner.ChangeFrequency(Parse.Int32(text));
        }
        // FormatExemption is the intended T but its apparently invalid?
        catch (Exception e)
        {
            // good one. Reset it
            RadioFrequency.Text = defaultText;
        }
    }

    public void UpdateState(BoundUserInterfaceState state)
    {
        var castState = (RadioBoundInterfaceState) state;

            var height = 106;
            if (castState.Channels.Count > 0)
            {
                height += castState.Channels.Count * 21 + 6;
            } else
            {
                height += 24;
            }
            MinHeight = height;
            //MainWindow.SetHeight = height;

        if (RadioFrequency != null)
        {
            RadioFrequency.Text = castState.Frequency.ToString();
            RadioFrequency.Visible = true;
            RadioFrequency.Editable = !castState.FrequencyLock;
            RadioFrequency.OnTextEntered += (args) => OnTextFinished(args.Text, castState.Frequency.ToString());
            RadioFrequency.OnFocusExit += (args) => OnTextFinished(args.Text, castState.Frequency.ToString());
        }

        if (ListenToggle != null && BroadcastToggle != null && CommandAnnoyanceToggle != null)
        {
            BroadcastToggle.Pressed = castState.TX;
            ListenToggle.Pressed = castState.RX;
            BroadcastToggle.OnPressed += _ => Owner.ToggleTX();
            ListenToggle.OnPressed += _ => Owner.ToggleRX();

            if (castState.UseCommand)
            {
                CommandAnnoyanceToggle.Pressed = castState.UseCommand;
                CommandAnnoyanceToggle.Visible = true;
            } else
            {
                CommandAnnoyanceToggle.Visible = false;
            }
        }

        if (RadioOptionsNoContent != null && RadioOptionsContainer != null)
        {
            RadioOptionsContainer.RemoveAllChildren();
            if (castState.Channels.Count > 0)
            {
                RadioOptionsContainer.Visible = true;
                RadioOptionsNoContent.Visible = false;

                foreach (var item in castState.Channels)
                {
                    var toggleButton = new CheckBox();
                    toggleButton.Text = "(" + item.Value + ")";
                    toggleButton.OnPressed += _ => Owner.ToggleFrequencyFilter(item.Key);
                    toggleButton.Pressed = !castState.BlockedFrequency.Contains(item.Key);
                    RadioOptionsContainer.AddChild(toggleButton);
                }

            } else
            {
                RadioOptionsContainer.Visible = false;
                RadioOptionsNoContent.Visible = true;
            }
        }
    }
}

