using System.Linq;
using Content.Client.UserInterface.Controls;
using Content.Shared.Radio;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Radio.Ui;

[GenerateTypedNameReferences]
public sealed partial class HandheldRadioMenu : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    public event Action<bool>? OnMicPressed;
    public event Action<bool>? OnSpeakerPressed;
    public event Action<int>? OnChannelSelected;
    public HandheldRadioMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Channel.SetButtons(new List<int> {-1}, new List<int> {1});
        Channel.IsValid = n => n>1389 && n<1400;
        MicButton.OnPressed += args => OnMicPressed?.Invoke(args.Button.Pressed);
        SpeakerButton.OnPressed += args => OnSpeakerPressed?.Invoke(args.Button.Pressed);
        ChannelButton.OnPressed += args => OnChannelSelected?.Invoke(Channel.Value);
    }

    public void Update(HandheldRadioBoundUIState state)
    {
        MicButton.Pressed = state.MicEnabled;
        SpeakerButton.Pressed = state.SpeakerEnabled;
    }
}

