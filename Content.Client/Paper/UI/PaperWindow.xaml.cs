using Content.Shared.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Paper.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class PaperWindow : DefaultWindow
    {
        public PaperWindow()
        {
            RobustXamlLoader.Load(this);

            //var resourceCache = IoCManager.Resolve<IResourceCache>();
            //var backgroundTexture = resourceCache.GetTexture("/Textures/Interface/Nano/lined_paper.svg.96dpi.png");
        }

        public void InitVisuals(PaperVisualsComponent visuals)
        {
            Logger.Debug($"BKG: {visuals.BackgroundTexturePath}");

            var resCache = IoCManager.Resolve<IResourceCache>();

            if(visuals.CenterTexturePath != null)
            {
                var bkgTex = resCache.GetResource<TextureResource>(visuals.CenterTexturePath);
                _repeatingBackground = bkgTex;
           }
        }

        protected TextureResource? _repeatingBackground;

        protected override void Draw(DrawingHandleScreen handle)
        {
            if(_repeatingBackground != null)
            {
                // For some reason, the UserInterfaceManager.ThemeDefaults.DefaultFont.GetLineHeight(1) == 0
                // So hardcode some reasonable numbers here
                float fontLineHeight = 12;
                float fontDescent = 4;
                if( Label.TryGetStyleProperty<Font>("font", out var font) )
                {
                    fontLineHeight = font.GetLineHeight(UIScale);
                    fontDescent = font.GetDescent(1);
                }

                var texHeight = _repeatingBackground.Texture.Height;
                PaperBackground.PanelOverride = new StyleBoxTexture
                {
                    Texture = _repeatingBackground,
                    Mode = StyleBoxTexture.StretchMode.Tile,
                    // This positions the texture so the font baseline is on the bottom:
                    ExpandMarginTop = fontDescent,
                    // And this scales the texture so that it's a single text line:
                    //Scale = new Vector2(1, (float)paperFont.GetLineHeight(1) / tiledHeight)
                    Scale = new Vector2(1, fontLineHeight / texHeight)
                };
            }

            base.Draw(handle);
        }

        public void Populate(SharedPaperComponent.PaperBoundUserInterfaceState state)
        {
            bool isEditing = state.Mode == SharedPaperComponent.PaperAction.Write;
            InputContainer.Visible = isEditing;

            var msg = new FormattedMessage();
            msg.AddMarkupPermissive(state.Text);
            Label.SetMessage(msg);

            BlankPaperIndicator.Visible = !isEditing && state.Text.Length == 0;

            StampDisplay.RemoveAllChildren();
            foreach(var stamper in state.StampedBy)
            {
                StampDisplay.AddChild(new StampWidget{ Stamper = stamper });
            }
        }
    }
}
