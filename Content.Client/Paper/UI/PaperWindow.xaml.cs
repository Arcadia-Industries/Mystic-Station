using Content.Shared.Paper;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Paper.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class PaperWindow : DefaultWindow
    {
        public PaperWindow()
        {
            RobustXamlLoader.Load(this);

            // We can't configure the RichTextLabel contents from xaml, so do it here:
            BlankPaperIndicator.SetMessage(Loc.GetString("paper-ui-blank-page-message"));
        }

        public void InitVisuals(PaperVisualsComponent visuals)
        {
            var resCache = IoCManager.Resolve<IResourceCache>();

            /// Initialize the background:

            //<todo.eoin there is surely sugar for this?
            PaperBackground.ModulateSelfOverride = visuals.BackgroundModulate;
            var backgroundImage = visuals.BackgroundImagePath != null? resCache.GetResource<TextureResource>(visuals.BackgroundImagePath) : null;
            if (backgroundImage != null)
            {
                var backgroundImageMode = visuals.BackgroundImageTile ? StyleBoxTexture.StretchMode.Tile : StyleBoxTexture.StretchMode.Stretch;
                var backgroundPatchMargin = visuals.BackgroundPatchMargin;
                PaperBackground.PanelOverride = new StyleBoxTexture
                {
                    Texture = backgroundImage,
                    Mode = backgroundImageMode,
                    PatchMarginLeft = backgroundPatchMargin.Left,
                    PatchMarginBottom = backgroundPatchMargin.Bottom,
                    PatchMarginRight = backgroundPatchMargin.Right,
                    PatchMarginTop = backgroundPatchMargin.Top
                };

            }
            else
            {
                PaperBackground.PanelOverride = null;
            }


            // Then the header:
            if (visuals.HeaderImagePath != null)
            {
                ImageHeader.TexturePath = visuals.HeaderImagePath;
                ImageHeader.MinSize = ImageHeader.TextureNormal?.Size ?? Vector2.Zero;
            }

            ImageHeader.ModulateSelfOverride = visuals.HeaderImageModulate;
            ImageHeader.Margin = new Thickness(visuals.HeaderMargin.Left, visuals.HeaderMargin.Top,
                    visuals.HeaderMargin.Right, visuals.HeaderMargin.Bottom);


            // Now the writing area:
            // First, setup some info we need about the font. It seems
            // UserInterfaceManager.ThemeDefaults.DefaultFont can be a DummyFont,
            // which will have zeros for these values, so we need to populate some
            // sane defaults here, but these are basically an arbitrary guess:
            float fontLineHeight = 12;
            float fontDescent = 4;
            if (WrittenTextLabel.TryGetStyleProperty<Font>("font", out var font))
            {
                fontLineHeight = font.GetLineHeight(UIScale);
                fontDescent = font.GetDescent(UIScale);
            }

            PaperContent.ModulateSelfOverride = visuals.ContentImageModulate;
            WrittenTextLabel.ModulateSelfOverride = visuals.FontAccentColor;

            var contentImage = visuals.ContentImagePath != null ? resCache.GetResource<TextureResource>(visuals.ContentImagePath) : null;
            if (contentImage != null)
            {
                PaperContent.PanelOverride = new StyleBoxTexture
                {
                    Texture = contentImage,
                    Mode = StyleBoxTexture.StretchMode.Tile,
                    // This positions the texture so the font baseline is on the bottom:
                    ExpandMarginTop = fontDescent,
                    // And this scales the texture so that it's a single text line:
                    //Scale = new Vector2(1, fontLineHeight / _contentImage.Texure.Height)
                };
            }

            PaperContentContainer.Margin = new Thickness(
                    visuals.ContentMargin.Left, visuals.ContentMargin.Top,
                    visuals.ContentMargin.Right, visuals.ContentMargin.Bottom);

            if (visuals.MaxWritableArea != null)
            {
                // Paper has requested that this has a maximum area that you can write on.
                // So, we'll make the window non-resizable and fix the size of the content.
                Resizable = false;
                PaperContent.MinSize = Vector2.Zero;
                PaperContent.MinSize = (Vector2)(visuals.MaxWritableArea);
                PaperContent.MaxSize = (Vector2)(visuals.MaxWritableArea);
            }
       }

        protected override void Draw(DrawingHandleScreen handle)
        {
            base.Draw(handle);
        }

        public void Populate(SharedPaperComponent.PaperBoundUserInterfaceState state)
        {
            bool isEditing = state.Mode == SharedPaperComponent.PaperAction.Write;
            InputContainer.Visible = isEditing;

            var msg = new FormattedMessage();
            // Remove any newlines from the end of the message. There can be a trailing
            // new line at the end of user input, and we would like to display the input
            // box immediately on the next line.
            msg.AddMarkupPermissive(state.Text.TrimEnd('\r', '\n'));
            WrittenTextLabel.SetMessage(msg);

            BlankPaperIndicator.Visible = !isEditing && state.Text.Length == 0;

            StampDisplay.RemoveAllChildren();
            foreach(var stamper in state.StampedBy)
            {
                StampDisplay.AddChild(new StampWidget{ Stamper = stamper });
            }

            // The DefaultWindow sets an arbitrary MinSize. We'll set this back so that
            // the min size is enough to contain the content without overlapping.
            MinSize = DesiredSize;
        }
    }
}
