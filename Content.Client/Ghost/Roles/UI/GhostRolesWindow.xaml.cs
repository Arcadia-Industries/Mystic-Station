using Content.Client.Stylesheets;
using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Ghost.Roles.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostRolesWindow : DefaultWindow
    {
        [Dependency] private readonly IGameTiming _gameTiming = default!;

        public event Action<GhostRoleInfo>? OnRoleTake;
        public event Action<GhostRoleInfo>? OnRoleRequested;
        public event Action<GhostRoleInfo>? OnRoleCancelled;
        public event Action<GhostRoleInfo>? OnRoleFollowed;

        public event Action<GhostRoleGroupInfo>? OnGroupRequested;
        public event Action<GhostRoleGroupInfo>? OnGroupCancelled;
        public event Action<GhostRoleGroupInfo>? OnGroupDelete;
        public event Action<GhostRoleGroupInfo>? OnGroupRelease;
        public event Action? OnGroupStart;

        public GhostRolesWindow()
        {
            RobustXamlLoader.Load(this);

            TimeRemainingProgress.ForegroundStyleBoxOverride = new StyleBoxFlat(StyleNano.NanoGold);

            StartGroupButton.OnPressed += _ => OnGroupStart?.Invoke();

        }

        public void SetLotteryTime(TimeSpan lotteryStart, TimeSpan lotteryEnd)
        {
            // Negate the values to remove the need to do calculations.
            TimeRemainingProgress.MinValue = (float) -lotteryEnd.TotalSeconds;
            TimeRemainingProgress.MaxValue = (float) -lotteryStart.TotalSeconds;
            TimeRemainingProgress.Value = (float) -lotteryStart.TotalSeconds;
        }

        public void ClearEntries()
        {
            NoRolesMessage.Visible = true;
            EntryContainer.DisposeAllChildren();
        }

        public void AddEntry(GhostRoleInfo role)
        {
            NoRolesMessage.Visible = false;

            var entry = new GhostRolesEntry(role);
            entry.OnRoleTake += OnRoleTake;
            entry.OnRoleSelected += OnRoleRequested;
            entry.OnRoleCancelled += OnRoleCancelled;
            entry.OnRoleFollowed += OnRoleFollowed;
            EntryContainer.AddChild(entry);
        }

        public void AddGroupEntry(GhostRoleGroupInfo group, bool adminControls)
        {
            NoRolesMessage.Visible = false;

            var entry = new GhostRoleGroupEntry(group, adminControls);
            entry.OnGroupSelected +=  OnGroupRequested;
            entry.OnGroupCancelled += OnGroupCancelled;
            entry.OnGroupRelease += OnGroupRelease;
            entry.OnGroupDelete += OnGroupDelete;

            EntryContainer.AddChild(entry);
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            TimeRemainingProgress.Value = (float) -_gameTiming.CurTime.TotalSeconds;
        }

        public void SetAdminControlsVisible(bool showAdminControls)
        {
            AdminControls.Visible = showAdminControls;
        }
    }
}
