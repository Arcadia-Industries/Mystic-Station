using System;
using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.Ghost.Roles.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostRolesEntry : BoxContainer
    {
        private readonly IGameTiming _gameTiming = default!;

        private float _timeRemaining;

        public event Action<GhostRoleInfo>? OnRoleSelected;
        public event Action<GhostRoleInfo>? OnRoleCancelled;
        public event Action<GhostRoleInfo>? OnRoleFollowed;

        public GhostRolesEntry(string name, string description, GhostRoleInfo role, IGameTiming timing)
        {
            RobustXamlLoader.Load(this);

            _gameTiming = timing;
            _timeRemaining = (float) (role.ExpiresAt.TotalSeconds - _gameTiming.CurTime.TotalSeconds);

            Title.Text = name;
            Description.SetMessage(description);

            RequestButton.Visible = !role.IsRequested;
            CancelButton.Visible = role.IsRequested;

            RequestButton.OnPressed += _ => OnRoleSelected?.Invoke(role);
            CancelButton.OnPressed += _ => OnRoleCancelled?.Invoke(role);
            FollowButton.OnPressed += _ => OnRoleFollowed?.Invoke(role);
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            _timeRemaining -= args.DeltaSeconds;
            var displayTimeRemaining = Math.Max(0, _timeRemaining);

            TimeRemaining.Text = $"Ends In {displayTimeRemaining:0.0} s";
        }
    }
}
