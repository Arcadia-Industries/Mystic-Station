using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Ghost.RoleGroups.UI;

[GenerateTypedNameReferences]
public sealed partial class GhostRoleGroupAdminEntry : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    public event Action<AdminGhostRoleGroupInfo>? OnGroupRelease;
    public event Action<AdminGhostRoleGroupInfo>? OnGroupDelete;
    public event Action<EntityUid>? OnEntityGoto;

    private bool _showDetails;

    public GhostRoleGroupAdminEntry(AdminGhostRoleGroupInfo group)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Title.Text = group.Name;
        Description.SetMessage(group.Description);

        foreach (var entity in group.Entities)
        {
            // TODO: Entity might not exist client-side yet :(
            var name = _entityManager.ToPrettyString(entity).Name ?? "Unknown";
            var entry = new GhostRoleGroupEntityEntry(name, entity);

            entry.OnEntityGoto += _ => OnEntityGoto?.Invoke(entity);
            EntityDetailsContainer.AddChild(entry);
            NoRoleGroupEntitiesLabel.Visible = false;
        }

        ReleaseButton.Disabled = group.Status != "Editing";
        ReleaseButton.Text = group.Status switch
        {
            "Editing" => "Release",
            "Releasing" => "Releasing...",
            "Released" => "Released",
            _ => "Release"
        };

        ReleaseButton.OnPressed += _ => OnGroupRelease?.Invoke(group);
        DeleteButton.OnPressed += _ => OnGroupDelete?.Invoke(group);
        DetailsButton.OnPressed += _ =>
        {
            _showDetails = !_showDetails;
            EntityDetailsContainer.Visible = _showDetails;
            DetailsButton.Text = _showDetails ? "- Details" : "+ Details";
        };
    }
}
