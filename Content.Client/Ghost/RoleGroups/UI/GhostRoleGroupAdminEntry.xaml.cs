using Content.Shared.Ghost.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Ghost.RoleGroups.UI;

[GenerateTypedNameReferences]
public sealed partial class GhostRoleGroupAdminEntry : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly ILocalizationManager _loc = default!;

    public event Action<AdminGhostRoleGroupInfo>? OnGroupActivate;
    public event Action<AdminGhostRoleGroupInfo>? OnGroupRelease;
    public event Action<AdminGhostRoleGroupInfo>? OnGroupDelete;

    public event Action<AdminGhostRoleGroupInfo>? OnGroupShowDetails;
    public event Action<EntityUid>? OnEntityGoto;

    public GhostRoleGroupAdminEntry(AdminGhostRoleGroupInfo group, IReadOnlyDictionary<EntityUid, string> entityNames)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Title.Text = $"[{group.GroupIdentifier}] - {group.Name}";
        Owner.Text = "Owned By: " + group.OwnerName;
        Description.SetMessage(group.Description);
        DetailsButton.Text = "+ " + _loc.GetString("ghost-role-groups-window-details-button");

        foreach (var entity in group.Entities)
        {
            var name = entityNames.GetValueOrDefault(entity) ?? "Unknown";
            var entry = new GhostRoleGroupEntityEntry(name, entity);

            entry.OnEntityGoto += _ => OnEntityGoto?.Invoke(entity);
            EntityDetailsContainer.AddChild(entry);
            NoRoleGroupEntitiesLabel.Visible = false;
        }


        StateTextLabel.Visible = !group.CanModify;
        StateTextLabel.Text = group.Status switch
        {
            GhostRoleGroupStatus.Editing => _loc.GetString("ghost-role-groups-window-state-text-label-editing"),
            GhostRoleGroupStatus.Released => _loc.GetString("ghost-role-groups-window-state-text-label-released"),
            _ => "Unknown"
        };

        ReleaseButton.Visible = group.CanModify;
        ReleaseButton.Disabled = group.Status != GhostRoleGroupStatus.Editing || group.Entities.Length == 0;
        ReleaseButton.Text = group.Status switch
        {
            GhostRoleGroupStatus.Editing => _loc.GetString("ghost-role-groups-window-release-button"),
            GhostRoleGroupStatus.Released => _loc.GetString("ghost-role-groups-window-released-button"),
            _ => "Unknown"
        };

        ActivateButton.Visible = group.CanModify && group.Status == GhostRoleGroupStatus.Editing;
        ActivateButton.Text = group.IsActive
            ? _loc.GetString("ghost-role-groups-window-deactivate-button")
            : _loc.GetString("ghost-role-groups-window-activate-button");

        switch (group.IsActive)
        {
            case true:
                ActivateButton.StyleClasses.Add("Caution");
                break;
            case false:
                ActivateButton.StyleClasses.Remove("Caution");
                break;
        }

        DeleteButton.Visible = group.CanModify;

        ActivateButton.OnPressed += _ => OnGroupActivate?.Invoke(group);
        ReleaseButton.OnPressed += _ => OnGroupRelease?.Invoke(group);
        DeleteButton.OnPressed += _ => OnGroupDelete?.Invoke(group);
        DetailsButton.OnPressed += _ =>  OnGroupShowDetails?.Invoke(group);
    }

    public void ShowDetails(bool show)
    {
        EntityDetailsContainer.Visible = show;

        var prefix = show ? "- " : "+ ";
        DetailsButton.Text = prefix + _loc.GetString("ghost-role-groups-window-details-button");
    }
}
