#nullable enable
using System.Collections.Generic;
using System.Linq;
using Content.Client.GameObjects.EntitySystems;
using Content.Client.UserInterface.AdminMenu.CustomControls;
using Content.Shared.Atmos;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Map;

namespace Content.Client.UserInterface.AdminMenu.Tabs
{
    [GenerateTypedNameReferences]
    public partial class AtmosTab : MarginContainer
    {
        private readonly List<AdminMenuControls.CommandButton> _atmosButtons = new()
        {
            new AddAtmosCommandButton(),
            new AddGasCommandButton(),
            new FillGasCommandButton(),
            new SetTempCommandButton(),
        };

        public AtmosTab()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            ButtonGridControl.AddCommandButtons(_atmosButtons);
        }

        #region Command Buttons

        private class AddAtmosCommandButton : AdminMenuControls.UICommandButton
        {
            public override string Name => "Add Atmos";
            public override string RequiredCommand => "addatmos";

            private readonly AdminMenuControls.CommandUIDropDown _grid = new()
            {
                Name = "Grid",
                GetData = () =>
                    IoCManager.Resolve<IMapManager>().GetAllGrids().Where(g => (int) g.Index != 0).ToList<object>(),
                GetDisplayName = (obj) =>
                    $"{((IMapGrid) obj).Index}{(IoCManager.Resolve<IPlayerManager>().LocalPlayer?.ControlledEntity?.Transform.GridID == ((IMapGrid) obj).Index ? " (Current)" : "")}",
                GetValueFromData = (obj) => ((IMapGrid) obj).Index.ToString(),
            };

            public override List<AdminMenuControls.CommandUIControl> UI => new()
            {
                _grid,
            };

            public override void Submit()
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"addatmos {_grid.GetValue()}");
            }
        }

        private class AddGasCommandButton : AdminMenuControls.UICommandButton
        {
            public override string Name => "Add Gas";
            public override string RequiredCommand => "addgas";

            private readonly AdminMenuControls.CommandUIDropDown _grid = new()
            {
                Name = "Grid",
                GetData = () =>
                    IoCManager.Resolve<IMapManager>().GetAllGrids().Where(g => (int) g.Index != 0).ToList<object>(),
                GetDisplayName = (obj) =>
                    $"{((IMapGrid) obj).Index}{(IoCManager.Resolve<IPlayerManager>().LocalPlayer?.ControlledEntity?.Transform.GridID == ((IMapGrid) obj).Index ? " (Current)" : "")}",
                GetValueFromData = (obj) => ((IMapGrid) obj).Index.ToString(),
            };

            private readonly AdminMenuControls.CommandUISpinBox _tileX = new()
            {
                Name = "TileX",
            };

            private readonly AdminMenuControls.CommandUISpinBox _tileY = new()
            {
                Name = "TileY",
            };

            private readonly AdminMenuControls.CommandUIDropDown _gas = new()
            {
                Name = "Gas",
                GetData = () =>
                {
                    var atmosSystem = EntitySystem.Get<AtmosphereSystem>();
                    return atmosSystem.Gases.ToList<object>();
                },
                GetDisplayName = (obj) => $"{((GasPrototype) obj).Name} ({((GasPrototype) obj).ID})",
                GetValueFromData = (obj) => ((GasPrototype) obj).ID.ToString(),
            };

            private readonly AdminMenuControls.CommandUISpinBox _amount = new()
            {
                Name = "Amount"
            };

            public override List<AdminMenuControls.CommandUIControl> UI => new()
            {
                _grid,
                _gas,
                _tileX,
                _tileY,
                _amount,
            };

            public override void Submit()
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                    $"addgas {_tileX.GetValue()} {_tileY.GetValue()} {_grid.GetValue()} {_gas.GetValue()} {_amount.GetValue()}");
            }
        }

        private class FillGasCommandButton : AdminMenuControls.UICommandButton
        {
            public override string Name => "Fill Gas";
            public override string RequiredCommand => "fillgas";

            private readonly AdminMenuControls.CommandUIDropDown _grid = new()
            {
                Name = "Grid",
                GetData = () =>
                    IoCManager.Resolve<IMapManager>().GetAllGrids().Where(g => (int) g.Index != 0).ToList<object>(),
                GetDisplayName = (obj) =>
                    $"{((IMapGrid) obj).Index}{(IoCManager.Resolve<IPlayerManager>().LocalPlayer?.ControlledEntity?.Transform.GridID == ((IMapGrid) obj).Index ? " (Current)" : "")}",
                GetValueFromData = (obj) => ((IMapGrid) obj).Index.ToString(),
            };

            private readonly AdminMenuControls.CommandUIDropDown _gas = new()
            {
                Name = "Gas",
                GetData = () =>
                {
                    var atmosSystem = EntitySystem.Get<AtmosphereSystem>();
                    return atmosSystem.Gases.ToList<object>();
                },
                GetDisplayName = (obj) => $"{((GasPrototype) obj).Name} ({((GasPrototype) obj).ID})",
                GetValueFromData = (obj) => ((GasPrototype) obj).ID.ToString(),
            };

            private readonly AdminMenuControls.CommandUISpinBox _amount = new()
            {
                Name = "Amount"
            };

            public override List<AdminMenuControls.CommandUIControl> UI => new()
            {
                _grid,
                _gas,
                _amount,
            };

            public override void Submit()
            {
                IoCManager.Resolve<IClientConsoleHost>()
                    .ExecuteCommand($"fillgas {_grid.GetValue()} {_gas.GetValue()} {_amount.GetValue()}");
            }
        }

        private class SetTempCommandButton : AdminMenuControls.UICommandButton
        {
            public override string Name => "Set temperature";
            public override string RequiredCommand => "settemp";

            private readonly AdminMenuControls.CommandUIDropDown _grid = new()
            {
                Name = "Grid",
                GetData = () =>
                    IoCManager.Resolve<IMapManager>().GetAllGrids().Where(g => (int) g.Index != 0).ToList<object>(),
                GetDisplayName = (obj) =>
                    $"{((IMapGrid) obj).Index}{(IoCManager.Resolve<IPlayerManager>().LocalPlayer?.ControlledEntity?.Transform.GridID == ((IMapGrid) obj).Index ? " (Current)" : "")}",
                GetValueFromData = (obj) => ((IMapGrid) obj).Index.ToString(),
            };

            private readonly AdminMenuControls.CommandUISpinBox _tileX = new()
            {
                Name = "TileX",
            };

            private readonly AdminMenuControls.CommandUISpinBox _tileY = new()
            {
                Name = "TileY",
            };

            private readonly AdminMenuControls.CommandUISpinBox _temperature = new()
            {
                Name = "Temperature"
            };

            public override List<AdminMenuControls.CommandUIControl> UI => new()
            {
                _grid,
                _tileX,
                _tileY,
                _temperature,
            };

            public override void Submit()
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand(
                    $"settemp {_tileX.GetValue()} {_tileY.GetValue()} {_grid.GetValue()} {_temperature.GetValue()}");
            }
        }

        #endregion
    }
}
