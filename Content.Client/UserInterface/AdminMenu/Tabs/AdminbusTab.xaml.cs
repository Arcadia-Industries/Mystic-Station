#nullable enable
using System.Collections.Generic;
using System.Linq;
using Content.Client.StationEvents;
using Content.Client.UserInterface.AdminMenu.CustomControls;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.Placement;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.UserInterface.AdminMenu.Tabs
{
    [GenerateTypedNameReferences]
    public partial class AdminbusTab : MarginContainer
    {
        private readonly List<AdminMenuControls.CommandButton> _adminbusButtons = new()
        {
            new SpawnEntitiesCommandButton(),
            new SpawnTilesCommandButton(),
            new StationEventsCommandButton()
        };

        public AdminbusTab()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            ButtonGridControl.AddCommandButtons(_adminbusButtons);
        }

        #region Command Buttons

        private class SpawnEntitiesCommandButton : AdminMenuControls.CommandButton
        {
            public override string Name => "Spawn Entities";

            //TODO: override CanPress
            public override void ButtonPressed(BaseButton.ButtonEventArgs args)
            {
                var manager = IoCManager.Resolve<IAdminMenuManager>();
                var window = new EntitySpawnWindow(IoCManager.Resolve<IPlacementManager>(),
                    IoCManager.Resolve<IPrototypeManager>(),
                    IoCManager.Resolve<IResourceCache>());
                manager.OpenCommand(window);
            }
        }

        private class SpawnTilesCommandButton : AdminMenuControls.CommandButton
        {
            public override string Name => "Spawn Tiles";

            //TODO: override CanPress
            public override void ButtonPressed(BaseButton.ButtonEventArgs args)
            {
                var manager = IoCManager.Resolve<IAdminMenuManager>();
                var window = new TileSpawnWindow(IoCManager.Resolve<ITileDefinitionManager>(),
                    IoCManager.Resolve<IPlacementManager>(),
                    IoCManager.Resolve<IResourceCache>());
                manager.OpenCommand(window);
            }
        }

        private class StationEventsCommandButton : AdminMenuControls.UICommandButton
        {
            public override string Name => "Station Events";
            public override string RequiredCommand => "events";
            public override string? SubmitText => "Run";

            private readonly AdminMenuControls.CommandUIDropDown _eventsDropDown = new()
            {
                Name = "Event",
                GetData = () =>
                {
                    var events = IoCManager.Resolve<IStationEventManager>().StationEvents.ToList();
                    if (events.Count == 0)
                        events.Add(Loc.GetString("Not loaded"));
                    else
                        events.Add(Loc.GetString("Random"));
                    return events.ToList<object>();
                },
                GetDisplayName = (obj) => (string) obj,
                                                       GetValueFromData = (obj) => ((string) obj).ToLower(),
            };

            public override List<AdminMenuControls.CommandUIControl> UI => new()
            {
                _eventsDropDown,
                new AdminMenuControls.CommandUIButton
                {
                    Name = "Pause",
                    Handler = () =>
                    {
                        IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand("events pause");
                    },
                },
                new AdminMenuControls.CommandUIButton
                {
                    Name = "Resume",
                    Handler = () =>
                    {
                        IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand("events resume");
                    },
                },
            };

            public override void Submit()
            {
                IoCManager.Resolve<IClientConsoleHost>().ExecuteCommand($"events run \"{_eventsDropDown.GetValue()}\"");
            }
        }

        #endregion
    }
}
