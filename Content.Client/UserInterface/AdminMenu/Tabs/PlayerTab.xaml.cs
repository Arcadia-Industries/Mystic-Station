#nullable enable

using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.Maths;

namespace Content.Client.UserInterface.AdminMenu.Tabs
{
    [GenerateTypedNameReferences]
    public partial class PlayerTab : MarginContainer
    {
        public PlayerTab()
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);
            RefreshButton.OnPressed += RefreshPlayerList;
            RefreshPlayerList(null!);
        }

        private void RefreshPlayerList(BaseButton.ButtonEventArgs args)
        {
            PlayerList.RemoveAllChildren();
            var playerManager = IoCManager.Resolve<IPlayerManager>();
            var sessions = playerManager.Sessions;
            PlayerCount.Text = $"Players: {playerManager.PlayerCount}";

            var altColor = Color.FromHex("#292B38");
            var defaultColor = Color.FromHex("#2F2F3B");

            var header = new HBoxContainer
            {
                SizeFlagsHorizontal = SizeFlags.FillExpand,
                SeparationOverride = 4,
                Children =
                {
                    new Label
                    {
                        Text = "Name",
                        SizeFlagsStretchRatio = 2f,
                        SizeFlagsHorizontal = SizeFlags.FillExpand
                    },
                    new VSeparator(),
                    new Label
                    {
                        Text = "Player",
                        SizeFlagsStretchRatio = 2f,
                        SizeFlagsHorizontal = SizeFlags.FillExpand
                    },
                    new VSeparator(),
                    new Label
                    {
                        Text = "Status",
                        SizeFlagsStretchRatio = 1f,
                        SizeFlagsHorizontal = SizeFlags.FillExpand
                    },
                    new VSeparator(),
                    new Label
                    {
                        Text = "Ping",
                        SizeFlagsStretchRatio = 1f,
                        SizeFlagsHorizontal = SizeFlags.FillExpand,
                        Align = Label.AlignMode.Right
                    },
                }
            };
            PlayerList.AddChild(new PanelContainer
            {
                PanelOverride = new StyleBoxFlat
                {
                    BackgroundColor = altColor,
                },
                Children =
                {
                    header
                }
            });
            PlayerList.AddChild(new HSeparator());

            var useAltColor = false;
            foreach (var player in sessions)
            {
                var hbox = new HBoxContainer
                {
                    SizeFlagsHorizontal = SizeFlags.FillExpand,
                    SeparationOverride = 4,
                    Children =
                    {
                        new Label
                        {
                            Text = player.Name,
                            SizeFlagsStretchRatio = 2f,
                            SizeFlagsHorizontal = SizeFlags.FillExpand,
                            ClipText = true
                        },
                        new VSeparator(),
                        new Label
                        {
                            Text = player.AttachedEntity?.Name,
                            SizeFlagsStretchRatio = 2f,
                            SizeFlagsHorizontal = SizeFlags.FillExpand,
                            ClipText = true
                        },
                        new VSeparator(),
                        new Label
                        {
                            Text = player.Status.ToString(),
                            SizeFlagsStretchRatio = 1f,
                            SizeFlagsHorizontal = SizeFlags.FillExpand
                        },
                        new VSeparator(),
                        new Label
                        {
                            Text = player.Ping.ToString(),
                            SizeFlagsStretchRatio = 1f,
                            SizeFlagsHorizontal = SizeFlags.FillExpand,
                            Align = Label.AlignMode.Right
                        },
                    }
                };
                PlayerList.AddChild(new PanelContainer
                {
                    PanelOverride = new StyleBoxFlat
                    {
                        BackgroundColor = useAltColor ? altColor : defaultColor,
                    },
                    Children =
                    {
                        hbox
                    }
                });
                useAltColor ^= true;
            }
        }

        private static readonly Color SeparatorColor = Color.FromHex("#3D4059");

        private class VSeparator : PanelContainer
        {
            public VSeparator()
            {
                CustomMinimumSize = (2, 5);
                AddChild(new PanelContainer
                {
                    PanelOverride = new StyleBoxFlat
                    {
                        BackgroundColor = SeparatorColor
                    }
                });
            }
        }

        private class HSeparator : Control
        {
            public HSeparator()
            {
                AddChild(new PanelContainer
                {
                    PanelOverride = new StyleBoxFlat
                    {
                        BackgroundColor = SeparatorColor,
                        ContentMarginBottomOverride = 2, ContentMarginLeftOverride = 2
                    }
                });
            }
        }
    }
}
