using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Controls
{
    [GenerateTypedNameReferences]
    public partial class ForegroundImageContainer : Container //<todo.eoin Rename this
    {
        public const string StylePropertyForegroundPanelStyle = "ForegroundPanelStyle";
        public const string StylePropertyForegroundContentMargin = "ForegroundContentMargin";
        public const string StylePropertyBackgroundStyleBox = "BackgroundStyleBox";
        public const string StylePropertyBackgroundModulate = "BackgroundModulate";

        private string? _foregroundImagePath = null;
        private Thickness _foregroundPatch = new();
        private Vector2 _foregroundScale = Vector2.One; //<todo.eoin Would like this to be able to override the stylebox
        private StyleBoxTexture? _styleBox = null;

        // PanelRaisedHighlight
        // AngleRectEmbedded
        public string ForegroundPanelStyle
        {
            set => ForegroundContainer.SetOnlyStyleClass(value);
        }

        public Thickness ForegroundMargin
        {
            get => ContentsContainer.Margin;
            set => ContentsContainer.Margin = value;
        }

        public string? ForegroundImagePath
        {
            get => _foregroundImagePath;
            set
            {
                _foregroundImagePath = value;
                recalculateStyleBox();
            }
        }

        public Thickness ForegroundPatch
        {
            get => _foregroundPatch;
            set
            {
                _foregroundPatch = value;
                recalculateStyleBox();
            }
        }

        public Vector2 ForegroundScale
        {
            get => _foregroundScale;
            set
            {
                _foregroundScale = value;
                recalculateStyleBox();
            }
        }

        public Color? ForegroundModulate
        {
            get => ForegroundContainer.ModulateSelfOverride;
            set => ForegroundContainer.ModulateSelfOverride = value;
        }

        private void recalculateStyleBox()
        {
            if (_foregroundImagePath == null)
            {
                ForegroundContainer.PanelOverride = null;
                return;
            }

            var resCache = IoCManager.Resolve<IResourceCache>();
            var foregroundImage = resCache.GetResource<TextureResource>(_foregroundImagePath);
            ForegroundContainer.PanelOverride = new StyleBoxTexture
            {
                Texture = foregroundImage,
                TextureScale = _foregroundScale,
                PatchMarginLeft = _foregroundPatch.Left,
                PatchMarginBottom = _foregroundPatch.Bottom,
                PatchMarginRight = _foregroundPatch.Right,
                PatchMarginTop = _foregroundPatch.Top
            };
        }

        public ForegroundImageContainer()
        {
            RobustXamlLoader.Load(this);
            XamlChildren = ContentsContainer.Children;
        }

        protected override void StylePropertiesChanged()
        {
            //<todo.eoin Make a stylebox, instead
            if (TryGetStyleProperty<string>(StylePropertyForegroundPanelStyle, out var foregroundStyle))
            {
                ForegroundPanelStyle = foregroundStyle;
            }

            //<todo.eoin Rename
            if (TryGetStyleProperty<Thickness>(StylePropertyForegroundContentMargin, out var foregroundMargin))
            {
                ForegroundMargin = foregroundMargin;
            }

            if (TryGetStyleProperty<StyleBox>(StylePropertyBackgroundStyleBox, out var backgroundStyleBox))
            {
                BackgroundContainer.PanelOverride = backgroundStyleBox;
            }

            if (TryGetStyleProperty<Color>(StylePropertyBackgroundModulate, out var backgroundModulate))
            {
                BackgroundContainer.ModulateSelfOverride = backgroundModulate;
            }

         }

    }
}
