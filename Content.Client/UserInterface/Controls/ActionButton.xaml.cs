using Content.Shared.Actions.ActionTypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Input;

namespace Content.Client.UserInterface.Controls;

[GenerateTypedNameReferences]
public sealed partial class ActionButton : Control
{
    public BoundKeyFunction? KeyBind
    {
        set
        {
            _keybind = value;
            if (_keybind != null)
            {
                Label.Text = BoundKeyHelper.ShortKeyName(_keybind.Value);
            }
        }
    }

    private BoundKeyFunction? _keybind;

    public Texture? IconTexture
    {
        get => Icon.Texture;
        private set => Icon.Texture = value;
    }

    public ActionType? Action { get; private set; }

    public event Action<GUIBoundKeyEventArgs, ActionButton>? ActionPressed;
    public event Action<GUIBoundKeyEventArgs, ActionButton>? ActionUnpressed;
    public event Action<ActionButton>? ActionFocusExited;

    public ActionButton()
    {
        RobustXamlLoader.Load(this);

        Button.Texture = Theme.ResolveTexture("SlotBackground");
        Button.Modulate = new Color(255, 255, 255, 150);

        Icon.Modulate = new Color(255, 255, 255, 150);

        Label.FontColorOverride = Theme.ResolveColorOrSpecified("whiteText");

        OnKeyBindDown += OnPressed;
        OnKeyBindUp += OnUnpressed;
    }

    private void OnPressed(GUIBoundKeyEventArgs args)
    {
        ActionPressed?.Invoke(args, this);
    }

    private void OnUnpressed(GUIBoundKeyEventArgs args)
    {
        ActionUnpressed?.Invoke(args, this);
    }

    protected override void ControlFocusExited()
    {
        ActionFocusExited?.Invoke(this);
    }

    public void UpdateData(IEntityManager entityManager, ActionType action)
    {
        Action = action;

        if (action.Provider == null || !entityManager.TryGetComponent(action.Provider.Value, out SpriteComponent sprite))
        {
            if (action.Icon != null)
            {
                IconTexture = action.Icon.Frame0();
            }
            Sprite.Sprite = null;
        }
        else
        {
            Sprite.Sprite = sprite;
        }
    }

    public void ClearData()
    {
        Action = null;
        IconTexture = null;
        Sprite.Sprite = null;
    }
}
