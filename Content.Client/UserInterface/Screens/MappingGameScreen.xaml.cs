using Content.Client.Markers;
using Content.Client.SubFloor;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Screens;

[GenerateTypedNameReferences]
public sealed partial class MappingGameScreen : UIScreen
{
    [Dependency] private readonly IEntitySystemManager _entSys = default!;

    public MappingGameScreen()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        AutoscaleMaxResolution = new Vector2i(1080, 770);

        SetAnchorPreset(InnerScreenContainer, LayoutPreset.Wide);
        SetAnchorPreset(ScreenContainer, LayoutPreset.Wide);
        SetAnchorPreset(MainViewport, LayoutPreset.Wide);
        SetAnchorPreset(ViewportContainer, LayoutPreset.Wide);
    }

    protected override void OnLoaded()
    {
        MappingMenu.Menus.Add(new MenuBar.Menu()
        {
            Title = Loc.GetString("mapping-menus-file"),
            Entries =
            {
                new MenuBar.MenuButton()
                {
                    Text = Loc.GetString("mapping-menus-file-new"),
                    OnPressed = OnNewMap
                },
                new MenuBar.MenuButton()
                {
                    Text = Loc.GetString("mapping-menus-file-open"),
                },
                new MenuBar.MenuSeparator(),
                new MenuBar.MenuButton()
                {
                    Text = Loc.GetString("mapping-menus-file-exit-mapping-scene"),
                },
                new MenuBar.MenuButton()
                {
                    Text = Loc.GetString("mapping-menus-file-disconnect"),
                },
                new MenuBar.MenuButton()
                {
                    Text = Loc.GetString("mapping-menus-file-quit"),
                }
            }
        });

        RebuildVisibilityMenu();
        MappingMenu.Menus.Add(VisibilityMenu);
    }

    private MenuBar.Menu VisibilityMenu = new()
    {
        Title = Loc.GetString("mapping-menus-file-visibility"),
    };

    private bool SubfloorVisibility
    {
        get => _entSys.GetEntitySystem<SubFloorHideSystem>().ShowAll;
        set => _entSys.GetEntitySystem<SubFloorHideSystem>().ShowAll = value;
    }

    private bool MarkersVisibility
    {
        get => _entSys.GetEntitySystem<MarkerSystem>().MarkersVisible;
        set => _entSys.GetEntitySystem<MarkerSystem>().MarkersVisible = value;
    }

    private void RebuildVisibilityMenu()
    {
        VisibilityMenu.Entries.Clear();
        VisibilityMenu.Entries.Add(new MenuBar.MenuButton()
        {
            Text = Loc.GetString("mapping-menus-visibility-markers", ("value", MarkersVisibility)),
            OnPressed = () =>
            {
                MarkersVisibility ^= true;
                RebuildVisibilityMenu();
            }
        });

        VisibilityMenu.Entries.Add(new MenuBar.MenuButton()
        {
            Text = Loc.GetString("mapping-menus-visibility-subfloor", ("value", SubfloorVisibility)),
            OnPressed = () =>
            {
                SubfloorVisibility ^= true;
                RebuildVisibilityMenu();
            }
        });
    }

    private void OnNewMap()
    {
        throw new NotImplementedException();
    }
}
