using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        public Dictionary<EntityUid, string> Players { get; set; } = new();
        public List<string> Locations { get; set; } = new();

        public event Action<EntityUid>? PlayerClicked;
        public event Action<string>? LocationClicked;

        public GhostTargetWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate()
        {
            ButtonContainer.DisposeAllChildren();
            AddButtonPlayers();
            AddButtonLocations();
        }

        private void AddButtonPlayers()
        {
            var sortedPlayers = new List<(string, EntityUid)>(Players.Count);

            foreach (var (key, player) in Players)
            {
                sortedPlayers.Add((player, key));
            }

            sortedPlayers.Sort((x, y) => string.Compare(x.Item1, y.Item1, StringComparison.Ordinal));

            foreach (var (key, player) in sortedPlayers)
            {
                var currentButtonRef = new Button
                {
                    Text = key,
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    MinSize = (340, 20),
                    ClipText = true,
                };

                currentButtonRef.OnPressed += _ => PlayerClicked?.Invoke(player);
                ButtonContainer.AddChild(currentButtonRef);
            }
        }

        private void AddButtonLocations()
        {
            // Server COULD send these sorted but how about we just use the client to do it instead.
            var sortedLocations = new List<string>(Locations);
            sortedLocations.Sort((x, y) => string.Compare(x, y, StringComparison.Ordinal));

            foreach (var name in sortedLocations)
            {
                var currentButtonRef = new Button
                {
                    Text = Loc.GetString("ghost-target-window-current-button", ("name", name)),
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Center,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    MinSize = (340, 20),
                    ClipText = true,
                };

                currentButtonRef.OnPressed += _ => LocationClicked?.Invoke(name);
                ButtonContainer.AddChild(currentButtonRef);
            }
        }
    }
}
