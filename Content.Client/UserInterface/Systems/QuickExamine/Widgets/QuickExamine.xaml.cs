using Content.Client.Examine;
using Content.Client.Gameplay;
using Content.Shared.IdentityManagement;
using Robust.Client.AutoGenerated;
using Robust.Client.Input;
using Robust.Client.Player;
using Robust.Client.State;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Systems.QuickExamine.Widgets;

[GenerateTypedNameReferences]
public sealed partial class QuickExamine : UIWidget
{
    [Dependency] private readonly IInputManager _inputManager = default!;
    [Dependency] private readonly IUserInterfaceManager _uiManager = default!;
    [Dependency] private readonly IStateManager _stateManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPlayerManager _playerManager = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = default!;

    public QuickExamine()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var currentState = _stateManager.CurrentState;

        if (currentState is not GameplayState screen) return;

        if (_uiManager.CurrentlyHovered is IViewportControl vp
            && _inputManager.MouseScreenPosition.IsValid)
        {
            var mousePosWorld = vp.ScreenToMap(_inputManager.MouseScreenPosition.Position);
            var entityToClick = screen.GetEntityUnderPosition(mousePosWorld);

            var newText = string.Empty;
            var controlledEntity = _playerManager.LocalPlayer?.ControlledEntity;
            if (entityToClick != null && controlledEntity != null)
            {
                var entityText = Identity.Name(entityToClick.Value, _entityManager);
                if (QuickExamineLabel.Text == entityText)
                {
                    return;
                }

                // Using mousePosWorld seems to lead to weird behaviour with distant fire extinguisher cabinets?
                if (_entitySystemManager.GetEntitySystem<ExamineSystem>().CanExamine(controlledEntity.Value, mousePosWorld, examined: entityToClick.Value)) // TODO predicate?
                {
                    newText = Identity.Name(entityToClick.Value, _entityManager);
                }
            }

            if (QuickExamineLabel.Text != newText)
            {
                QuickExamineLabel.Text = newText;
            }
        }
    }
}
