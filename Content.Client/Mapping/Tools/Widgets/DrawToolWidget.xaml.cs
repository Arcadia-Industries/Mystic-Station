using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Mapping.Tools.Widgets;

[GenerateTypedNameReferences]
public sealed partial class DrawToolWidget : UIWidget, IDrawingLikeToolConfiguration
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;

    private float _rotation;
    public float Rotation
    {
        get => _rotation;
        set
        {
            _rotation = value % 360.0f;
            RotationEdit.OverrideValue((int)_rotation);
        }
    }

    public float RotationAdjust { get; set; } = 90.0f;
    public string Prototype { get; set; } = "WallSolid";

    public DrawToolWidget()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
        RotationEdit.ClearButtons();
        // if someone wants integer versions yell at someone to make FloatSpinBox
        RotationEdit.AddLeftButton (-45, "-45");
        RotationEdit.AddRightButton(+45, "+45");
        RotationEdit.Value = (int)_rotation;
        RotationEdit.ValueChanged += RotationEditOnValueChanged;
        RotationAdjustEdit.Value = (int)RotationAdjust;
        RotationAdjustEdit.ValueChanged += RotationAdjustEditOnValueChanged;
        PrototypeEdit.OnTextChanged += PrototypeEditOnTextChanged;
    }

    private void PrototypeEditOnTextChanged(LineEdit.LineEditEventArgs obj)
    {
        if (!_prototype.HasIndex<EntityPrototype>(obj.Text))
            return;
        Prototype = obj.Text;
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        RotationEdit.ValueChanged -= RotationEditOnValueChanged;
    }

    private void RotationEditOnValueChanged(object? sender, ValueChangedEventArgs e)
    {
        Rotation = e.Value;
    }

    private void RotationAdjustEditOnValueChanged(object? sender, ValueChangedEventArgs e)
    {
        RotationAdjust = e.Value;
    }

}
