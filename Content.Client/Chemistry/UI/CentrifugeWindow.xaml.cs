using System.Linq;
using Content.Client.Stylesheets;
using Content.Shared.Chemistry;
using Content.Shared.Chemistry.Reagent;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using static Robust.Client.UserInterface.Controls.BoxContainer;

namespace Content.Client.Chemistry.UI
{
    /// <summary>
    /// Client-side UI used to control a <see cref="SharedCentrifugeComponent"/>
    /// </summary>
    [GenerateTypedNameReferences]
    public sealed partial class CentrifugeWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        public event Action<BaseButton.ButtonEventArgs, CentrifugeReagentButton>? OnCentrifugeReagentButtonPressed;

        /// <summary>
        /// Create and initialize the UI client-side.
        /// </summary>
        public CentrifugeWindow()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
        }

        private CentrifugeReagentButton MakeCentrifugeReagentButton(string text, CentrifugeReagentAmount amount, string id, bool isBuffer, string styleClass)
        {
            var button = new CentrifugeReagentButton(text, amount, id, isBuffer, styleClass);
            button.OnPressed += args
                => OnCentrifugeReagentButtonPressed?.Invoke(args, button);
            return button;
        }

        /// <summary>
        /// Update the UI state when new state data is received from the server.
        /// </summary>
        /// <param name="state">State data sent by the server.</param>
        public void UpdateState(BoundUserInterfaceState state)
        {
            var castState = (CentrifugeBoundUserInterfaceState) state;
            
            UpdatePanelInfo(castState);

            var output = castState.OutputContainerInfo;
            var input = castState.InputContainerInfo;

            //BufferCurrentVolume.Text = $" {castState.BufferCurrentVolume?.Int() ?? 0}u";

            InputEjectButton.Disabled = input is null;
            OutputEjectButton.Disabled = output is null;

            var remainingCapacity = output is null ? 0 : (output.MaxVolume - output.CurrentVolume).Int();
            var holdsReagents = output?.HoldsReagents ?? false;
        }

        /// <summary>
        /// Update the container, buffer, and output panels.
        /// </summary>
        /// <param name="state">State data for the dispenser.</param>
        private void UpdatePanelInfo(CentrifugeBoundUserInterfaceState state)
        {
            BufferTransferButton.Pressed = state.Mode == Shared.Chemistry.CentrifugeMode.Transfer;
            BufferDiscardButton.Pressed = state.Mode == Shared.Chemistry.CentrifugeMode.Discard;

            BuildContainerUI(InputContainerInfo, state.InputContainerInfo);
            BuildContainerUI(OutputContainerInfo, state.OutputContainerInfo);

            BufferInfo.Children.Clear();

            if (!state.BufferReagents.Any())
            {
                BufferInfo.Children.Add(new Label { Text = Loc.GetString("chem-master-window-buffer-empty-text") });

                return;
            }

            var bufferHBox = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal
            };
            BufferInfo.AddChild(bufferHBox);

            var bufferLabel = new Label { Text = $"{Loc.GetString("chem-master-window-buffer-label")} " };
            bufferHBox.AddChild(bufferLabel);
            var bufferVol = new Label
            {
                Text = $"{state.BufferCurrentVolume}u",
                StyleClasses = {StyleNano.StyleClassLabelSecondaryColor}
            };
            bufferHBox.AddChild(bufferVol);

            foreach (var reagent in state.BufferReagents)
            {
                // Try to get the prototype for the given reagent.
                _prototypeManager.TryIndex(reagent.ReagentId, out ReagentPrototype? proto);
                var name = proto?.LocalizedPhysicalDescription ?? Loc.GetString("chem-master-window-unknown-reagent-text");

                if (proto != null)
                {
                    BufferInfo.Children.Add(new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        Children =
                        {
                            new Label {Text = $"{name}: "},
                            new Label
                            {
                                Text = $"{reagent.Quantity}u",
                                StyleClasses = {StyleNano.StyleClassLabelSecondaryColor}
                            },

                            // Padding
                            new Control {HorizontalExpand = true},

                            MakeCentrifugeReagentButton("1", CentrifugeReagentAmount.U1, reagent.ReagentId, true, StyleBase.ButtonOpenRight),
                            MakeCentrifugeReagentButton("5", CentrifugeReagentAmount.U5, reagent.ReagentId, true, StyleBase.ButtonOpenBoth),
                            MakeCentrifugeReagentButton("10", CentrifugeReagentAmount.U10, reagent.ReagentId, true, StyleBase.ButtonOpenBoth),
                            MakeCentrifugeReagentButton("25", CentrifugeReagentAmount.U25, reagent.ReagentId, true, StyleBase.ButtonOpenBoth),
                            MakeCentrifugeReagentButton(Loc.GetString("chem-master-window-buffer-all-amount"), CentrifugeReagentAmount.All, reagent.ReagentId, true, StyleBase.ButtonOpenLeft),
                        }
                    });
                }
            }
        }

        private void BuildContainerUI(Control control, CentrifugeContainerInfo? info)
        {
            control.Children.Clear();

            if (info is null)
            {
                control.Children.Add(new Label
                {
                    Text = Loc.GetString("chem-master-window-no-container-loaded-text")
                });
            }
            else
            {
                // Name of the container and its fill status (Ex: 44/100u)
                control.Children.Add(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children =
                    {
                        new Label {Text = $"{info.DisplayName}: "},
                        new Label
                        {
                            Text = $"{info.CurrentVolume}/{info.MaxVolume}",
                            StyleClasses = {StyleNano.StyleClassLabelSecondaryColor}
                        }
                    }
                });

                var contents = info.Contents
                    .Select(lineItem =>
                    {
                        if (!info.HoldsReagents)
                            return (lineItem.Id, lineItem.Id, lineItem.Quantity);

                        // Try to get the prototype for the given reagent.
                        _prototypeManager.TryIndex(lineItem.Id, out ReagentPrototype? proto);
                        var name = proto?.LocalizedPhysicalDescription
                                   ?? Loc.GetString("chem-master-window-unknown-reagent-text");

                        return (name, lineItem.Id, lineItem.Quantity);

                    })
                    .OrderBy(r => r.Item1);

                foreach (var (name, id, quantity) in contents)
                {
                    var inner = new BoxContainer
                    {
                        Orientation = LayoutOrientation.Horizontal,
                        Children =
                        {
                            new Label { Text = $"{name}: " },
                            new Label
                            {
                                Text = $"{quantity}u",
                                StyleClasses = { StyleNano.StyleClassLabelSecondaryColor },
                            }
                        }
                    };

                    control.Children.Add(inner);
                }

            }
        }
    }

    public sealed class CentrifugeReagentButton : Button
    {
        public CentrifugeReagentAmount Amount { get; set; }
        public bool IsBuffer = true;
        public string Id { get; set; }
        public CentrifugeReagentButton(string text, CentrifugeReagentAmount amount, string id, bool isBuffer, string styleClass)
        {
            AddStyleClass(styleClass);
            Text = text;
            Amount = amount;
            Id = id;
            IsBuffer = isBuffer;
        }
    }
}
