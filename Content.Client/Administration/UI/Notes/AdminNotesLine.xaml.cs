using Content.Client.Resources;
using Content.Shared.Administration.Notes;
using Content.Shared.Database;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Input;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.Notes;

[GenerateTypedNameReferences]
public sealed partial class AdminNotesLine : BoxContainer
{
    private readonly SpriteSystem _sprites;

    private const string AdminNotesTextureBase = "/Textures/Interface/AdminNotes/";
    private static readonly Dictionary<NoteSeverity, string> SeverityIcons = new()
    {
        { NoteSeverity.None, AdminNotesTextureBase + "none_button.png" },
        { NoteSeverity.Minor, AdminNotesTextureBase + "minor_button.png" },
        { NoteSeverity.Medium, AdminNotesTextureBase + "medium_button.png" },
        { NoteSeverity.High, AdminNotesTextureBase + "high_button.png" },
    };
    private static readonly Dictionary<NoteType, string> NoteTypeIcons = new()
    {
        { NoteType.Message, AdminNotesTextureBase + "message.png" },
        { NoteType.Watchlist, AdminNotesTextureBase + "watchlist.png" },
    };

    public AdminNotesLine(SpriteSystem sprites, SharedAdminNote note)
    {
        _sprites = sprites;
        RobustXamlLoader.Load(this);

        Note = note;
        MouseFilter = MouseFilterMode.Pass;

        Separator.Visible = true;
        Refresh();
    }

    public SharedAdminNote Note { get; private set; }
    public int Id => Note.Id;

    public event Func<AdminNotesLine, bool>? OnClicked;

    /// <summary>
    /// Attempts to refresh the current note line with new data. The note it draws data on is stored in <see cref="Note"/>
    /// </summary>
    private void Refresh()
    {
        string? iconPath;
        if(Note.NoteType == NoteType.Note)
            SeverityIcons.TryGetValue(Note.NoteSeverity, out iconPath);
        else
            NoteTypeIcons.TryGetValue(Note.NoteType, out iconPath);

        if (iconPath is null)
        {
            SeverityRect.Visible = false;
            Logger.WarningS("admin.notes", $"Could not find an icon for note ID {Note.Id}");
        }
        else
        {
            SeverityRect.Texture = _sprites.Frame0(new SpriteSpecifier.Texture(new ResourcePath(iconPath)));
        }

        TimeLabel.Text = Note.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss");
        ServerLabel.Text = Note.ServerName ?? "Unknown";
        RoundLabel.Text = Note.Round == null ? "Unknown round" : "Round " + Note.Round;
        AdminLabel.Text = Note.CreatedByName;
        PlaytimeLabel.Text = $"{Note.PlaytimeAtNote.TotalHours: 0.0}h";

        if (Note.Secret)
        {
            SecretSeparator.Visible = true;
            SecretLabel.Visible = true;
        }

        if (Note.ExpiryTime is not null)
        {
            ExpiresLabel.Text = $"{Loc.GetString("admin-note-editor-expiry-label")} {Note.ExpiryTime.Value: yyyy-MM-dd HH:mm:ss} (in {Note.ExpiryTime.Value - DateTime.UtcNow:d'd 'hh':'mm})";
            ExpiresLabel.Visible = true;
        }

        NoteLabel.SetMessage(Note.Message);
    }

    protected override void KeyBindDown(GUIBoundKeyEventArgs args)
    {
        base.KeyBindDown(args);

        if (args.Function != EngineKeyFunctions.UIRightClick &&
            args.Function != EngineKeyFunctions.UIClick)
        {
            return;
        }

        if (OnClicked?.Invoke(this) == true)
        {
            args.Handle();
        }
    }

    public void UpdateNote(SharedAdminNote note)
    {
        Note = note;
        Refresh();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (!disposing)
        {
            return;
        }

        OnClicked = null;
    }
}
