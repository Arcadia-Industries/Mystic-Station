using Content.Shared.Chemistry.Components.SolutionManager;
using Content.Shared.Chemistry.EntitySystems;
using Robust.Client.AutoGenerated;
using Robust.Client.Console;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Prototypes;
using System;

namespace Content.Client.Administration.UI.ManageSolutions
{
    [GenerateTypedNameReferences]
    public sealed partial class ManageSolutionsWindow : SS14Window
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly IClientConsoleHost _consoleHost = default!;
        [Dependency] private readonly IEntityManager _entityManager = default!;
        private readonly SolutionContainerSystem _solutionContainerSystem = default!;

        public readonly EntityUid Target;
        private string? _selectedSolution;
        private AddReagentWindow? _addReagentWindow;

        public ManageSolutionsWindow(EntityUid target)
        {
            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            _solutionContainerSystem = EntitySystem.Get<SolutionContainerSystem>();

            Target = target;

            SolutionOption.OnItemSelected += SolutionSelected;
            AddButton.OnPressed += OpenAddReagentWindow;

            UpdateSolutions();
            UpdateReagents();
        }

        public void UpdateReagents()
        {
            ReagentList.DisposeAllChildren();

            if (_selectedSolution == null)
                return;

            if (!_solutionContainerSystem.TryGetSolution(Target, _selectedSolution, out var solution))
                return;

            foreach (var reagent in solution)
            {
                ReagentList.AddChild(new Label() { Text = reagent.ReagentId });
            }
        }

        private void OpenAddReagentWindow(BaseButton.ButtonEventArgs obj)
        {
            if (string.IsNullOrEmpty(_selectedSolution))
                return;

            _addReagentWindow?.Close();
            _addReagentWindow?.Dispose();

            _addReagentWindow = new AddReagentWindow(Target, _selectedSolution);
            _addReagentWindow.OpenCentered();
        }

        private void SolutionSelected(OptionButton.ItemSelectedEventArgs args)
        {
            SolutionOption.SelectId(args.Id);
            _selectedSolution = (string?) SolutionOption.SelectedMetadata;
            _addReagentWindow?.UpdateSolution(_selectedSolution);
        }

        private void UpdateSolutions()
        {
            SolutionOption.Clear();
            if (_entityManager.TryGetComponent(Target, out SolutionContainerManagerComponent manager))
            {
                int i = 0;
                foreach (var solution in manager.Solutions.Keys)
                {
                    SolutionOption.AddItem(solution, i);
                    SolutionOption.SetItemMetadata(i, solution);
                    i++;
                }
            }

            if (SolutionOption.ItemCount == 0)
            {
                // No applicable solutions
                Close();
                Dispose();
            }

            SolutionOption.Select(0);
            _selectedSolution = (string?) SolutionOption.SelectedMetadata;
        }
    }
}
