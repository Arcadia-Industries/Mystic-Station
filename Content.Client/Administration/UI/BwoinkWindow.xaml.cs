#nullable enable
using System.Text;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;

namespace Content.Client.Administration.UI
{
    /// <summary>
    /// This window connects to a BwoinkSystem channel. BwoinkSystem manages the rest.
    /// </summary>
    [GenerateTypedNameReferences]
    public partial class BwoinkWindow : SS14Window
    {
        private readonly BwoinkSystem _bwoinkSystem;
        public BwoinkWindow(BwoinkSystem bs)
        {
            RobustXamlLoader.Load(this);
            _bwoinkSystem = bs;

            ChannelSelector.OnSelectionChanged += sel =>
            {
                if (sel is not null)
                    SwitchToChannel(sel.SessionId);

                foreach (var li in ChannelSelector.PlayerItemList)
                    li.Text = FormatTabTitle(li);
            };

            ChannelSelector.DecoratePlayer += (PlayerInfo pl, ItemList.Item li) =>
            {
                li.Text = FormatTabTitle(li, pl);
            };
        }

        private string FormatTabTitle(ItemList.Item li, PlayerInfo? pl = default)
        {
            pl ??= (PlayerInfo) li.Metadata!;
            var sb = new StringBuilder();
            sb.Append(pl.Connected ? '●' : '○');
            sb.Append(' ');
            if (_bwoinkSystem.TryGetChannel(pl.SessionId, out var panel) && panel.Unread > 0)
            {
                if (panel.Unread < 11)
                    sb.Append(new Rune('➀' + (panel.Unread-1)));
                else
                    sb.Append(new Rune(0x2639)); // ☹
                sb.Append(' ');
            }

            if (pl.Antag)
                sb.Append(new Rune(0x1F5E1)); // 🗡

            sb.AppendFormat("\"{0}\"", pl.CharacterName)
                .Append(' ')
                .Append(pl.Username);

            return sb.ToString();
        }

        public void SwitchToChannel(NetUserId ch)
        {
            foreach (var bw in BwoinkArea.Children)
                bw.Visible = false;

            var np = _bwoinkSystem.EnsurePanel(ch);
            if (!BwoinkArea.Children.Contains(np))
                BwoinkArea.AddChild(np);

            np.Visible = true;
        }
    }
}
