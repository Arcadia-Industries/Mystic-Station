#nullable enable
using Robust.Client.AutoGenerated;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.IoC;
using Robust.Shared.GameObjects;
using Robust.Shared.Network;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.CustomControls
{
    [GenerateTypedNameReferences]
    public partial class BwoinkPanel : BoxContainer
    {
        [Dependency] private readonly IPlayerManager _playerManager = default!;

        private readonly BwoinkSystem _bwoinkSystem;
        private readonly NetUserId _channelId;
        private readonly string _channelName;

        public BwoinkPanel(BwoinkSystem bwoinkSys, NetUserId userId, string channelName)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);
            _bwoinkSystem = bwoinkSys;
            _channelId = userId;
            _channelName = channelName;

            OnVisibilityChanged += _ => UpdateTitle();
            SenderLineEdit.OnTextEntered += Input_OnTextEntered;
        }

        protected override void Parented(Control? newParent)
        {
            if (newParent is null)
            {
                base.Deparented();
                return;
            }

            base.Parented(newParent);
            UpdateTitle();
        }

        private void UpdateTitle()
        {
            for (var p = Parent; p is not null; p = p.Parent)
            {
                if (p is SS14Window np)
                {
                    np.Title = (_playerManager.LocalPlayer?.UserId == _channelId) ? "Admin Message" : _channelName;
                    return;
                }
            }
        }

        private void Input_OnTextEntered(LineEdit.LineEditEventArgs args)
        {
            if (!string.IsNullOrWhiteSpace(args.Text))
                _bwoinkSystem.Send(_channelId, args.Text);

            SenderLineEdit.Clear();
        }

        public void ReceiveLine(string text)
        {
            var formatted = new FormattedMessage(1);
            formatted.AddMarkup(text);
            TextOutput.AddMessage(formatted);
        }
    }
}
