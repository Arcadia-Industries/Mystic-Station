#nullable enable
using Content.Shared.Administration;
using static Content.Shared.Administration.SharedBwoinkSystem;
using static Content.Client.Administration.BwoinkSystem;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.Administration.UI.CustomControls
{
    [GenerateTypedNameReferences]
    public partial class BwoinkPanel : BoxContainer
    {
        public readonly AHelpState _ahs;

        public BwoinkPanel(AHelpState ahs)
        {
            RobustXamlLoader.Load(this);

            _ahs = ahs;

            OnVisibilityChanged += c =>
            {
                if (c.Visible)
                    _ahs.MarkRead();
            };
            SenderLineEdit.OnTextEntered += Input_OnTextEntered;
        }

        private void Input_OnTextEntered(LineEdit.LineEditEventArgs args)
        {
            if (string.IsNullOrWhiteSpace(args.Text))
                return;

            _ahs.Send(args.Text);
            SenderLineEdit.Clear();
        }

        public void ClearMessages() => TextOutput.Clear();

        public void ReceiveMessage(SharedBwoinkSystem.BwoinkTextMessage message)
        {
            if (Visible && message.Status != Status.Read)
                _ahs.MarkRead();

            var formatted = new FormattedMessage(1);
            formatted.AddMarkup($"[color=gray]{message.SentAt.ToShortTimeString()}[/color] {message.Text}");
            TextOutput.AddMessage(formatted);
        }
    }
}
