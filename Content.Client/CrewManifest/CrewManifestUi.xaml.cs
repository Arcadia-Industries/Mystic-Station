using System.Linq;
using Content.Shared.CCVar;
using Content.Shared.CrewManifest;
using Robust.Client.AutoGenerated;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;

namespace Content.Client.CrewManifest;

/// <summary>
///     Crew manifest window. This is intended to be opened by other UIs, and as a result,
///     those UIs should ensure any controller registers this window with the intended
///     station it's meant to track.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class CrewManifestUi : DefaultWindow
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = default!;
    [Dependency] private readonly IConfigurationManager _configManager = default!;

    private EntityUid? _station;

    public CrewManifestUi()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        StationName.AddStyleClass("LabelBig");
    }

    public override void Close()
    {
        base.Close();

        // ?
        Dispose(true);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

    public void Register(EntityUid station)
    {
        if (_station != null)
        {
            return;
        }

        _station = station;
    }

    public void Populate(string name, CrewManifestEntries? entries)
    {
        CrewManifestListing.DisposeAllChildren();
        CrewManifestListing.RemoveAllChildren();

        StationNameContainer.Visible = entries != null;
        StationName.Text = name;

        if (entries == null) return;

       var entryList = SortEntries(entries);

        foreach (var item in entryList)
        {
            CrewManifestListing.AddChild(new CrewManifestSection(item.section, item.entries, _resourceCache));
        }
    }

    private List<(string section, List<CrewManifestEntry> entries)> SortEntries(CrewManifestEntries entries)
    {
        var entryList = new List<(string section, List<CrewManifestEntry> entries)>();

        foreach (var (title, list) in entries.Entries)
        {
            entryList.Add((title, list));
        }

        var sortOrder = _configManager.GetCVar(CCVars.CrewManifestOrdering).Split(",").ToList();

        entryList.Sort((a, b) =>
        {
            var ai = sortOrder.IndexOf(a.section);
            var bi = sortOrder.IndexOf(b.section);

            // this is up here so -1 == -1 occurs first
            if (ai == bi)
                return 0;

            if (ai == -1)
                return -1;

            if (bi == -1)
                return 1;

            return ai.CompareTo(bi);
        });

        return entryList;
    }

    private sealed class CrewManifestSection : BoxContainer
    {
        public CrewManifestSection(string sectionTitle, List<CrewManifestEntry> entries, IResourceCache cache)
        {
            Orientation = LayoutOrientation.Vertical;
            HorizontalExpand = true;

            AddChild(new Label()
            {
                StyleClasses = { "LabelBig" },
                Text = Loc.GetString(sectionTitle)
            });

            entries.Sort((a, b) => b.DisplayPriority.CompareTo(a.DisplayPriority));

            var gridContainer = new GridContainer()
            {
                HorizontalExpand = true,
                Columns = 2
            };

            AddChild(gridContainer);

            var path = new ResourcePath("/Textures/Interface/Misc/job_icons.rsi");
            cache.TryGetResource(path, out RSIResource? rsi);

            foreach (var entry in entries)
            {
                var name = new Label()
                {
                    HorizontalExpand = true,
                    Text = entry.Name
                };

                var titleContainer = new BoxContainer()
                {
                    Orientation = LayoutOrientation.Horizontal,
                    HorizontalExpand = true
                };

                var title = new Label()
                {
                    Text = Loc.GetString(entry.JobTitle)
                };


                if (rsi != null)
                {
                    var icon = new TextureRect()
                    {
                        TextureScale = (2, 2),
                        Stretch = TextureRect.StretchMode.KeepCentered
                    };

                    if (rsi.RSI.TryGetState(entry.JobIcon, out _))
                    {
                        var specifier = new SpriteSpecifier.Rsi(path, entry.JobIcon);
                        icon.Texture = specifier.Frame0();
                    }
                    else if (rsi.RSI.TryGetState("Unknown", out _))
                    {
                        var specifier = new SpriteSpecifier.Rsi(path, "Unknown");
                        icon.Texture = specifier.Frame0();
                    }

                    titleContainer.AddChild(icon);
                    titleContainer.AddChild(title);
                }
                else
                {
                    titleContainer.AddChild(title);
                }

                gridContainer.AddChild(name);
                gridContainer.AddChild(titleContainer);
            }
        }
    }
}
