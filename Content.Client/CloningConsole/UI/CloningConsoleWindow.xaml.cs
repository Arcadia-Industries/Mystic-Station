using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Content.Client.Message;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using System.Diagnostics;
using Robust.Shared.Timing;
using static Robust.Client.UserInterface.Controls.BoxContainer;

using static Content.Shared.CloningConsole.SharedCloningConsoleComponent;

namespace Content.Client.CloningConsole.UI
{
    [GenerateTypedNameReferences]
    public partial class CloningConsoleWindow : DefaultWindow
    {
        public CloningConsoleWindow()
        {
            RobustXamlLoader.Load(this);

        }
        private CloningConsoleBoundUserInterfaceState? _lastUpdate;
        private List<string> _historyManager = default!;

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);
            UpdateProgress();
        }

        private void UpdateProgress()
        {
            if (_lastUpdate == null)
                return;

            CloningProgressBar.MaxValue = _lastUpdate.Maximum;
            float simulatedProgress = _lastUpdate.Progress;
            if (_lastUpdate.Progressing)
            {
                TimeSpan sinceReference = IoCManager.Resolve<IGameTiming>().CurTime - _lastUpdate.ReferenceTime;
                simulatedProgress += (float) sinceReference.TotalSeconds;
                simulatedProgress = MathHelper.Clamp(simulatedProgress, 0f, _lastUpdate.Maximum);
            }
            var percentage = simulatedProgress / CloningProgressBar.MaxValue * 100;
            ProgressLabel.Text = $"{percentage:0}%";
            CloningProgressBar.Value = simulatedProgress;
        }

        private void BuildHistory()
        {
            HistoryList.RemoveAllChildren();

            foreach (var historyItem in _historyManager)
            {
                var historyRowItem = new HistoryRow
                {
                  CloneName = historyItem
                };
                historyRowItem.EntityLabel.Text = historyItem;

                HistoryList.AddChild(historyRowItem);
            }
        }

        public void Populate(CloningConsoleBoundUserInterfaceState state)
        {
            // BUILD CLONING HISTORY
            if (_lastUpdate == null || _lastUpdate.CloneHistory.Count != state.CloneHistory.Count)
            {
                _historyManager = state.CloneHistory;
                if (_historyManager == null)
                {
                    _historyManager = new List<string>();
                }
                BuildHistory();
            }
            _lastUpdate = state;

            // BUILD SCANNER UI
            if (state.ScannerConnected)
            {
                GeneticScannerContents.Visible = true;
                GeneticScannerMissing.Visible = false;
                CloneButton.Disabled = state.CloningStatus != ClonerStatusState.Ready;

                switch (state.CloningStatus)
                    {
                        case ClonerStatusState.NoClonerDetected:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-no-cloner"));
                            break;
                        case ClonerStatusState.Ready:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-ready"));
                            break;
                        case ClonerStatusState.ClonerOccupied:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-occupied"));
                            break;
                        case ClonerStatusState.ScannerEmpty:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-empty"));
                            break;
                        case ClonerStatusState.ScannerOccupantAlive:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-scanner-occupant-alive"));
                            break;
                        case ClonerStatusState.OccupantMetaphyiscal:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-already-alive"));
                            break;
                        case ClonerStatusState.NoMindDetected:
                            CloningActivity.Text = (Loc.GetString("cloning-console-component-msg-no-mind"));
                            break;
                    }

                if (state.ScannerBodyInfo != null)
                {
                    // is occupied
                    ScannerInfoLabel.SetMarkup(Loc.GetString("cloning-console-window-scanner-id",
                    ("scannerOccupantName", state.ScannerBodyInfo)));
                }
                else
                {
                    // is not occupied
                    ScannerInfoLabel.SetMarkup(Loc.GetString("cloning-console-window-id-blank"));
                }
            }
            else
            {
                GeneticScannerContents.Visible = false;
                GeneticScannerMissing.Visible = true;
            }

            // BUILD ClONER UI
            if (state.ClonerConnected)
            {
                CloningPodContents.Visible = true;
                CloningPodMissing.Visible = false;


                UpdateProgress();

                ClonerBrainActivity.SetMarkup(Loc.GetString(state.MindPresent ? "cloning-console-mind-present-text" : "cloning-console-no-mind-activity-text"));
                if (state.ClonerBodyInfo != null)
                {
                    ClonerInfoLabel.SetMarkup(Loc.GetString("cloning-console-window-pod-id",
                    ("podOccupantName", state.ClonerBodyInfo)));
                } else
                {
                    ClonerInfoLabel.SetMarkup(Loc.GetString("cloning-console-window-id-blank"));
                }
            } else
            {
                CloningPodContents.Visible = false;
                CloningPodMissing.Visible = true;
            }
        }

        [DebuggerDisplay("cloninghistory {" + nameof(Index) + "}")]
        private class HistoryRow : Control
        {
            public string CloneName { get; set; } = default!;
            public Label EntityLabel { get; private set; }
            public TextureRect EntityTextureRect { get; private set; }
            public int Index { get; set; }

            public HistoryRow()
            {
                AddChild(new BoxContainer
                {
                    Orientation = LayoutOrientation.Horizontal,
                    Children =
                    {
                        (EntityTextureRect = new TextureRect
                        {
                            MinSize = (32, 32),
                            HorizontalAlignment = HAlignment.Center,
                            VerticalAlignment = VAlignment.Center,
                            Stretch = TextureRect.StretchMode.KeepAspectCentered,
                            CanShrink = true
                        }),
                        (EntityLabel = new Label
                        {
                            VerticalAlignment = VAlignment.Center,
                            HorizontalExpand = true,
                            Text = string.Empty,
                            ClipText = true
                        })
                    }
                });
            }
        }
    }
}
