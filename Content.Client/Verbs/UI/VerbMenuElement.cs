using Content.Client.ContextMenu.UI;
using Content.Shared.Verbs;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.Utility;
using Robust.Shared.GameObjects;
using Robust.Shared.IoC;
using Robust.Shared.Maths;
using Robust.Shared.Utility;

namespace Content.Client.Verbs.UI
{
    /// <summary>
    ///     Slight extension of <see cref="ContextMenuElement"/> that uses a SpriteSpecifier for it's icon and provides
    ///     constructors that take verbs or verb categories.
    /// </summary>
    public partial class VerbMenuElement : ContextMenuElement
    {
        public const string StyleClassVerbInteractionText = "InteractionVerb";
        public const string StyleClassVerbActivationText = "ActivationVerb";
        public const string StyleClassVerbAlternativeText = "AlternativeVerb";
        public const string StyleClassVerbOtherText = "OtherVerb";
        public const string StyleClassVerbMenuConfirmationTexture = "verbMenuConfirmationTexture";

        public const float VerbTooltipDelay = 0.5f;

        // Setters to provide access to children generated by XAML.
        public bool IconVisible { set => Icon.Visible = value; }
        public bool TextVisible { set => Label.Visible = value; }

        // Top quality variable naming
        public Verb? Verb;

        public VerbType Type;

        public VerbMenuElement(string? text, VerbType verbType) : base(text)
        {
            Type = verbType;

            // Set text font style based on verb type
            switch (verbType)
            {
                case VerbType.Interaction:
                case VerbType.Utility:
                    Label.SetOnlyStyleClass(StyleClassVerbInteractionText);
                    break;
                case VerbType.Activation:
                    Label.SetOnlyStyleClass(StyleClassVerbActivationText);
                    break;
                case VerbType.Alternative:
                    Label.SetOnlyStyleClass(StyleClassVerbAlternativeText);
                    break;
                default:
                    Label.SetOnlyStyleClass(StyleClassVerbOtherText);
                    break;
            }
        }

        public VerbMenuElement(Verb verb, VerbType verbType) : this(verb.Text, verbType)
        {
            ToolTip = verb.Message;
            TooltipDelay = VerbTooltipDelay;
            Disabled = verb.Disabled;
            Verb = verb;
            Type = verbType;

            if (verb.ConfirmationPopup)
            {
                ExpansionIndicator.SetOnlyStyleClass(StyleClassVerbMenuConfirmationTexture);
                ExpansionIndicator.Visible = true;
            }

            if (verb.Icon == null && verb.IconEntity != null)
            {
                var spriteView = new SpriteView()
                {
                    OverrideDirection = Direction.South,
                    Sprite = IoCManager.Resolve<IEntityManager>().GetComponentOrNull<ISpriteComponent>(verb.IconEntity.Value)
                };

                Icon.AddChild(spriteView);
                return;

            }

            Icon.AddChild(new TextureRect()
            {
                Texture = verb.Icon?.Frame0(),
                Stretch = TextureRect.StretchMode.KeepAspectCentered
            });
        }

        public VerbMenuElement(VerbCategory category, VerbType verbType) : this(category.Text, verbType)
        {
            Icon.AddChild(new TextureRect()
            {
                Texture = category.Icon?.Frame0(),
                Stretch = TextureRect.StretchMode.KeepAspectCentered
            });

            Type = verbType;
        }
    }
}
