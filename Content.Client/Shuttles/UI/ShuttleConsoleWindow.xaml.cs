using Content.Client.Computer;
using Content.Client.Shuttles.Systems;
using Content.Client.UserInterface;
using Content.Shared.Shuttles.BUIStates;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class ShuttleConsoleWindow : FancyWindow,
    IComputerWindow<ShuttleConsoleBoundInterfaceState>
{
    private readonly ShuttleConsoleSystem _system;
    private readonly IEntityManager _entManager;

    /// <summary>
    /// EntityUid of the open console.
    /// </summary>
    private EntityUid? _entity;

    /// <summary>
    /// Currently selected dock button for camera.
    /// </summary>
    private BaseButton? _selectedDock;

    public ShuttleConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        _entManager = IoCManager.Resolve<IEntityManager>();
        _system = _entManager.EntitySysManager.GetEntitySystem<ShuttleConsoleSystem>();

        IFFToggle.OnToggled += OnIFFTogglePressed;
        IFFToggle.Pressed = RadarScreen.ShowIFF;

        DockToggle.OnToggled += OnDockTogglePressed;
        DockToggle.Pressed = RadarScreen.ShowDocks;

        ShuttleMode.OnToggled += OnShuttleModePressed;
    }

    private void OnShuttleModePressed(BaseButton.ButtonEventArgs obj)
    {
        _system.SendShuttleMode(ShuttleMode.Pressed ? Shared.Shuttles.Components.ShuttleMode.Strafing : Shared.Shuttles.Components.ShuttleMode.Cruise);
    }

    private void OnIFFTogglePressed(BaseButton.ButtonEventArgs args)
    {
        RadarScreen.ShowIFF ^= true;
        args.Button.Pressed = RadarScreen.ShowIFF;
    }

    private void OnDockTogglePressed(BaseButton.ButtonEventArgs args)
    {
        RadarScreen.ShowDocks ^= true;
        args.Button.Pressed = RadarScreen.ShowDocks;
    }

    public void UpdateState(ShuttleConsoleBoundInterfaceState scc)
    {
        _entity = scc.Entity;
        UpdateDocks(scc.Docks);
        RadarScreen.UpdateState(scc);
        RadarRange.Text = $"{scc.Range:0}";
        ShuttleMode.Pressed = scc.Mode == Shared.Shuttles.Components.ShuttleMode.Strafing;
    }

    #region Docking

    private void UpdateDocks(List<(EntityCoordinates Coordinates, Angle Angle, EntityUid entity)> docks)
    {
        DockPorts.DisposeAllChildren();

        if (!_entManager.TryGetComponent<TransformComponent>(_entity, out var xform))
        {
            // TODO: Placeholder
            return;
        }

        var index = 0;

        foreach (var (coordinates, angle, ent) in docks)
        {
            if (xform.GridEntityId != coordinates.EntityId) continue;
            var button = new Button()
            {
                Text = $"Dock {index + 1}",
                ToggleMode = true,
            };

            button.OnMouseEntered += args => OnDockMouseEntered(args, ent);
            button.OnMouseExited += args => OnDockMouseExited(args, ent);
            button.OnToggled += args => OnDockToggled(args, ent);
            DockPorts.AddChild(button);
            index++;
        }
    }

    private void OnDockMouseEntered(GUIMouseHoverEventArgs obj, EntityUid uid)
    {
        RadarScreen.HighlightedDock = uid;
    }

    private void OnDockMouseExited(GUIMouseHoverEventArgs obj, EntityUid uid)
    {
        RadarScreen.HighlightedDock = null;
    }

    /// <summary>
    /// Shows a docking camera instead of radar screen.
    /// </summary>
    private void OnDockToggled(BaseButton.ButtonEventArgs obj, EntityUid ent)
    {
        if (_selectedDock != null)
        {
            _selectedDock.Pressed = false;
            _selectedDock = null;
        }

        if (!obj.Button.Pressed)
        {
            DockingScreen.Visible = false;
            RadarScreen.Visible = true;
        }
        else
        {
            RadarScreen.Visible = false;
            DockingScreen.Visible = true;
            _selectedDock = obj.Button;
        }
    }

    #endregion

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (!_entManager.TryGetComponent<TransformComponent>(_entity, out var entXform) ||
            !_entManager.TryGetComponent<PhysicsComponent>(entXform.GridEntityId, out var gridBody) ||
            !_entManager.TryGetComponent<TransformComponent>(entXform.GridEntityId, out var gridXform))
        {
            return;
        }

        var (_, worldRot, worldMatrix) = gridXform.GetWorldPositionRotationMatrix();
        var worldPos = worldMatrix.Transform(gridBody.LocalCenter);

        // Get the positive reduced angle.
        var displayRot = -worldRot.Reduced();

        GridPosition.Text = $"{worldPos.X:0.0}, {worldPos.Y:0.0}";
        GridOrientation.Text = $"{displayRot.Degrees:0.0}";

        var gridVelocity = gridBody.LinearVelocity;
        gridVelocity = displayRot.RotateVec(gridVelocity);
        // Get linear velocity relative to the console entity
        GridLinearVelocity.Text = $"{gridVelocity.X:0.0}, {gridVelocity.Y:0.0}";
        GridAngularVelocity.Text = $"{-gridBody.AngularVelocity:0.0}";
    }
}
