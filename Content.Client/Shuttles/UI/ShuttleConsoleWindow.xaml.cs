using System.Numerics;
using Content.Client.Computer;
using Content.Client.UserInterface.Controls;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared.Shuttles.Systems;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Map.Components;
using Robust.Shared.Physics.Components;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class ShuttleConsoleWindow : FancyWindow,
    IComputerWindow<ShuttleConsoleBoundInterfaceState>
{
    [Dependency] private readonly IEntityManager _entManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    private ShuttleConsoleMode _mode = ShuttleConsoleMode.Nav;

    private EntityUid? _shuttleEntity;

    /// <summary>
    /// Currently selected dock button for camera.
    /// </summary>
    private BaseButton? _selectedDock;

    /// <summary>
    /// Next FTL state change.
    /// </summary>
    public TimeSpan FTLTime;

    public ShuttleConsoleWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // Mode switching
        NavModeButton.OnPressed += NavPressed;
        MapModeButton.OnPressed += MapPressed;
        DockModeButton.OnPressed += DockPressed;

        NavModeButton.Pressed = true;
        SetupMode(_mode);
    }

    private void ClearModes(ShuttleConsoleMode mode)
    {
        if (mode != ShuttleConsoleMode.Nav)
        {
            NavModeButton.Pressed = false;
            NavContainer.Visible = false;
        }

        if (mode != ShuttleConsoleMode.Map)
        {
            MapModeButton.Pressed = false;
            MapContainer.Visible = false;
            MapContainer.SetMap(MapId.Nullspace, Vector2.Zero);
        }

        if (mode != ShuttleConsoleMode.Dock)
        {
            DockModeButton.Pressed = false;
            DockContainer.Visible = false;
        }
    }

    private void NavPressed(BaseButton.ButtonEventArgs obj)
    {
        SwitchMode(ShuttleConsoleMode.Nav);
    }

    private void MapPressed(BaseButton.ButtonEventArgs obj)
    {
        SwitchMode(ShuttleConsoleMode.Map);
    }

    private void DockPressed(BaseButton.ButtonEventArgs obj)
    {
        SwitchMode(ShuttleConsoleMode.Dock);
    }

    public void SetMatrix(EntityCoordinates? coordinates, Angle? angle)
    {
        _shuttleEntity = coordinates?.EntityId;
        NavRadar.SetMatrix(coordinates, angle);
    }

    public void UpdateState(ShuttleConsoleBoundInterfaceState scc)
    {
        UpdateDocks(scc.Docks);
        UpdateFTL(scc.Destinations, scc.FTLState, scc.FTLTime);
        NavRadar.UpdateState(scc);
        MaxRadarRange.Text = $"{scc.MaxRange:0}";
    }

    #region Docking

    private void OnDockMouseEntered(GUIMouseHoverEventArgs obj, DockingInterfaceState state)
    {
        NavRadar.HighlightedDock = state.Entity;
    }

    private void OnDockMouseExited(GUIMouseHoverEventArgs obj, DockingInterfaceState state)
    {
        NavRadar.HighlightedDock = null;
    }

    /// <summary>
    /// Shows a docking camera instead of radar screen.
    /// </summary>
    private void OnDockToggled(BaseButton.ButtonEventArgs obj, DockingInterfaceState state)
    {
        if (_selectedDock != null)
        {
            // If it got untoggled via other means then we'll stop viewing the old dock.
            if (DockingScreen.ViewedDock != null && DockingScreen.ViewedDock != state.Entity)
            {
                StopAutodockPressed?.Invoke(DockingScreen.ViewedDock.Value);
            }

            _selectedDock.Pressed = false;
            _selectedDock = null;
        }

        if (!obj.Button.Pressed)
        {
            if (DockingScreen.ViewedDock != null)
            {
                StopAutodockPressed?.Invoke(DockingScreen.ViewedDock.Value);
                DockingScreen.ViewedDock = null;
            }

            DockingScreen.Visible = false;
            NavRadar.Visible = true;
        }
        else
        {
            if (_shuttleEntity != null)
            {
                DockingScreen.Coordinates = _entManager.GetCoordinates(state.Coordinates);
                DockingScreen.Angle = state.Angle;
            }
            else
            {
                DockingScreen.Coordinates = null;
                DockingScreen.Angle = null;
            }

            NavRadar.Visible = false;
            DockingScreen.Visible = true;
            DockingScreen.ViewedDock = state.Entity;
            StartAutodockPressed?.Invoke(state.Entity);
            DockingScreen.GridEntity = _shuttleEntity;
            _selectedDock = obj.Button;
        }
    }

    #endregion

    private void SetupMode(ShuttleConsoleMode mode)
    {
        switch (mode)
        {
            case ShuttleConsoleMode.Nav:
                NavContainer.Visible = true;
                break;
            case ShuttleConsoleMode.Map:
                MapContainer.Visible = true;

                // Centre map screen to the shuttle.
                if (_shuttleEntity != null)
                {
                    var shuttleXform = _entManager.GetComponent<TransformComponent>(_shuttleEntity.Value);
                    MapRadar.SetMap(shuttleXform.MapID, shuttleXform.WorldPosition);
                }

                BuildMapObjects();

                break;
            case ShuttleConsoleMode.Dock:
                DockContainer.Visible = true;
                break;
            default:
                throw new NotImplementedException();
        }
    }

    public void SwitchMode(ShuttleConsoleMode mode)
    {
        if (_mode == mode)
            return;

        _mode = mode;
        ClearModes(mode);
        SetupMode(_mode);
    }

    public enum ShuttleConsoleMode : byte
    {
        Nav,
        Map,
        Dock,
    }
}
