using Content.Client.Computer;
using Content.Client.UserInterface;
using Content.Shared.Shuttles.BUIStates;
using Content.Shared.Shuttles.Events;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Shuttles.UI;

[GenerateTypedNameReferences]
public sealed partial class EmergencyShuttleConsoleWindow : FancyWindow,
    IComputerWindow<EmergencyShuttleConsoleBoundUserInterfaceState>
{
    public EmergencyShuttleConsoleWindow()
    {
        RobustXamlLoader.Load(this);
    }

    public void SetupComputerWindow(ComputerBoundUserInterfaceBase cb)
    {
        RepealAllButton.OnPressed += args =>
        {
            OnRepealAllPressed(cb, args);
        };
        AuthorizeButton.OnPressed += args =>
        {
            OnAuthorizePressed(cb, args);
        };
        RepealButton.OnPressed += args =>
        {
            OnRepealPressed(cb, args);
        };
    }

    private void OnRepealAllPressed(ComputerBoundUserInterfaceBase cb, BaseButton.ButtonEventArgs obj)
    {
        cb.SendMessage(new EmergencyShuttleRepealAllMessage());
    }

    private void OnRepealPressed(ComputerBoundUserInterfaceBase cb, BaseButton.ButtonEventArgs obj)
    {
        cb.SendMessage(new EmergencyShuttleRepealMessage());
    }

    private void OnAuthorizePressed(ComputerBoundUserInterfaceBase cb, BaseButton.ButtonEventArgs obj)
    {
        cb.SendMessage(new EmergencyShuttleAuthorizeMessage());
    }

    public void UpdateState(EmergencyShuttleConsoleBoundUserInterfaceState scc)
    {
        AuthorizationsContainer.DisposeAllChildren();
        var remainingAuths = scc.AuthorizationsRequired - scc.Authorizations.Count;
        AuthorizationCount.Text = $"Remaining: {remainingAuths}";

        foreach (var auth in scc.Authorizations)
        {
            AuthorizationsContainer.AddChild(new Label
            {
                Text = auth,
                FontColorOverride = Color.Lime,
            });
        }
    }
}
