using Content.Client.Stylesheets;
using Content.Shared.StatusIcon;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Linq;
using System.Numerics;

namespace Content.Client.Access.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class AgentIDCardWindow : DefaultWindow
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        [Dependency] private readonly SpriteSystem _spriteSystem = default!;

        private const string JobIconPrarentId = "JobIcon";

        public event Action<string>? OnNameChanged;
        public event Action<string>? OnJobChanged;
        public readonly List<Button> JobIconButtons = new();

        public AgentIDCardWindow()
        {
            RobustXamlLoader.Load(this);

            NameLineEdit.OnTextEntered += e => OnNameChanged?.Invoke(e.Text);
            NameLineEdit.OnFocusExit += e => OnNameChanged?.Invoke(e.Text);

            JobLineEdit.OnTextEntered += e => OnJobChanged?.Invoke(e.Text);
            JobLineEdit.OnFocusExit += e => OnJobChanged?.Invoke(e.Text);

            var jobIconGroup = new ButtonGroup();
            var allJobIcons = _prototypeManager.EnumeratePrototypes<StatusIconPrototype>();
            var i = 0;
            foreach (var jobIcon in allJobIcons)
            {
                if (!(jobIcon.Parents?.Contains(JobIconPrarentId) ?? false))
                {
                    continue;
                }

                // For every button decide which stylebase to have
                // Every row has 10 buttons
                String styleBase = StyleBase.ButtonOpenBoth;
                var modulo = i % 10;
                if (i > 0 && modulo == 0)
                    styleBase = StyleBase.ButtonOpenRight;
                else if (modulo == 9)
                    styleBase = StyleBase.ButtonOpenLeft;
                else if (i == 0)
                    styleBase = StyleBase.ButtonOpenRight;

                // Generate buttons
                var jobIconButton = new Button
                {
                    Access = AccessLevel.Public,
                    StyleClasses = { styleBase },
                    MaxSize = new Vector2(42, 28),
                    Group = jobIconGroup,
                    Pressed = i == 0,
                };

                // Generate buttons textures
                var specifier = jobIcon.Icon;
                TextureRect jobIconTexture = new TextureRect
                {
                    Texture = _spriteSystem.Frame0(specifier),
                    TextureScale = new Vector2(1.75f, 1.75f),
                    Stretch = TextureRect.StretchMode.KeepCentered,
                };

                JobIconButtons.Add(jobIconButton);
                Grid.AddChild(jobIconButton);

                i++;
            }
        }

        public void SetCurrentName(string name)
        {
            NameLineEdit.Text = name;
        }

        public void SetCurrentJob(string job)
        {
            JobLineEdit.Text = job;
        }
    }
}
