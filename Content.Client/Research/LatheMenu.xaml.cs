using System;
using System.Collections.Generic;
using Content.Client.GameObjects.Components.Research;
using Content.Shared.Materials;
using Content.Shared.Research;
using JetBrains.Annotations;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Prototypes;

namespace Content.Client.Research
{
    [GenerateTypedNameReferences]
    [UsedImplicitly]
    public partial class LatheMenu : SS14Window
    {
        [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
        private LatheBoundUserInterface Owner { get; }
        private readonly List<LatheRecipePrototype> _shownRecipes = new();

        public Button ServerConnectButtonProp => ServerConnectButton;
        public Button ServerSyncButtonProp => ServerSyncButton;
        public Button QueueButtonProp => QueueButton;

        public LatheMenu(LatheBoundUserInterface owner)
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            SetSize = MinSize = (300, 450);
            Owner = owner;

            if (Owner.Database is ProtolatheDatabaseComponent database)
            {
                Title = Loc.GetString("ui-lathe-protolathe-title");
                ServerConnectButton.Visible = true;
                ServerSyncButton.Visible = true;
                database.OnDatabaseUpdated += Populate;
            }
            else
            {
                Title = Loc.GetString("ui-lathe-autolathe-title");
            }

            QueueButton.Text = Loc.GetString("ui-lathe-queue-button-default");
            ServerConnectButton.Text = Loc.GetString("ui-lathe-connect-button-default");
            ServerSyncButton.Text = Loc.GetString("ui-lathe-sync-button-default");
            SearchBar.PlaceHolder = Loc.GetString("ui-lathe-search-placeholder");
            FilterButton.Text = Loc.GetString("ui-lathe-filter-button-default");
            AmountLineEdit.PlaceHolder = Loc.GetString("ui-lathe-amount-placeholder");

            SearchBar.OnTextChanged += Populate;
            ItemsItemList.OnItemSelected += ItemSelected;
            AmountLineEdit.OnTextChanged += PopulateDisabled;

        }

        public void ItemSelected(ItemList.ItemListSelectedEventArgs args)
        {
            int.TryParse(AmountLineEdit.Text, out var quantity);
            if (quantity <= 0) quantity = 1;
            Owner.Queue(_shownRecipes[args.ItemIndex], quantity);
        }

        public void PopulateMaterials()
        {
            MaterialsItemList.Clear();

            if (Owner.Storage == null) return;

            foreach (var (id, amount) in Owner.Storage)
            {
                if (!_prototypeManager.TryIndex(id, out MaterialPrototype? materialPrototype)) continue;
                var material = materialPrototype;
                var matstring = Loc.GetString("ui-lathe-material-item", ("material", material.Name), ("quantity", amount));
                MaterialsItemList.AddItem(matstring, material.Icon.Frame0(), false);
            }
        }

        /// <summary>
        ///     Disables or enables shown recipes depending on whether there are enough materials for it or not.
        /// </summary>
        public void PopulateDisabled()
        {
            int.TryParse(AmountLineEdit.Text, out var quantity);
            if (quantity <= 0) quantity = 1;
            for (var i = 0; i < _shownRecipes.Count; i++)
            {
                var prototype = _shownRecipes[i];
                ItemsItemList[i].Disabled = !Owner.Lathe?.CanProduce(prototype, quantity) ?? true;
            }
        }

        /// <inheritdoc cref="PopulateDisabled()"/>
        public void PopulateDisabled(LineEdit.LineEditEventArgs args)
        {
            PopulateDisabled();
        }

        /// <summary>
        ///     Adds shown recipes to the ItemList control.
        /// </summary>
        public void PopulateList()
        {
            ItemsItemList.Clear();
            foreach (var prototype in _shownRecipes)
            {
                ItemsItemList.AddItem(prototype.Name, prototype.Icon.Frame0());
            }

            PopulateDisabled();
        }

        /// <summary>
        ///     Populates the list of recipes that will actually be shown, using the current filters.
        /// </summary>
        public void Populate()
        {
            _shownRecipes.Clear();

            if (Owner.Database == null) return;

            foreach (var prototype in Owner.Database)
            {
                if (SearchBar.Text.Trim().Length != 0)
                {
                    if (prototype.Name.ToLowerInvariant().Contains(SearchBar.Text.Trim().ToLowerInvariant()))
                        _shownRecipes.Add(prototype);
                    continue;
                }

                _shownRecipes.Add(prototype);
            }

            PopulateList();
        }

        /// <inheritdoc cref="Populate"/>
        public void Populate(LineEdit.LineEditEventArgs args)
        {
            Populate();
        }
    }
}
