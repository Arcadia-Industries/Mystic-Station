using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Systems;
using Content.Shared.Research;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class RoboticsConsoleWindow : FancyWindow
{
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IGameTiming _timing = default!;
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;
    private readonly AccessReaderSystem _accessReader;
    private readonly SpriteSystem _sprite;

    public Action<string>? OnDisablePressed;
    public Action<string>? OnDestroyPressed;

    private EntityUid _console;
    private string? _selected;
    private Dictionary<string, CyborgControlData> _cyborgs = new();
    private TimeSpan _nextDestroy = TimeSpan.Zero;

    public RoboticsConsoleWindow(EntityUid console)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _accessReader = _entMan.System<AccessReaderSystem>();
        _sprite = _entMan.System<SpriteSystem>();

        _console = console;

        Cyborgs.OnItemSelected += args =>
        {
            if (Cyborgs[args.ItemIndex].Metadata is not string address)
                return;

            _selected = address;
            PopulateData();
        };
        Cyborgs.OnItemDeselected += _ =>
        {
            _selected = null;
            PopulateData();
        };

        // these won't throw since buttons are only visible if a borg is selected
        DisableButton.OnPressed += _ =>
        {
            OnDisablePressed?.Invoke(_selected!);
        };
        DestroyButton.OnPressed += _ =>
        {
            OnDestroyPressed?.Invoke(_selected!);
        };

        // cant put multiple styles in xaml for some reason
        DestroyButton.StyleClasses.Add(StyleBase.ButtonCaution);
    }

    public void UpdateState(RoboticsConsoleState state)
    {
        _cyborgs = state.Cyborgs;
        _nextDestroy = state.NextDestroy;

        // clear invalid selection
        if (_selected is {} selected && !_cyborgs.ContainsKey(selected))
            _selected = null;

        var hasCyborgs = _cyborgs.Count > 0;
        NoCyborgs.Visible = !hasCyborgs;
        CyborgsContainer.Visible = hasCyborgs;
        PopulateCyborgs();

        PopulateData();

        var access = _player.LocalPlayer?.ControlledEntity is {} player && _accessReader.IsAllowed(player, _console);
        DangerZone.Visible = access;
    }

    private void PopulateCyborgs()
    {
        // _selected might get set to null when recreating so copy it first
        var selected = _selected;
        Cyborgs.Clear();
        foreach (var (address, data) in _cyborgs)
        {
            var chassis = _proto.Index<EntityPrototype>(data.Chassis);
            var icon = _sprite.GetPrototypeIcon(chassis).Default;
            var item = Cyborgs.AddItem(data.Name, icon, metadata: address);
            item.Selected = address == selected;
        }
        _selected = selected;
    }

    private void PopulateData()
    {
        if (_selected is not {} selected)
        {
            SelectCyborg.Visible = true;
            BorgContainer.Visible = false;
            return;
        }

        SelectCyborg.Visible = false;
        BorgContainer.Visible = true;

        var data = _cyborgs[selected];
        var chassis = _proto.Index<EntityPrototype>(data.Chassis);
        var model = chassis.Name;
        var icon = _sprite.GetPrototypeIcon(chassis).Default;

        BorgSprite.Texture = icon;

        var batteryColor = data.Charge switch {
            < 0.2f => "red",
            < 0.4f => "orange",
            < 0.6f => "yellow",
            < 0.8f => "green",
            _ => "blue"
        };

        var text = FormattedMessage.FromMarkup(Loc.GetString("robotics-console-model", ("name", model)));
        text.PushNewline();
        text.AddMarkup(Loc.GetString("robotics-console-designation"));
        text.AddText($" {data.Name}\n"); // prevent players trolling by naming borg [color=red]satan[/color]
        text.AddMarkup(Loc.GetString("robotics-console-battery", ("charge", (int) (data.Charge * 100f)), ("color", batteryColor)));
        text.PushNewline();
        text.AddMarkup(Loc.GetString("robotics-console-brain", ("brain", data.HasBrain)));
        text.PushNewline();
        text.AddMarkup(Loc.GetString("robotics-console-modules", ("count", data.ModuleCount)));
        BorgInfo.SetMessage(text);

        // how the turntables
        DisableButton.Disabled = !data.HasBrain;
        DestroyButton.Disabled = _timing.CurTime < _nextDestroy;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        DestroyButton.Disabled = _timing.CurTime < _nextDestroy;
    }
}
