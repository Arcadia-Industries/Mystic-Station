using Content.Client.UserInterface.Controls;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Research.UI;

[GenerateTypedNameReferences]
public sealed partial class ResearchConsoleMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private readonly TechnologyDatabaseComponent? _technologyDatabase;
    private readonly ResearchSystem _research;
    private readonly SpriteSystem _sprite;

    public readonly EntityUid Entity;

    public ResearchConsoleMenu(EntityUid entity)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _research = _entity.System<ResearchSystem>();
        _sprite = _entity.System<SpriteSystem>();
        Entity = entity;

        _entity.TryGetComponent(entity, out _technologyDatabase);
    }

    public void  UpdatePanels()
    {
        var allTech = _research.GetAvailableTechnologies(Entity);
        AvailableCardsContainer.Children.Clear();
        TechnologyCardsContainer.Children.Clear();
        UnlockedCardsContainer.Children.Clear();

        foreach (var tech in allTech)
        {
            var mini = new MiniTechnologyCardControl(tech, _prototype, _sprite, GetTechnologyDescription(tech));
            AvailableCardsContainer.AddChild(mini);
        }

        if (_technologyDatabase == null)
            return;

        // i can't figure out the spacing so here you go
        TechnologyCardsContainer.AddChild(new Control
        {
            MinHeight = 10
        });
        foreach (var card in _technologyDatabase.CurrentTechnologyCards)
        {
            var tech = _prototype.Index<TechnologyPrototype>(card);
            var cardControl = new TechnologyCardControl(tech, _prototype, _sprite, GetTechnologyDescription(tech));
            TechnologyCardsContainer.AddChild(cardControl);
        }

        foreach (var unlocked in _technologyDatabase.UnlockedTechnologies)
        {
            var tech = _prototype.Index<TechnologyPrototype>(unlocked);
            var cardControl = new MiniTechnologyCardControl(tech, _prototype, _sprite, GetTechnologyDescription(tech));
            UnlockedCardsContainer.AddChild(cardControl);
        }
    }

    public FormattedMessage GetTechnologyDescription(TechnologyPrototype technology)
    {
        var description = new FormattedMessage();
        description.AddMarkup(Loc.GetString("research-console-cost", ("amount", technology.Cost)));
        description.PushNewline();
        description.AddMarkup(Loc.GetString("research-console-unlocks-list-start"));
        foreach (var recipe in technology.RecipeUnlocks)
        {
            var recipeProto = _prototype.Index<LatheRecipePrototype>(recipe);
            description.PushNewline();
            description.AddMarkup(Loc.GetString("research-console-unlocks-list-entry",
                ("name",recipeProto.Name)));
        }
        foreach (var generic in technology.GenericUnlocks)
        {
            description.PushNewline();
            description.AddMarkup(Loc.GetString("research-console-unlocks-list-entry-generic",
                ("name", Loc.GetString(generic.UnlockDescription))));
        }

        return description;
    }
}

