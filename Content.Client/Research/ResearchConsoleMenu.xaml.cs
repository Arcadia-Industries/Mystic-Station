using System.Collections.Generic;
using Content.Client.GameObjects.Components.Research;
using Content.Shared.Research;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.IoC;
using Robust.Shared.Localization;
using Robust.Shared.Prototypes;

namespace Content.Client.Research
{
    [GenerateTypedNameReferences]
    public partial class ResearchConsoleMenu : SS14Window
    {
        public ResearchConsoleBoundUserInterface Owner { get; }

        private readonly List<TechnologyPrototype> _unlockedTechnologyPrototypes = new();
        private readonly List<TechnologyPrototype> _unlockableTechnologyPrototypes = new();
        private readonly List<TechnologyPrototype> _futureTechnologyPrototypes = new();

        public TechnologyPrototype? TechnologySelected;

        public Button ServerConnectButtonProp => ServerConnectButton;
        public Button ServerSyncButtonProp => ServerSyncButton;
        public Button UnlockButtonProp => UnlockButton;

        public ResearchConsoleMenu(ResearchConsoleBoundUserInterface owner)
        {
            SetSize = MinSize = (800, 400);

            IoCManager.InjectDependencies(this);
            RobustXamlLoader.Load(this);

            Title = Loc.GetString("ui-rnd-console-title");

            Owner = owner;

            UnlockedTechnologies.OnItemSelected += UnlockedTechnologySelected;
            UnlockableTechnologies.OnItemSelected += UnlockableTechnologySelected;
            FutureTechnologies.OnItemSelected += FutureTechnologySelected;

            PointLabel.Text = Loc.GetString("ui-rnd-console-default-points");
            PointsPerSecondLabel.Text = Loc.GetString("ui-rnd-console-default-points-per-second");
            ServerConnectButton.Text = Loc.GetString("ui-rnd-console-default-select");
            ServerSyncButton.Text = Loc.GetString("ui-rnd-console-default-sync");
            UnlockButton.Text = Loc.GetString("ui-rnd-console-default-unlock");

            UnlockButton.OnPressed += (args) =>
            {
                CleanSelectedTechnology();
            };

            Populate();
        }

        /// <summary>
        ///     Cleans the selected technology controls to blank.
        /// </summary>
        private void CleanSelectedTechnology()
        {
            UnlockButton.Disabled = true;
            TechnologyIcon.Texture = Texture.Transparent;
            TechnologyName.Text = "";
            TechnologyDescription.Text = "";
            TechnologyRequirements.Text = "";
        }

        /// <summary>
        ///     Called when an unlocked technology is selected.
        /// </summary>
        private void UnlockedTechnologySelected(ItemList.ItemListSelectedEventArgs obj)
        {
            TechnologySelected = _unlockedTechnologyPrototypes[obj.ItemIndex];

            UnlockButton.Disabled = true;

            PopulateSelectedTechnology();
        }

        /// <summary>
        ///     Called when an unlockable technology is selected.
        /// </summary>
        private void UnlockableTechnologySelected(ItemList.ItemListSelectedEventArgs obj)
        {
            TechnologySelected = _unlockableTechnologyPrototypes[obj.ItemIndex];

            UnlockButton.Disabled = Owner.Points < TechnologySelected.RequiredPoints;

            PopulateSelectedTechnology();
        }

        /// <summary>
        ///     Called when a future technology is selected
        /// </summary>
        private void FutureTechnologySelected(ItemList.ItemListSelectedEventArgs obj)
        {
            TechnologySelected = _futureTechnologyPrototypes[obj.ItemIndex];

            UnlockButton.Disabled = true;

            PopulateSelectedTechnology();
        }

        /// <summary>
        ///     Populate all technologies in the ItemLists.
        /// </summary>
        public void PopulateItemLists()
        {
            UnlockedTechnologies.Clear();
            UnlockableTechnologies.Clear();
            FutureTechnologies.Clear();

            _unlockedTechnologyPrototypes.Clear();
            _unlockableTechnologyPrototypes.Clear();
            _futureTechnologyPrototypes.Clear();

            var prototypeMan = IoCManager.Resolve<IPrototypeManager>();

            // For now, we retrieve all technologies. In the future, this should be changed.
            foreach (var tech in prototypeMan.EnumeratePrototypes<TechnologyPrototype>())
            {
                if (Owner.IsTechnologyUnlocked(tech))
                {
                    UnlockedTechnologies.AddItem(tech.Name, tech.Icon.Frame0());
                    _unlockedTechnologyPrototypes.Add(tech);
                }
                else if (Owner.CanUnlockTechnology(tech))
                {
                    UnlockableTechnologies.AddItem(tech.Name, tech.Icon.Frame0());
                    _unlockableTechnologyPrototypes.Add(tech);
                }
                else
                {
                    FutureTechnologies.AddItem(tech.Name, tech.Icon.Frame0());
                    _futureTechnologyPrototypes.Add(tech);
                }
            }
        }

        /// <summary>
        ///     Fills the selected technology controls with details.
        /// </summary>
        public void PopulateSelectedTechnology()
        {
            if (TechnologySelected == null)
            {
                TechnologyName.Text = "";
                TechnologyDescription.Text = "";
                TechnologyRequirements.Text = "";
                return;
            }

            TechnologyIcon.Texture = TechnologySelected.Icon.Frame0();
            TechnologyName.Text = TechnologySelected.Name;
            TechnologyDescription.Text = TechnologySelected.Description+$"\n{TechnologySelected.RequiredPoints} " + Loc.GetString("research points");
            TechnologyRequirements.Text = Loc.GetString("ui-rnd-console-no-requirements");

            var prototypeMan = IoCManager.Resolve<IPrototypeManager>();

            for (var i = 0; i < TechnologySelected.RequiredTechnologies.Count; i++)
            {
                var requiredId = TechnologySelected.RequiredTechnologies[i];
                if (!prototypeMan.TryIndex(requiredId, out TechnologyPrototype? prototype)) continue;
                if (i == 0)
                    TechnologyRequirements.Text = Loc.GetString("ui-rnd-console-requires-one", ("name", prototype.Name));
                else
                    TechnologyRequirements.Text += Loc.GetString("ui-rnd-console-requires-more", ("name", prototype.Name));
            }
        }

        /// <summary>
        ///     Updates the research point labels.
        /// </summary>
        public void PopulatePoints()
        {
            PointLabel.Text = Loc.GetString("ui-rnd-console-points-total", ("points", Owner.Points));
            PointsPerSecondLabel.Text = Loc.GetString("ui-rnd-console-points-per-second", ("per-second", Owner.PointsPerSecond));
        }

        /// <summary>
        ///     Updates the whole user interface.
        /// </summary>
        public void Populate()
        {
            PopulatePoints();
            PopulateSelectedTechnology();
            PopulateItemLists();
        }
    }
}
