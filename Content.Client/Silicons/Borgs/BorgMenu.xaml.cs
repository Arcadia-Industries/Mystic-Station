using System.Numerics;
using Content.Client.UserInterface.Controls;
using Content.Shared.Access.Components;
using Content.Shared.Access.Systems;
using Content.Shared.NameIdentifier;
using Content.Shared.Research.Components;
using Content.Shared.Research.Prototypes;
using Content.Shared.Silicons.Borgs.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.Silicons.Borgs;

[GenerateTypedNameReferences]
public sealed partial class BorgMenu : FancyWindow
{
    [Dependency] private readonly IEntityManager _entity = default!;
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    [Dependency] private readonly IPlayerManager _player = default!;

    private readonly BorgChassisComponent? _chassis;

    public readonly EntityUid Entity;

    public float AccumulatedTime;

    public BorgMenu(EntityUid entity)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Entity = entity;

        if (_entity.TryGetComponent<BorgChassisComponent>(Entity, out var chassis))
            _chassis = chassis;

        BorgSprite.SetEntity(entity);
        ChargeBar.MaxValue = 1f;
        ChargeBar.Value = 1f;

        if (_entity.TryGetComponent<NameIdentifierComponent>(Entity, out var nameIdentifierComponent))
        {
            NameIdentifierLabel.Visible = true;
            NameIdentifierLabel.Text = nameIdentifierComponent.FullIdentifier;

            var fullName = _entity.GetComponent<MetaDataComponent>(Entity).EntityName;
            var name = fullName.Substring(0, fullName.Length - nameIdentifierComponent.FullIdentifier.Length - 1);
            NameLineEdit.Text = name;
        }
        else
        {
            NameIdentifierLabel.Visible = false;
            NameLineEdit.Text = _entity.GetComponent<MetaDataComponent>(Entity).EntityName;
        }

        UpdateBrainButton();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        AccumulatedTime += args.DeltaSeconds;
        BorgSprite.OverrideDirection = (Direction) ((int) AccumulatedTime % 4 * 2);
    }

    public void UpdateBrainButton()
    {
        if (_chassis?.BrainEntity is { } brain)
        {
            BrainButton.Text = _entity.GetComponent<MetaDataComponent>(brain).EntityName;
            BrainView.Visible = true;
            BrainView.SetEntity(brain);
            BrainButton.Disabled = false;
        }
        else
        {
            BrainButton.Text = Loc.GetString("borg-ui-no-brain");
            BrainButton.Disabled = true;
            BrainView.Visible = false;
        }
    }
}

