using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Content.Shared.CartridgeLoader.Cartridges;
using Content.Shared.CriminalRecords;
using Content.Shared.StationRecords;
using System.Numerics;
using Content.Shared.StatusIcon;
using Robust.Client.GameObjects;
using Robust.Shared.Prototypes;


namespace Content.Client.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class CriminalRecordsCartridgeUiFragment : BoxContainer
{
    private readonly IEntityManager _entManager;
    private readonly IPrototypeManager _prototypeManager;
    private readonly SpriteSystem _spriteSystem;
    public CriminalRecordsCartridgeUiFragment()
    {
        RobustXamlLoader.Load(this);

        _entManager = IoCManager.Resolve<IEntityManager>();
        _prototypeManager = IoCManager.Resolve<IPrototypeManager>();
        _spriteSystem = _entManager.System<SpriteSystem>();

        Orientation = LayoutOrientation.Vertical;
        HorizontalExpand = true;
        VerticalExpand = true;

        UpdateState(new CriminalRecordsCartridgeUiState(
              new List<(GeneralStationRecord, CriminalRecord)>(), 
              new List<(GeneralStationRecord, CriminalRecord)>()
              ));
    }


    public void UpdateState(CriminalRecordsCartridgeUiState state)
    {
        foreach (var (stationRecord, criminalRecord) in state.Wanted)
        {
            AddWanted(stationRecord, criminalRecord);
        }

        foreach (var (stationRecord, criminalRecord) in state.Detained)
        {
          AddDetained(stationRecord,criminalRecord);
        }
    }

    private void AddWanted(GeneralStationRecord stationRecord, CriminalRecord criminalRecord)
    {
        var nameLabel = new Label()
        {
            Text = stationRecord.Name,
            HorizontalExpand = true,
            ClipText = true,
        };

        Wanted.AddChild(nameLabel);

        var jobContainer = new BoxContainer()
        {
            Orientation = LayoutOrientation.Horizontal,
            HorizontalExpand = true,
        };

        Wanted.AddChild(jobContainer);

        var jobLabel = new Label()
        {
            Text = stationRecord.JobTitle,
            HorizontalExpand = true,
            ClipText = true,
        };


        if (!_prototypeManager.TryIndex<StatusIconPrototype>(
              stationRecord.JobIcon,
              out var proto
              ))
        {
            jobContainer.AddChild(jobLabel);
            return;
        }

        var jobIcon = new TextureRect()
        {
            TextureScale = new Vector2(2f, 2f),
            VerticalAlignment = VAlignment.Center,
            Texture = _spriteSystem.Frame0(proto.Icon),
            Margin = new Thickness(5, 0, 5, 0),
        };

        jobContainer.AddChild(jobIcon);
        jobContainer.AddChild(jobLabel);
    }

    private void AddDetained(GeneralStationRecord stationRecord, CriminalRecord criminalRecord)
    {
        var nameLabel = new Label()
        {
            Text = stationRecord.Name,
            HorizontalExpand = true,
            ClipText = true,
        };

        Detained.AddChild(nameLabel);

        var jobContainer = new BoxContainer()
        {
            Orientation = LayoutOrientation.Horizontal,
            HorizontalExpand = true,
        };

        Detained.AddChild(jobContainer);

        var jobLabel = new Label()
        {
            Text = stationRecord.JobTitle,
            HorizontalExpand = true,
            ClipText = true,
        };


        if (!_prototypeManager.TryIndex<StatusIconPrototype>(
              stationRecord.JobIcon,
              out var proto
              ))
        {
            jobContainer.AddChild(jobLabel);
            return;
        }

        var jobIcon = new TextureRect()
        {
            TextureScale = new Vector2(2f, 2f),
            VerticalAlignment = VAlignment.Center,
            Texture = _spriteSystem.Frame0(proto.Icon),
            Margin = new Thickness(5, 0, 5, 0),
        };

        jobContainer.AddChild(jobIcon);
        jobContainer.AddChild(jobLabel);
    }

}
