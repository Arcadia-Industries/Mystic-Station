using System;
using Content.Shared.Devices;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Localization;

namespace Content.Client.Devices.UI
{
    [GenerateTypedNameReferences]
    public partial class HealthSensorWindow : SS14Window
    {
        public event Action<int>? OnSensorOptionSelectedEvent;
        public event Action<bool>? OnActiveChanged;
        public event Action? OnResetPressed;

        public HealthSensorWindow()
        {
            RobustXamlLoader.Load(this);

            SensorOptions.OnItemSelected += OnSensorOptionSelected;
            SensorActive.OnToggled += args => OnActiveChanged?.Invoke(args.Pressed);
            ResetSensor.OnPressed += _ => OnResetPressed?.Invoke();

            CreateOptionButtons();
        }

        public void SetMode(int id)
        {
            SensorOptions.SelectId(id);
        }

        public void SetActive(bool active)
        {
            SensorActive.Pressed = active;
        }

        private void OnSensorOptionSelected(OptionButton.ItemSelectedEventArgs args)
        {
            SensorOptions.SelectId(args.Id);
            OnSensorOptionSelectedEvent?.Invoke(args.Id);
        }

        private void CreateOptionButtons()
        {
            //we use the enum value as the ID, that way we can just send the ID to the server when it changes
            //and it'll know which value to set the VA to.
            SensorOptions.AddItem("Critcal", (int)SharedHealthSensorComponent.SensorMode.Crit);
            SensorOptions.AddItem("Death", (int)SharedHealthSensorComponent.SensorMode.Death);
        }
    }
}
