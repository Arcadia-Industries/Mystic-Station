using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface;
using System.Linq;

namespace Content.Client.Lathe.UI;

[GenerateTypedNameReferences]
public sealed partial class MaterialRow : PanelContainer
{
    public string Material;
    public int Amount;
    public int Multiplier;
    public bool CanEject;
    public Action<string, int, int?>? OnEjectPressed;

    public MaterialRow(string material, int amount, bool canEject, int multiplier, Action<string, int, int?>? onEjectPressed)
    {
        RobustXamlLoader.Load(this);

        Material = material;
        Amount = amount;
        Multiplier = multiplier;
        CanEject = canEject;
        OnEjectPressed = onEjectPressed;
        PopulateButtons();
    }

    public void PopulateButtons()
    {
        if (!CanEject)
            return;

        int[] volumes = { 5, 10, 30 };

        foreach (var volume in volumes)
        {
            var button = new Button()
            {
                Name = $"Eject{volume}",
                Access = AccessLevel.Public,
                Text = Loc.GetString($"lathe-menu-material-eject-{volume}")
            };
            button.OnPressed += (_) =>
            {
                OnEjectPressed?.Invoke(Material, Amount, volume);
            };
            Content.AddChild(button);
        }

        var ejectAllButton = new Button()
        {
            Name = "Eject",
            Access = AccessLevel.Public,
            Text = Loc.GetString("lathe-menu-material-eject"),
        };
        ejectAllButton.OnPressed += (_) => OnEjectPressed?.Invoke(Material, Amount, null);
        Content.AddChild(ejectAllButton);
    }
}
