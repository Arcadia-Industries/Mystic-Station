using System.Text;
using Content.Shared.Lathe;
using Content.Shared.Materials;
using Content.Shared.Research.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Lathe.UI;

[GenerateTypedNameReferences]
public sealed partial class LatheMenu : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IEntityManager _entityManager = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly LatheSystem _lathe;

    private const float RecipeTooltipDelay = 0.5f;

    public event Action<BaseButton.ButtonEventArgs>? OnQueueButtonPressed;
    public event Action<BaseButton.ButtonEventArgs>? OnServerListButtonPressed;
    public event Action<BaseButton.ButtonEventArgs>? OnServerSyncButtonPressed;
    public event Action<string, int>? RecipeQueueAction;

    public List<string> Recipes = new();

    public LatheMenu(LatheBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _spriteSystem = _entityManager.EntitySysManager.GetEntitySystem<SpriteSystem>();
        _lathe = _entityManager.EntitySysManager.GetEntitySystem<LatheSystem>();

        Title = _entityManager.GetComponent<MetaDataComponent>(owner.Lathe).EntityName;

        SearchBar.OnTextChanged += _ =>
        {
            PopulateRecipes(owner.Lathe);
        };
        AmountLineEdit.OnTextChanged += _ =>
        {
            PopulateRecipes(owner.Lathe);
        };

        // This is a shitty hack, because item lists apparently don't actually support tooltips. Yay..
        RecipeList.OnItemHover += ev =>
        {
            ev.ItemList.HideTooltip();
            ev.ItemList.ToolTip = ev.ItemList[ev.ItemIndex].TooltipText;
        };
        RecipeList.TooltipDelay = RecipeTooltipDelay;
        RecipeList.OnItemSelected += ItemSelected;

        QueueButton.OnPressed += a => OnQueueButtonPressed?.Invoke(a);
        ServerListButton.OnPressed += a => OnServerListButtonPressed?.Invoke(a);

        //refresh the bui state
        ServerSyncButton.OnPressed += a => OnServerSyncButtonPressed?.Invoke(a);

        if (_entityManager.TryGetComponent<LatheComponent>(owner.Lathe, out var latheComponent))
        {
            if (latheComponent.DynamicRecipes == null)
            {
                ServerListButton.Visible = false;
                ServerSyncButton.Visible = false;
            }
        }
    }

    public void ItemSelected(ItemList.ItemListSelectedEventArgs args)
    {
        args.ItemList.HideTooltip();
        args.ItemList.ToolTip = args.ItemList[args.ItemIndex].TooltipText;

        int.TryParse(AmountLineEdit.Text, out var quantity);
        if (quantity <= 0)
            quantity = 1;
        RecipeQueueAction?.Invoke(Recipes[args.ItemIndex], quantity);
    }

    public void PopulateMaterials(EntityUid lathe)
    {
        Materials.Clear();

        if (!_entityManager.TryGetComponent<MaterialStorageComponent>(lathe, out var materialStorageComponent))
            return;


        foreach (var (id, amount) in materialStorageComponent.Storage)
        {
            if (!_prototypeManager.TryIndex(id, out MaterialPrototype? material))
                continue;
            //TODO: loc string this bitch
            Materials.AddItem($"{material.Name} {amount} cm³", _spriteSystem.Frame0(material.Icon), false);
        }
    }

    public void PopulateRecipes(EntityUid lathe)
    {
        RecipeList.Clear();
        var recipesToShow = new List<LatheRecipePrototype>();
        foreach (var recipe in Recipes)
        {
            if (!_prototypeManager.TryIndex<LatheRecipePrototype>(recipe, out var proto))
                continue;

            if (SearchBar.Text.Trim().Length != 0)
            {
                if (proto.Name.ToLowerInvariant().Contains(SearchBar.Text.Trim().ToLowerInvariant()))
                    recipesToShow.Add(proto);
            }
            else
            {
                recipesToShow.Add(proto);
            }
        }

        foreach (var prototype in recipesToShow)
        {
            var item = RecipeList.AddItem(prototype.Name, _spriteSystem.Frame0(prototype.Icon));

            StringBuilder sb = new();
            var first = true;
            foreach (var (id, amount) in prototype.RequiredMaterials)
            {
                if (!_prototypeManager.TryIndex<MaterialPrototype>(id, out var proto))
                    continue;

                if (first)
                    first = false;
                else
                    sb.Append("\n");

                sb.Append(amount.ToString());
                sb.Append(" ");
                sb.Append(proto.Name);
            }

            int.TryParse(AmountLineEdit.Text, out var quantity);
            if (quantity <= 0)
                quantity = 1;

            item.TooltipText = sb.ToString();
            item.Disabled = !_lathe.CanProduce(lathe, prototype, quantity);
        }
    }
}
