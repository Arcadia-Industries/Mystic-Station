using System.Numerics;
using System.Text;
using Content.Shared.Damage.Prototypes;
using Content.Shared.MedicalScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.HealthAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HealthAnalyzerEmbed : BoxContainer
    {
        public HealthAnalyzerEmbed()
        {
            RobustXamlLoader.Load(this);
            Orientation = LayoutOrientation.Vertical;
        }

        public void UpdateState(HealthAnalyzerUiState state)
        {
            var text = new StringBuilder();

            text.Append($"{Loc.GetString("health-analyzer-window-entity-health-text", ("entityName", state.EntityName))}\n");

            text.Append($"{Loc.GetString("health-analyzer-window-entity-temperature-text", ("temperature", float.IsNaN(state.Temperature) ? "N/A" : $"{state.Temperature - 273f:F1} Â°C"))}\n");

            text.Append($"{Loc.GetString("health-analyzer-window-entity-blood-level-text", ("bloodLevel", float.IsNaN(state.BloodLevel) ? "N/A" : $"{state.BloodLevel * 100:F1} %"))}\n");

            if (state.Damage != null)
            {
                text.Append($"\n{Loc.GetString("health-analyzer-window-entity-damage-total-text", ("amount", state.Damage.TotalDamage))}\n");

                HashSet<string> shownTypes = new();

                var protos = IoCManager.Resolve<IPrototypeManager>();

                // Show the total damage and type breakdown for each damage group.
                foreach (var (damageGroupId, damageAmount) in state.Damage.DamagePerGroup)
                {
                    text.Append($"\n{Loc.GetString("health-analyzer-window-damage-group-text", ("damageGroup", Loc.GetString("health-analyzer-window-damage-group-" + damageGroupId)), ("amount", damageAmount))}");
                    // Show the damage for each type in that group.
                    var group = protos.Index<DamageGroupPrototype>(damageGroupId);
                    foreach (var type in group.DamageTypes)
                    {
                        if (state.Damage.DamagePerType.TryGetValue(type, out var typeAmount))
                        {
                            // If damage types are allowed to belong to more than one damage group, they may appear twice here. Mark them as duplicate.
                            if (!shownTypes.Contains(type))
                            {
                                shownTypes.Add(type);
                                text.Append($"\n- {Loc.GetString("health-analyzer-window-damage-type-text", ("damageType", Loc.GetString("health-analyzer-window-damage-type-" + type)), ("amount", typeAmount))}");
                            }
                        }
                    }
                    text.AppendLine();
                }
            }

            Diagnostics.Text = text.ToString();

            // TODO: Determine if this is necessary
            // Diagnostics.Text = Loc.GetString("health-analyzer-window-no-patient-data-text");
            // SetSize = new Vector2(250, 100);
        }
    }
}
