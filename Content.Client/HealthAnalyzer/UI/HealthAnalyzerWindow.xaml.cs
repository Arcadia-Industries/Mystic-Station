using System.Text;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using static Content.Shared.HealthAnalyzer.SharedHealthAnalyzerComponent;

namespace Content.Client.HealthAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HealthAnalyzerWindow : DefaultWindow
    {
        public HealthAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate(HealthAnalyzerBoundUserInterfaceState state)
        {
            var text = new StringBuilder();

            if (state.TargetName == null || state.IsAlive == null)
            {
                Diagnostics.Text = Loc.GetString("health-analyzer-window-no-patient-data-text");
                SetSize = (250, 600);
            }
            else
            {
                text.Append($"{Loc.GetString("health-analyzer-window-entity-health-text", ("entityName", state.TargetName))}\n");
                var totalDamageAmount = state.TotalDamage != null ? state.TotalDamage : "Unknown";
                text.Append($"{Loc.GetString("health-analyzer-window-entity-damage-total-text", ("amount", totalDamageAmount))}\n");

                // Show the total damage and type breakdown for each damage group.
                foreach (var damageGroup in state.DamageGroups)
                {
                    string damageGroupName = damageGroup.GroupName != null ? damageGroup.GroupName : "Unknown";
                    string damageGroupTotalDamage = damageGroup.GroupTotalDamage != null ? damageGroup.GroupTotalDamage : "Unknown";
                    text.Append($"\n{Loc.GetString("health-analyzer-window-damage-group-text", ("damageGroup", damageGroupName), ("amount", damageGroupTotalDamage))}");

                    // Show the damage for each type in that group.
                    if (damageGroup.GroupedMinorDamages != null)
                    {
                        foreach (var minorDamage in damageGroup.GroupedMinorDamages)
                        {
                            text.Append($"\n- {Loc.GetString("health-analyzer-window-damage-type-text", ("damageType", minorDamage.Key), ("amount", minorDamage.Value))}");
                        }
                    }
                    text.Append('\n');
                }
                Diagnostics.Text = text.ToString();
            }
            SetSize = (250, 600);
        }
    }
}
