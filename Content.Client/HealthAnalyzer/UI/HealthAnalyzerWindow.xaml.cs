using System.Numerics;
using System.Text;
using Content.Shared.Chemistry.Reagent;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.MedicalScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.HealthAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HealthAnalyzerWindow : DefaultWindow
    {
        public HealthAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);
        }

        public void Populate(HealthAnalyzerScannedUserMessage msg)
        {
            var text = new FormattedMessage();
            var entities = IoCManager.Resolve<IEntityManager>();
            var target = entities.GetEntity(msg.TargetEntity);

            if (msg.TargetEntity != null && entities.TryGetComponent<DamageableComponent>(target, out var damageable))
            {
                string entityName = "Unknown";
                if (msg.TargetEntity != null &&
                    entities.HasComponent<MetaDataComponent>(target.Value))
                {
                    entityName = Identity.Name(target.Value, entities);
                }

                IReadOnlyDictionary<string, FixedPoint2> damagePerGroup = damageable.DamagePerGroup;
                IReadOnlyDictionary<string, FixedPoint2> damagePerType = damageable.Damage.DamageDict;

                text.AddText($"{Loc.GetString("health-analyzer-window-entity-health-text", ("entityName", entityName))}\n");


                text.AddText($"{Loc.GetString("health-analyzer-window-entity-temperature-text", ("temperature", float.IsNaN(msg.Temperature) ? "N/A" : $"{msg.Temperature - 273f:F1} Â°C"))}\n");


                text.AddText($"{Loc.GetString("health-analyzer-window-entity-blood-level-text", ("bloodLevel", float.IsNaN(msg.BloodLevel) ? "N/A" : $"{msg.BloodLevel * 100:F1} %"))}\n\n");

                var protos = IoCManager.Resolve<IPrototypeManager>();

                text.AddText($"{Loc.GetString("blood-analyzer-window-entity-chems-text")}\n");
                if (msg.ChemStream != null && msg.ChemStream.Contents.Count > 0)
                {
                    foreach (var content in msg.ChemStream.Contents)
                    {
                        var reagent = protos.Index<ReagentPrototype>(content.Reagent.Prototype);
                        var contentName = reagent.LocalizedName;
                        text.AddMarkup($"[color = {reagent.SubstanceColor.ToHex()}]{contentName}[/color]: {content.Quantity}\n");

                    }
                }
                else
                {
                    text.AddText($"{Loc.GetString("blood-analyzer-window-entity-chems-none-text")}\n");
                }

                // Damage
                text.AddText($"\n{Loc.GetString("health-analyzer-window-entity-damage-total-text", ("amount", damageable.TotalDamage))}\n");

                HashSet<string> shownTypes = new();



                // Show the total damage and type breakdown for each damage group.
                foreach (var (damageGroupId, damageAmount) in damagePerGroup)
                {
                    if (damageAmount == 0)
                    {
                        continue;
                    }
                    text.AddText($"\n{Loc.GetString("health-analyzer-window-damage-group-text", ("damageGroup", Loc.GetString("health-analyzer-window-damage-group-" + damageGroupId)), ("amount", damageAmount))}");
                    // Show the damage for each type in that group.
                    var group = protos.Index<DamageGroupPrototype>(damageGroupId);
                    foreach (var type in group.DamageTypes)
                    {
                        if (damagePerType.TryGetValue(type, out var typeAmount) && typeAmount != 0)
                        {
                            // If damage types are allowed to belong to more than one damage group, they may appear twice here. Mark them as duplicate.
                            if (!shownTypes.Contains(type))
                            {
                                shownTypes.Add(type);
                                text.AddText($"\n- {Loc.GetString("health-analyzer-window-damage-type-text", ("damageType", Loc.GetString("health-analyzer-window-damage-type-" + type)), ("amount", typeAmount))}");
                            }
                        }
                    }
                    text.AddText("\n");
                }
                Diagnostics.SetMessage(text);
                SetSize = new Vector2(250, 600);
            }
            else
            {
                Diagnostics.SetMessage(Loc.GetString("health-analyzer-window-no-patient-data-text"));
                SetSize = new Vector2(250, 100);
            }
        }
    }
}
