using System.Text;
using Content.Shared.Damage;
using Content.Shared.Damage.Prototypes;
using Content.Shared.FixedPoint;
using Content.Shared.IdentityManagement;
using Content.Shared.MedicalScanner;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.HealthAnalyzer.UI
{
    [GenerateTypedNameReferences]
    public sealed partial class HealthAnalyzerWindow : DefaultWindow
    {
        private readonly IEntityManager _entityManager;
        private readonly SpriteSystem _spriteSystem;

        public HealthAnalyzerWindow()
        {
            RobustXamlLoader.Load(this);

            _entityManager = IoCManager.Resolve<IEntityManager>();
            _spriteSystem = _entityManager.System<SpriteSystem>();
        }


        public void Populate(HealthAnalyzerScannedUserMessage msg)
        {
            if (msg.TargetEntity == null ||
                !_entityManager.TryGetComponent<DamageableComponent>(msg.TargetEntity, out var damageable))
            {
                Diagnostics.Text = Loc.GetString("health-analyzer-window-no-patient-data-text");
                SetSize = (250, 100);
                return;
            }
            
            string entityName = "Unknown";
            if (msg.TargetEntity != null &&
                _entityManager.TryGetComponent<MetaDataComponent>(msg.TargetEntity.Value, out var metaData))
                entityName = Identity.Name(msg.TargetEntity.Value, _entityManager);

            IReadOnlyDictionary<string, FixedPoint2> damagePerGroup = damageable.DamagePerGroup;
            IReadOnlyDictionary<string, FixedPoint2> damagePerType = damageable.Damage.DamageDict;
            
            var text = new StringBuilder();

            // researched object
            text.Append(
                $"{Loc.GetString(
                    "health-analyzer-window-entity-health-text",
                    ("entityName", entityName)
                )}\n"
            );

            // Damage
            text.Append(
                $"\n{Loc.GetString(
                    "health-analyzer-window-entity-damage-total-text",
                    ("amount", damageable.TotalDamage)
                )}\n"
            );

            HashSet<string> shownTypes = new();

            var protos = IoCManager.Resolve<IPrototypeManager>();

            GroupTexture.Texture = GetTexture("toxin");

            // Show the total damage and type breakdown for each damage group.
            foreach (var (damageGroupId, damageAmount) in damagePerGroup)
            {
                text.Append(
                    $"\n{Loc.GetString(
                        "health-analyzer-window-damage-group-text",
                        ("damageGroup", Loc.GetString("health-analyzer-window-damage-group-" + damageGroupId)),
                        ("amount", damageAmount)
                    )}"
                );
                // Show the damage for each type in that group.
                var group = protos.Index<DamageGroupPrototype>(damageGroupId);
                foreach (var type in group.DamageTypes)
                {
                    if (damagePerType.TryGetValue(type, out var typeAmount))
                    {
                        // If damage types are allowed to belong to more than one damage group, they may appear twice here. Mark them as duplicate.
                        if (!shownTypes.Contains(type))
                        {
                            shownTypes.Add(type);
                            text.Append(
                                $"\n- {Loc.GetString(
                                    "health-analyzer-window-damage-type-text",
                                    ("damageType", Loc.GetString("health-analyzer-window-damage-type-" + type)),
                                    ("amount", typeAmount)
                                )}"
                            );
                        }
                    }
                }

                text.AppendLine();
                Logger.Debug($"{text.ToString()}");
            }

            // Diagnostics.Text = text.ToString();
            // SetSize = (500, 500);
        }

        private Texture GetTexture(string texture)
        {
            var sprite = new SpriteSpecifier.Rsi(new("/Textures/Objects/Devices/health_analyzer.rsi"), texture);
            return _spriteSystem.Frame0(sprite);
        }
    }
}