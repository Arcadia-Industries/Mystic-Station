using System;
using Robust.Shared.IoC;
using Robust.Shared.Random;

namespace Content.Server.Dynamic;

/// <summary>
///     Functions used for calculating Cauchy-Lorentz distributions
/// </summary>
public static class Lorentz
{
    /// <summary>
    ///     Calculates a Cauchy-Lorentz probability density distribution.
    /// </summary>
    public static float ProbabilityDensity(float center, float width,
        IRobustRandom? random=null)
    {
        IoCManager.Resolve(ref random);
        return width * MathF.Tan(MathF.PI * (random.NextFloat() - 0.5f)) + center;
    }

    /// <summary>
    ///     Calculates a Cauchy-Lorentz cumulative distribution.
    /// </summary>
    public static float CumulativeDistribution(float prob, float center, float width,
        IRobustRandom? random=null)
    {
        IoCManager.Resolve(ref random);
        return (1.0f / MathF.PI) * MathF.Atan((prob - center) / width) + 0.5f;
    }

    /// <summary>
    ///     Turns the value generated by the Lorentz distribution to a number between 0 and 100,
    ///     for Dynamic threat calculations.
    /// </summary>
    public static float LorentzToAmount(float prob,
        IRobustRandom? random=null)
    {
        IoCManager.Resolve(ref random);

        return prob switch
        {
            <= -20 => random.NextFloat(0, 10),
            > -20 and <= -10 => RuleOfThree(-40, -20, prob) + 50,
            > -10 and <= -5 => RuleOfThree(-30, -10, prob) + 50,
            > -5 and <= -2.5f => RuleOfThree(-20, -5, prob) + 50,
            > -2.5f and <= 0 => RuleOfThree(-10, -2.5f, prob) + 50,
            > 0 and <= 2.5f => RuleOfThree(10, 2.5f, prob) + 50,
            > 2.5f and <= 5 => RuleOfThree(20, 5, prob) + 50,
            > 5 and <= 10 => RuleOfThree(30, 10, prob) + 50,
            > 10 and <= 20 => RuleOfThree(40, 20, prob) + 50,
            >= 20 => random.NextFloat(90, 100),
            float.NaN => float.NaN // fuck you!
        };
    }

    /// <summary>
    ///     I don't really know what this is tbh. But tg uses it
    /// </summary>
    public static float RuleOfThree(float a, float b, float x)
    {
        return (a * x) / b;
    }
}
