using Robust.Shared.GameObjects;
using Robust.Server.GameObjects;
using Content.Shared.Sound;
using Robust.Shared.ViewVariables;
using Robust.Shared.Analyzers;
using Content.Shared.Smoking;
using Robust.Shared.Serialization.Manager.Attributes;


namespace Content.Server.Ignitable;

[RegisterComponent]
[Friend(typeof(IgnitableSystem))]
public class IgnitableComponent : Component
{
    public override string Name => "Ignitable";

    ///<summary>
    ///Current state to the ignitable. Uses smokable state
    /// </summary>
    [ViewVariables]
    public SmokableState CurrentState = SmokableState.Unlit;

    ///<summary>
    ///How long will this ignitable component stay lit?
    /// </summary>
    [ViewVariables]
    [DataField("duration")]
    public float Duration = 10f;

    ///<summary>
    ///How long does this component have left to burn
    /// </summary>
    [ViewVariables]
    public float DurationLeft;

    ///<summary>
    ///The amount of heat generated by this component being lit
    /// </summary>
    [ViewVariables]
    [DataField("temperature")]
    public int Temperature = 400;


    ///<summary>
    ///Point light component, this is the actual light given off by the ignited object
    /// </summary>
    [ComponentDependency]
    public readonly PointLightComponent? PointLightComponent = default;

    ///<summary>
    ///Bool used to track whether a specific Ignitable is able to be re-lit
    /// </summary>
    [DataField("canRelight")]
    public bool CanRelight = false;

    ///<summary>
    ///Bool used to track if this is the first time we've lit this object
    /// </summary>
    public bool IsFirstLight = true;

    ///<summary>
    ///Bool to track whether or not this item should have it's burn time randomized
    /// </summary>
    [DataField("shouldRandomize")]
    public bool ShouldRandomize = false;

    ///<summary>
    ///Float used to clamp the randomized burn time value, this number will be the max += amount 
    /// </summary>
    [ViewVariables]
    [DataField("randomizeMaxTime")]
    public int RandomizeMaxTime = 120;


    ///<summary>
    ///Bool to determine if we should play an ignition sound or not
    /// </summary>
    [DataField("shouldPlaySound")]
    public bool ShouldPlaySound = false;

    ///<summary>
    ///Path to sound to play if ShouldPlaySound is true
    /// </summary>
    [DataField("igniteSound")] public SoundSpecifier IgniteSound = default!;


}
